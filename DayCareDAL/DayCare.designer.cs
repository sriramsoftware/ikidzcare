#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DayCareDAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="iKidzCareLive")]
	public partial class DayCareDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAbsentReason(AbsentReason instance);
    partial void UpdateAbsentReason(AbsentReason instance);
    partial void DeleteAbsentReason(AbsentReason instance);
    partial void InsertChildAbsentHistory(ChildAbsentHistory instance);
    partial void UpdateChildAbsentHistory(ChildAbsentHistory instance);
    partial void DeleteChildAbsentHistory(ChildAbsentHistory instance);
    partial void InsertChildAttendenceHistory(ChildAttendenceHistory instance);
    partial void UpdateChildAttendenceHistory(ChildAttendenceHistory instance);
    partial void DeleteChildAttendenceHistory(ChildAttendenceHistory instance);
    partial void InsertClassCategory(ClassCategory instance);
    partial void UpdateClassCategory(ClassCategory instance);
    partial void DeleteClassCategory(ClassCategory instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertEnrollmentStatus(EnrollmentStatus instance);
    partial void UpdateEnrollmentStatus(EnrollmentStatus instance);
    partial void DeleteEnrollmentStatus(EnrollmentStatus instance);
    partial void InsertRelationship(Relationship instance);
    partial void UpdateRelationship(Relationship instance);
    partial void DeleteRelationship(Relationship instance);
    partial void InsertStaffCategory(StaffCategory instance);
    partial void UpdateStaffCategory(StaffCategory instance);
    partial void DeleteStaffCategory(StaffCategory instance);
    partial void InsertState(State instance);
    partial void UpdateState(State instance);
    partial void DeleteState(State instance);
    partial void InsertTimeZone(TimeZone instance);
    partial void UpdateTimeZone(TimeZone instance);
    partial void DeleteTimeZone(TimeZone instance);
    partial void InsertChargeCode(ChargeCode instance);
    partial void UpdateChargeCode(ChargeCode instance);
    partial void DeleteChargeCode(ChargeCode instance);
    partial void InsertFeesPeriod(FeesPeriod instance);
    partial void UpdateFeesPeriod(FeesPeriod instance);
    partial void DeleteFeesPeriod(FeesPeriod instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    partial void InsertProgClassCategory(ProgClassCategory instance);
    partial void UpdateProgClassCategory(ProgClassCategory instance);
    partial void DeleteProgClassCategory(ProgClassCategory instance);
    partial void InsertProgStaff(ProgStaff instance);
    partial void UpdateProgStaff(ProgStaff instance);
    partial void DeleteProgStaff(ProgStaff instance);
    partial void InsertUserGroup(UserGroup instance);
    partial void UpdateUserGroup(UserGroup instance);
    partial void DeleteUserGroup(UserGroup instance);
    partial void InsertFont(Font instance);
    partial void UpdateFont(Font instance);
    partial void DeleteFont(Font instance);
    partial void InsertClassRoom(ClassRoom instance);
    partial void UpdateClassRoom(ClassRoom instance);
    partial void DeleteClassRoom(ClassRoom instance);
    partial void InsertStaffAttendenceHistory(StaffAttendenceHistory instance);
    partial void UpdateStaffAttendenceHistory(StaffAttendenceHistory instance);
    partial void DeleteStaffAttendenceHistory(StaffAttendenceHistory instance);
    partial void InsertHoursOfOperation(HoursOfOperation instance);
    partial void UpdateHoursOfOperation(HoursOfOperation instance);
    partial void DeleteHoursOfOperation(HoursOfOperation instance);
    partial void InsertProgSchedule(ProgSchedule instance);
    partial void UpdateProgSchedule(ProgSchedule instance);
    partial void DeleteProgSchedule(ProgSchedule instance);
    partial void InsertFamilyData(FamilyData instance);
    partial void UpdateFamilyData(FamilyData instance);
    partial void DeleteFamilyData(FamilyData instance);
    partial void InsertEmploymentStatus(EmploymentStatus instance);
    partial void UpdateEmploymentStatus(EmploymentStatus instance);
    partial void DeleteEmploymentStatus(EmploymentStatus instance);
    partial void InsertChildSchedule(ChildSchedule instance);
    partial void UpdateChildSchedule(ChildSchedule instance);
    partial void DeleteChildSchedule(ChildSchedule instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    partial void InsertSchoolProgramFeesDetail(SchoolProgramFeesDetail instance);
    partial void UpdateSchoolProgramFeesDetail(SchoolProgramFeesDetail instance);
    partial void DeleteSchoolProgramFeesDetail(SchoolProgramFeesDetail instance);
    partial void InsertChildProgEnrollmentFeeDetail(ChildProgEnrollmentFeeDetail instance);
    partial void UpdateChildProgEnrollmentFeeDetail(ChildProgEnrollmentFeeDetail instance);
    partial void DeleteChildProgEnrollmentFeeDetail(ChildProgEnrollmentFeeDetail instance);
    partial void InsertChildProgEnrollment(ChildProgEnrollment instance);
    partial void UpdateChildProgEnrollment(ChildProgEnrollment instance);
    partial void DeleteChildProgEnrollment(ChildProgEnrollment instance);
    partial void InsertChildData(ChildData instance);
    partial void UpdateChildData(ChildData instance);
    partial void DeleteChildData(ChildData instance);
    partial void InsertChildEnrollmentStatus(ChildEnrollmentStatus instance);
    partial void UpdateChildEnrollmentStatus(ChildEnrollmentStatus instance);
    partial void DeleteChildEnrollmentStatus(ChildEnrollmentStatus instance);
    partial void InsertSyncLog(SyncLog instance);
    partial void UpdateSyncLog(SyncLog instance);
    partial void DeleteSyncLog(SyncLog instance);
    partial void InsertLedger(Ledger instance);
    partial void UpdateLedger(Ledger instance);
    partial void DeleteLedger(Ledger instance);
    partial void InsertAdditionalNote(AdditionalNote instance);
    partial void UpdateAdditionalNote(AdditionalNote instance);
    partial void DeleteAdditionalNote(AdditionalNote instance);
    partial void InsertSchoolProgram(SchoolProgram instance);
    partial void UpdateSchoolProgram(SchoolProgram instance);
    partial void DeleteSchoolProgram(SchoolProgram instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStaffSchoolYear(StaffSchoolYear instance);
    partial void UpdateStaffSchoolYear(StaffSchoolYear instance);
    partial void DeleteStaffSchoolYear(StaffSchoolYear instance);
    partial void InsertChildFamily(ChildFamily instance);
    partial void UpdateChildFamily(ChildFamily instance);
    partial void DeleteChildFamily(ChildFamily instance);
    partial void InsertChildSchoolYear(ChildSchoolYear instance);
    partial void UpdateChildSchoolYear(ChildSchoolYear instance);
    partial void DeleteChildSchoolYear(ChildSchoolYear instance);
    partial void InsertSchool(School instance);
    partial void UpdateSchool(School instance);
    partial void DeleteSchool(School instance);
    partial void InsertSchoolYear(SchoolYear instance);
    partial void UpdateSchoolYear(SchoolYear instance);
    partial void DeleteSchoolYear(SchoolYear instance);
    partial void InsertChildFamilySchoolYear(ChildFamilySchoolYear instance);
    partial void UpdateChildFamilySchoolYear(ChildFamilySchoolYear instance);
    partial void DeleteChildFamilySchoolYear(ChildFamilySchoolYear instance);
    partial void InsertProgClassRoom(ProgClassRoom instance);
    partial void UpdateProgClassRoom(ProgClassRoom instance);
    partial void DeleteProgClassRoom(ProgClassRoom instance);
    partial void InsertClassRoomSchoolYear(ClassRoomSchoolYear instance);
    partial void UpdateClassRoomSchoolYear(ClassRoomSchoolYear instance);
    partial void DeleteClassRoomSchoolYear(ClassRoomSchoolYear instance);
    #endregion
		
		public DayCareDataContext() : 
				base(global::DayCareDAL.Properties.Settings.Default.daycareConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DayCareDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DayCareDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DayCareDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DayCareDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AbsentReason> AbsentReasons
		{
			get
			{
				return this.GetTable<AbsentReason>();
			}
		}
		
		public System.Data.Linq.Table<ChildAbsentHistory> ChildAbsentHistories
		{
			get
			{
				return this.GetTable<ChildAbsentHistory>();
			}
		}
		
		public System.Data.Linq.Table<ChildAttendenceHistory> ChildAttendenceHistories
		{
			get
			{
				return this.GetTable<ChildAttendenceHistory>();
			}
		}
		
		public System.Data.Linq.Table<ClassCategory> ClassCategories
		{
			get
			{
				return this.GetTable<ClassCategory>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<EnrollmentStatus> EnrollmentStatus
		{
			get
			{
				return this.GetTable<EnrollmentStatus>();
			}
		}
		
		public System.Data.Linq.Table<Relationship> Relationships
		{
			get
			{
				return this.GetTable<Relationship>();
			}
		}
		
		public System.Data.Linq.Table<StaffCategory> StaffCategories
		{
			get
			{
				return this.GetTable<StaffCategory>();
			}
		}
		
		public System.Data.Linq.Table<State> States
		{
			get
			{
				return this.GetTable<State>();
			}
		}
		
		public System.Data.Linq.Table<TimeZone> TimeZones
		{
			get
			{
				return this.GetTable<TimeZone>();
			}
		}
		
		public System.Data.Linq.Table<ChargeCode> ChargeCodes
		{
			get
			{
				return this.GetTable<ChargeCode>();
			}
		}
		
		public System.Data.Linq.Table<FeesPeriod> FeesPeriods
		{
			get
			{
				return this.GetTable<FeesPeriod>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
		
		public System.Data.Linq.Table<ProgClassCategory> ProgClassCategories
		{
			get
			{
				return this.GetTable<ProgClassCategory>();
			}
		}
		
		public System.Data.Linq.Table<ProgStaff> ProgStaffs
		{
			get
			{
				return this.GetTable<ProgStaff>();
			}
		}
		
		public System.Data.Linq.Table<UserGroup> UserGroups
		{
			get
			{
				return this.GetTable<UserGroup>();
			}
		}
		
		public System.Data.Linq.Table<Font> Fonts
		{
			get
			{
				return this.GetTable<Font>();
			}
		}
		
		public System.Data.Linq.Table<ClassRoom> ClassRooms
		{
			get
			{
				return this.GetTable<ClassRoom>();
			}
		}
		
		public System.Data.Linq.Table<StaffAttendenceHistory> StaffAttendenceHistories
		{
			get
			{
				return this.GetTable<StaffAttendenceHistory>();
			}
		}
		
		public System.Data.Linq.Table<HoursOfOperation> HoursOfOperations
		{
			get
			{
				return this.GetTable<HoursOfOperation>();
			}
		}
		
		public System.Data.Linq.Table<ProgSchedule> ProgSchedules
		{
			get
			{
				return this.GetTable<ProgSchedule>();
			}
		}
		
		public System.Data.Linq.Table<FamilyData> FamilyDatas
		{
			get
			{
				return this.GetTable<FamilyData>();
			}
		}
		
		public System.Data.Linq.Table<EmploymentStatus> EmploymentStatus
		{
			get
			{
				return this.GetTable<EmploymentStatus>();
			}
		}
		
		public System.Data.Linq.Table<ChildSchedule> ChildSchedules
		{
			get
			{
				return this.GetTable<ChildSchedule>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
		
		public System.Data.Linq.Table<SchoolProgramFeesDetail> SchoolProgramFeesDetails
		{
			get
			{
				return this.GetTable<SchoolProgramFeesDetail>();
			}
		}
		
		public System.Data.Linq.Table<ChildProgEnrollmentFeeDetail> ChildProgEnrollmentFeeDetails
		{
			get
			{
				return this.GetTable<ChildProgEnrollmentFeeDetail>();
			}
		}
		
		public System.Data.Linq.Table<ChildProgEnrollment> ChildProgEnrollments
		{
			get
			{
				return this.GetTable<ChildProgEnrollment>();
			}
		}
		
		public System.Data.Linq.Table<ChildData> ChildDatas
		{
			get
			{
				return this.GetTable<ChildData>();
			}
		}
		
		public System.Data.Linq.Table<ChildEnrollmentStatus> ChildEnrollmentStatus
		{
			get
			{
				return this.GetTable<ChildEnrollmentStatus>();
			}
		}
		
		public System.Data.Linq.Table<SyncLog> SyncLogs
		{
			get
			{
				return this.GetTable<SyncLog>();
			}
		}
		
		public System.Data.Linq.Table<Ledger> Ledgers
		{
			get
			{
				return this.GetTable<Ledger>();
			}
		}
		
		public System.Data.Linq.Table<AdditionalNote> AdditionalNotes
		{
			get
			{
				return this.GetTable<AdditionalNote>();
			}
		}
		
		public System.Data.Linq.Table<SchoolProgram> SchoolPrograms
		{
			get
			{
				return this.GetTable<SchoolProgram>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<StaffSchoolYear> StaffSchoolYears
		{
			get
			{
				return this.GetTable<StaffSchoolYear>();
			}
		}
		
		public System.Data.Linq.Table<ChildFamily> ChildFamilies
		{
			get
			{
				return this.GetTable<ChildFamily>();
			}
		}
		
		public System.Data.Linq.Table<ChildSchoolYear> ChildSchoolYears
		{
			get
			{
				return this.GetTable<ChildSchoolYear>();
			}
		}
		
		public System.Data.Linq.Table<School> Schools
		{
			get
			{
				return this.GetTable<School>();
			}
		}
		
		public System.Data.Linq.Table<SchoolYear> SchoolYears
		{
			get
			{
				return this.GetTable<SchoolYear>();
			}
		}
		
		public System.Data.Linq.Table<ChildFamilySchoolYear> ChildFamilySchoolYears
		{
			get
			{
				return this.GetTable<ChildFamilySchoolYear>();
			}
		}
		
		public System.Data.Linq.Table<ProgClassRoom> ProgClassRooms
		{
			get
			{
				return this.GetTable<ProgClassRoom>();
			}
		}
		
		public System.Data.Linq.Table<ClassRoomSchoolYear> ClassRoomSchoolYears
		{
			get
			{
				return this.GetTable<ClassRoomSchoolYear>();
			}
		}
		
		[Function(Name="dbo.spCheckDuplicate")]
		public int spCheckDuplicate([Parameter(Name="TblName", DbType="NVarChar(50)")] string tblName, [Parameter(Name="ColumnName", DbType="NVarChar(50)")] string columnName, [Parameter(Name="ColumnValue", DbType="NVarChar(100)")] string columnValue, [Parameter(Name="Type", DbType="NVarChar(50)")] string type, [Parameter(Name="Id", DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(DbType="Bit")] ref System.Nullable<bool> result)
		{
			IExecuteResult result1 = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tblName, columnName, columnValue, type, id, result);
			result = ((System.Nullable<bool>)(result1.GetParameterValue(5)));
			return ((int)(result1.ReturnValue));
		}
		
		[Function(Name="dbo.spGetProgStaffList")]
		public ISingleResult<spGetProgStaffListResult> spGetProgStaffList([Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolId);
			return ((ISingleResult<spGetProgStaffListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetProgScheduleList")]
		public ISingleResult<spGetProgScheduleListResult> spGetProgScheduleList([Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolId);
			return ((ISingleResult<spGetProgScheduleListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spUpdateSchoolProgram")]
		public int spUpdateSchoolProgram([Parameter(Name="Id", DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId, [Parameter(Name="Title", DbType="NVarChar(200)")] string title, [Parameter(Name="Fees", DbType="Decimal")] System.Nullable<decimal> fees, [Parameter(Name="FeesPeriodId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> feesPeriodId, [Parameter(Name="Active", DbType="Bit")] System.Nullable<bool> active, [Parameter(Name="Comments", DbType="NVarChar(500)")] string comments, [Parameter(Name="LastModifiedById", DbType="UniqueIdentifier")] System.Nullable<System.Guid> lastModifiedById, [Parameter(Name="Result", DbType="Int")] ref System.Nullable<int> result)
		{
			IExecuteResult result1 = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, schoolYearId, title, fees, feesPeriodId, active, comments, lastModifiedById, result);
			result = ((System.Nullable<int>)(result1.GetParameterValue(8)));
			return ((int)(result1.ReturnValue));
		}
		
		[Function(Name="dbo.spGetProgClassCategory")]
		public ISingleResult<spGetProgClassCategoryResult> spGetProgClassCategory([Parameter(Name="SchoolID", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolID);
			return ((ISingleResult<spGetProgClassCategoryResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetChildIdNotInChildSchoolYear")]
		public ISingleResult<spGetChildIdNotInChildSchoolYearResult> spGetChildIdNotInChildSchoolYear([Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolId, schoolYearId);
			return ((ISingleResult<spGetChildIdNotInChildSchoolYearResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spAddChildIdChildSchoolYear")]
		public int spAddChildIdChildSchoolYear([Parameter(Name="ChildDataId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> childDataId, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), childDataId, schoolYearId);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetChildAbsentHistory")]
		public ISingleResult<spGetChildAbsentHistoryResult> spGetChildAbsentHistory([Parameter(Name="ChildSchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> childSchoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), childSchoolYearId);
			return ((ISingleResult<spGetChildAbsentHistoryResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetSchoolProgramForSchedule")]
		public ISingleResult<spGetSchoolProgramForScheduleResult> spGetSchoolProgramForSchedule([Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolId, schoolYearId);
			return ((ISingleResult<spGetSchoolProgramForScheduleResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetChildEnrollmentStatus")]
		public ISingleResult<spGetChildEnrollmentStatusResult> spGetChildEnrollmentStatus([Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId, [Parameter(Name="ChildSchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> childSchoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolId, childSchoolYearId);
			return ((ISingleResult<spGetChildEnrollmentStatusResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetProgScheduleForChildSchedule")]
		public ISingleResult<spGetProgScheduleForChildScheduleResult> spGetProgScheduleForChildSchedule([Parameter(Name="SchoolProgramId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolProgramId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolProgramId);
			return ((ISingleResult<spGetProgScheduleForChildScheduleResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spCheckDuplicateChildEnrollmentStatus")]
		public ISingleResult<spCheckDuplicateChildEnrollmentStatusResult> spCheckDuplicateChildEnrollmentStatus([Parameter(Name="ChildSchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> childSchoolYearId, [Parameter(Name="EnrollmentStatusId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> enrollmentStatusId, [Parameter(Name="EnrollmentDate", DbType="DateTime")] System.Nullable<System.DateTime> enrollmentDate, [Parameter(Name="Id", DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), childSchoolYearId, enrollmentStatusId, enrollmentDate, id);
			return ((ISingleResult<spCheckDuplicateChildEnrollmentStatusResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spJSONGetClassRoomStaff")]
		public ISingleResult<spJSONGetClassRoomStaffResult> spJSONGetClassRoomStaff([Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolId, schoolYearId);
			return ((ISingleResult<spJSONGetClassRoomStaffResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetProgClassRoomIdAndClassRoomName")]
		public ISingleResult<spGetProgClassRoomIdAndClassRoomNameResult> spGetProgClassRoomIdAndClassRoomName([Parameter(Name="SchoolProgramId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolProgramId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolProgramId);
			return ((ISingleResult<spGetProgClassRoomIdAndClassRoomNameResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetCheckDuplicateProgClassRoomId")]
		public ISingleResult<spGetCheckDuplicateProgClassRoomIdResult> spGetCheckDuplicateProgClassRoomId([Parameter(Name="ClassRoomId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> classRoomId, [Parameter(Name="BeginTime", DbType="DateTime")] System.Nullable<System.DateTime> beginTime, [Parameter(Name="EndTime", DbType="DateTime")] System.Nullable<System.DateTime> endTime, [Parameter(Name="DayIndex", DbType="Int")] System.Nullable<int> dayIndex, [Parameter(Name="Id", DbType="UniqueIdentifier")] System.Nullable<System.Guid> id)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), classRoomId, beginTime, endTime, dayIndex, id);
			return ((ISingleResult<spGetCheckDuplicateProgClassRoomIdResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetCheckBeginTimeAndEndTimeInHoursOfOpration")]
		public ISingleResult<spGetCheckBeginTimeAndEndTimeInHoursOfOprationResult> spGetCheckBeginTimeAndEndTimeInHoursOfOpration([Parameter(Name="DayIndex", DbType="Int")] System.Nullable<int> dayIndex, [Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId, [Parameter(Name="BeginTime", DbType="DateTime")] System.Nullable<System.DateTime> beginTime, [Parameter(Name="EndTime", DbType="DateTime")] System.Nullable<System.DateTime> endTime)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dayIndex, schoolId, beginTime, endTime);
			return ((ISingleResult<spGetCheckBeginTimeAndEndTimeInHoursOfOprationResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spJSONChildListByClassRoomId")]
		public ISingleResult<spJSONChildListByClassRoomIdResult> spJSONChildListByClassRoomId([Parameter(Name="ClassRoomId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> classRoomId, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), classRoomId, schoolYearId);
			return ((ISingleResult<spJSONChildListByClassRoomIdResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetChildScheduleList")]
		public ISingleResult<spGetChildScheduleListResult> spGetChildScheduleList([Parameter(Name="ChildSchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> childSchoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), childSchoolYearId);
			return ((ISingleResult<spGetChildScheduleListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetChildScheduleById")]
		public ISingleResult<spGetChildScheduleByIdResult> spGetChildScheduleById([Parameter(Name="Id", DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(Name="ChildSchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> childSchoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, childSchoolYearId);
			return ((ISingleResult<spGetChildScheduleByIdResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetChildProgEnrollment")]
		public ISingleResult<spGetChildProgEnrollmentResult> spGetChildProgEnrollment([Parameter(Name="ChildSchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> childSchoolYearId, [Parameter(Name="SchoolProgramId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolProgramId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), childSchoolYearId, schoolProgramId);
			return ((ISingleResult<spGetChildProgEnrollmentResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetChildProgEnrollmentAll")]
		public ISingleResult<spGetChildProgEnrollmentAllResult> spGetChildProgEnrollmentAll([Parameter(Name="ChildSchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> childSchoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), childSchoolYearId);
			return ((ISingleResult<spGetChildProgEnrollmentAllResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spJSONGetListOfActiveChildren")]
		public ISingleResult<spJSONGetListOfActiveChildrenResult> spJSONGetListOfActiveChildren([Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolYearId);
			return ((ISingleResult<spJSONGetListOfActiveChildrenResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetSchoolProgram")]
		public ISingleResult<spGetSchoolProgramResult> spGetSchoolProgram([Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolId, schoolYearId);
			return ((ISingleResult<spGetSchoolProgramResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetSchoolProgramIdAndName")]
		public ISingleResult<spGetSchoolProgramIdAndNameResult> spGetSchoolProgramIdAndName()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<spGetSchoolProgramIdAndNameResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetAllChildDataList")]
		public ISingleResult<spGetAllChildDataListResult> spGetAllChildDataList([Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolId, schoolYearId);
			return ((ISingleResult<spGetAllChildDataListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetLedgerDetail")]
		public ISingleResult<spGetLedgerDetailResult> spGetLedgerDetail([Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId, [Parameter(Name="ChildFamilyId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> childFamilyId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolYearId, childFamilyId);
			return ((ISingleResult<spGetLedgerDetailResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetChildList")]
		public ISingleResult<spGetChildListResult> spGetChildList([Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolYearId);
			return ((ISingleResult<spGetChildListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spChildAttendanceHistoryList")]
		public ISingleResult<spChildAttendanceHistoryListResult> spChildAttendanceHistoryList([Parameter(Name="ChildSchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> childSchoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), childSchoolYearId);
			return ((ISingleResult<spChildAttendanceHistoryListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spStaffAttendanceHistoryList")]
		public ISingleResult<spStaffAttendanceHistoryListResult> spStaffAttendanceHistoryList([Parameter(Name="StaffSchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> staffSchoolYearId, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), staffSchoolYearId, schoolYearId);
			return ((ISingleResult<spStaffAttendanceHistoryListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetStaffList")]
		public ISingleResult<spGetStaffListResult> spGetStaffList([Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolYearId);
			return ((ISingleResult<spGetStaffListResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetChildFamily")]
		public ISingleResult<spGetChildFamilyResult> spGetChildFamily([Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolId, schoolYearId);
			return ((ISingleResult<spGetChildFamilyResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetSchoolProgramFeesDetail")]
		public ISingleResult<spGetSchoolProgramFeesDetailResult> spGetSchoolProgramFeesDetail([Parameter(Name="SchoolProgramId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolProgramId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolProgramId);
			return ((ISingleResult<spGetSchoolProgramFeesDetailResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetLateFeeofFamilies")]
		public ISingleResult<spGetLateFeeofFamiliesResult> spGetLateFeeofFamilies([Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId, [Parameter(Name="BalanceAmount", DbType="Decimal")] System.Nullable<decimal> balanceAmount)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolId, schoolYearId, balanceAmount);
			return ((ISingleResult<spGetLateFeeofFamiliesResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetFamilywiseChildName")]
		public ISingleResult<spGetFamilywiseChildNameResult> spGetFamilywiseChildName([Parameter(Name="ChildFamilyId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> childFamilyId, [Parameter(Name="ShcoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> shcoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), childFamilyId, shcoolYearId);
			return ((ISingleResult<spGetFamilywiseChildNameResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetFamiliesWithChild")]
		public ISingleResult<spGetFamiliesWithChildResult> spGetFamiliesWithChild([Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolId, schoolYearId);
			return ((ISingleResult<spGetFamiliesWithChildResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetLateFeeofFamiliesReport")]
		public ISingleResult<spGetLateFeeofFamiliesReportResult> spGetLateFeeofFamiliesReport([Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolId, schoolYearId);
			return ((ISingleResult<spGetLateFeeofFamiliesReportResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetLastYearClosingBalance")]
		public ISingleResult<spGetLastYearClosingBalanceResult> spGetLastYearClosingBalance([Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId, [Parameter(Name="ChildFamilyId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> childFamilyId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolYearId, childFamilyId);
			return ((ISingleResult<spGetLastYearClosingBalanceResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetIsPrimarySchoolProgram")]
		public ISingleResult<spGetIsPrimarySchoolProgramResult> spGetIsPrimarySchoolProgram([Parameter(Name="ChildSchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> childSchoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), childSchoolYearId);
			return ((ISingleResult<spGetIsPrimarySchoolProgramResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetChildFamilyById")]
		public ISingleResult<spGetChildFamilyByIdResult> spGetChildFamilyById([Parameter(Name="Id", DbType="UniqueIdentifier")] System.Nullable<System.Guid> id, [Parameter(Name="CurrentSchoolyearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> currentSchoolyearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), id, currentSchoolyearId);
			return ((ISingleResult<spGetChildFamilyByIdResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetChildFamilyForLEdgerOfFammily")]
		public ISingleResult<spGetChildFamilyForLEdgerOfFammilyResult> spGetChildFamilyForLEdgerOfFammily([Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolId, schoolYearId);
			return ((ISingleResult<spGetChildFamilyForLEdgerOfFammilyResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetAllActiveChildListForImport")]
		public ISingleResult<spGetAllActiveChildListForImportResult> spGetAllActiveChildListForImport([Parameter(Name="CurrentSchoolyearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> currentSchoolyearId, [Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), currentSchoolyearId, schoolId);
			return ((ISingleResult<spGetAllActiveChildListForImportResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetPreviousYearOfSelectedCurrentYear")]
		public ISingleResult<spGetPreviousYearOfSelectedCurrentYearResult> spGetPreviousYearOfSelectedCurrentYear([Parameter(Name="SchoolyearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolyearId, [Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolyearId, schoolId);
			return ((ISingleResult<spGetPreviousYearOfSelectedCurrentYearResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spGetAllChildListForImport")]
		public ISingleResult<spGetAllChildListForImportResult> spGetAllChildListForImport([Parameter(Name="CurrentSchoolyearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> currentSchoolyearId, [Parameter(Name="PreSchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> preSchoolYearId, [Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), currentSchoolyearId, preSchoolYearId, schoolId);
			return ((ISingleResult<spGetAllChildListForImportResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.spUpdateClosingBalance")]
		public ISingleResult<spUpdateClosingBalanceResult> spUpdateClosingBalance([Parameter(Name="SchoolId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolId, [Parameter(Name="SchoolYearId", DbType="UniqueIdentifier")] System.Nullable<System.Guid> schoolYearId, [Parameter(DbType="UniqueIdentifier")] System.Nullable<System.Guid> childfamilyid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), schoolId, schoolYearId, childfamilyid);
			return ((ISingleResult<spUpdateClosingBalanceResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.AbsentReason")]
	public partial class AbsentReason : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolId;
		
		private string _Reason;
		
		private bool _BillingAffected;
		
		private bool _Active;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntitySet<ChildAbsentHistory> _ChildAbsentHistories;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolIdChanging(System.Guid value);
    partial void OnSchoolIdChanged();
    partial void OnReasonChanging(string value);
    partial void OnReasonChanged();
    partial void OnBillingAffectedChanging(bool value);
    partial void OnBillingAffectedChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public AbsentReason()
		{
			this._ChildAbsentHistories = new EntitySet<ChildAbsentHistory>(new Action<ChildAbsentHistory>(this.attach_ChildAbsentHistories), new Action<ChildAbsentHistory>(this.detach_ChildAbsentHistories));
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[Column(Storage="_Reason", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Reason
		{
			get
			{
				return this._Reason;
			}
			set
			{
				if ((this._Reason != value))
				{
					this.OnReasonChanging(value);
					this.SendPropertyChanging();
					this._Reason = value;
					this.SendPropertyChanged("Reason");
					this.OnReasonChanged();
				}
			}
		}
		
		[Column(Storage="_BillingAffected", DbType="Bit NOT NULL")]
		public bool BillingAffected
		{
			get
			{
				return this._BillingAffected;
			}
			set
			{
				if ((this._BillingAffected != value))
				{
					this.OnBillingAffectedChanging(value);
					this.SendPropertyChanging();
					this._BillingAffected = value;
					this.SendPropertyChanged("BillingAffected");
					this.OnBillingAffectedChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="AbsentReason_ChildAbsentHistory", Storage="_ChildAbsentHistories", ThisKey="Id", OtherKey="AbsentReasonId")]
		public EntitySet<ChildAbsentHistory> ChildAbsentHistories
		{
			get
			{
				return this._ChildAbsentHistories;
			}
			set
			{
				this._ChildAbsentHistories.Assign(value);
			}
		}
		
		[Association(Name="School_AbsentReason", Storage="_School", ThisKey="SchoolId", OtherKey="Id", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.AbsentReasons.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.AbsentReasons.Add(this);
						this._SchoolId = value.Id;
					}
					else
					{
						this._SchoolId = default(System.Guid);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChildAbsentHistories(ChildAbsentHistory entity)
		{
			this.SendPropertyChanging();
			entity.AbsentReason = this;
		}
		
		private void detach_ChildAbsentHistories(ChildAbsentHistory entity)
		{
			this.SendPropertyChanging();
			entity.AbsentReason = null;
		}
	}
	
	[Table(Name="dbo.ChildAbsentHistory")]
	public partial class ChildAbsentHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.Guid _AbsentReasonId;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntityRef<AbsentReason> _AbsentReason;
		
		private EntityRef<ChildSchoolYear> _ChildSchoolYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnChildSchoolYearIdChanging(System.Guid value);
    partial void OnChildSchoolYearIdChanged();
    partial void OnAbsentReasonIdChanging(System.Guid value);
    partial void OnAbsentReasonIdChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public ChildAbsentHistory()
		{
			this._AbsentReason = default(EntityRef<AbsentReason>);
			this._ChildSchoolYear = default(EntityRef<ChildSchoolYear>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					if (this._ChildSchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._ChildSchoolYearId = value;
					this.SendPropertyChanged("ChildSchoolYearId");
					this.OnChildSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_AbsentReasonId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AbsentReasonId
		{
			get
			{
				return this._AbsentReasonId;
			}
			set
			{
				if ((this._AbsentReasonId != value))
				{
					if (this._AbsentReason.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAbsentReasonIdChanging(value);
					this.SendPropertyChanging();
					this._AbsentReasonId = value;
					this.SendPropertyChanged("AbsentReasonId");
					this.OnAbsentReasonIdChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="AbsentReason_ChildAbsentHistory", Storage="_AbsentReason", ThisKey="AbsentReasonId", OtherKey="Id", IsForeignKey=true)]
		public AbsentReason AbsentReason
		{
			get
			{
				return this._AbsentReason.Entity;
			}
			set
			{
				AbsentReason previousValue = this._AbsentReason.Entity;
				if (((previousValue != value) 
							|| (this._AbsentReason.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AbsentReason.Entity = null;
						previousValue.ChildAbsentHistories.Remove(this);
					}
					this._AbsentReason.Entity = value;
					if ((value != null))
					{
						value.ChildAbsentHistories.Add(this);
						this._AbsentReasonId = value.Id;
					}
					else
					{
						this._AbsentReasonId = default(System.Guid);
					}
					this.SendPropertyChanged("AbsentReason");
				}
			}
		}
		
		[Association(Name="ChildSchoolYear_ChildAbsentHistory", Storage="_ChildSchoolYear", ThisKey="ChildSchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public ChildSchoolYear ChildSchoolYear
		{
			get
			{
				return this._ChildSchoolYear.Entity;
			}
			set
			{
				ChildSchoolYear previousValue = this._ChildSchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._ChildSchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildSchoolYear.Entity = null;
						previousValue.ChildAbsentHistories.Remove(this);
					}
					this._ChildSchoolYear.Entity = value;
					if ((value != null))
					{
						value.ChildAbsentHistories.Add(this);
						this._ChildSchoolYearId = value.Id;
					}
					else
					{
						this._ChildSchoolYearId = default(System.Guid);
					}
					this.SendPropertyChanged("ChildSchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ChildAttendenceHistory")]
	public partial class ChildAttendenceHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.Nullable<bool> _CheckInCheckOut;
		
		private System.Nullable<System.DateTime> _CheckInCheckOutDateTime;
		
		private EntityRef<ChildSchoolYear> _ChildSchoolYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnChildSchoolYearIdChanging(System.Guid value);
    partial void OnChildSchoolYearIdChanged();
    partial void OnCheckInCheckOutChanging(System.Nullable<bool> value);
    partial void OnCheckInCheckOutChanged();
    partial void OnCheckInCheckOutDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCheckInCheckOutDateTimeChanged();
    #endregion
		
		public ChildAttendenceHistory()
		{
			this._ChildSchoolYear = default(EntityRef<ChildSchoolYear>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					if (this._ChildSchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._ChildSchoolYearId = value;
					this.SendPropertyChanged("ChildSchoolYearId");
					this.OnChildSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_CheckInCheckOut", DbType="Bit")]
		public System.Nullable<bool> CheckInCheckOut
		{
			get
			{
				return this._CheckInCheckOut;
			}
			set
			{
				if ((this._CheckInCheckOut != value))
				{
					this.OnCheckInCheckOutChanging(value);
					this.SendPropertyChanging();
					this._CheckInCheckOut = value;
					this.SendPropertyChanged("CheckInCheckOut");
					this.OnCheckInCheckOutChanged();
				}
			}
		}
		
		[Column(Storage="_CheckInCheckOutDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CheckInCheckOutDateTime
		{
			get
			{
				return this._CheckInCheckOutDateTime;
			}
			set
			{
				if ((this._CheckInCheckOutDateTime != value))
				{
					this.OnCheckInCheckOutDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CheckInCheckOutDateTime = value;
					this.SendPropertyChanged("CheckInCheckOutDateTime");
					this.OnCheckInCheckOutDateTimeChanged();
				}
			}
		}
		
		[Association(Name="ChildSchoolYear_ChildAttendenceHistory", Storage="_ChildSchoolYear", ThisKey="ChildSchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public ChildSchoolYear ChildSchoolYear
		{
			get
			{
				return this._ChildSchoolYear.Entity;
			}
			set
			{
				ChildSchoolYear previousValue = this._ChildSchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._ChildSchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildSchoolYear.Entity = null;
						previousValue.ChildAttendenceHistories.Remove(this);
					}
					this._ChildSchoolYear.Entity = value;
					if ((value != null))
					{
						value.ChildAttendenceHistories.Add(this);
						this._ChildSchoolYearId = value.Id;
					}
					else
					{
						this._ChildSchoolYearId = default(System.Guid);
					}
					this.SendPropertyChanged("ChildSchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ClassCategory")]
	public partial class ClassCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolId;
		
		private string _Name;
		
		private bool _Active;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntitySet<ProgClassCategory> _ProgClassCategories;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolIdChanging(System.Guid value);
    partial void OnSchoolIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public ClassCategory()
		{
			this._ProgClassCategories = new EntitySet<ProgClassCategory>(new Action<ProgClassCategory>(this.attach_ProgClassCategories), new Action<ProgClassCategory>(this.detach_ProgClassCategories));
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="ClassCategory_ProgClassCategory", Storage="_ProgClassCategories", ThisKey="Id", OtherKey="ClassCategoryId")]
		public EntitySet<ProgClassCategory> ProgClassCategories
		{
			get
			{
				return this._ProgClassCategories;
			}
			set
			{
				this._ProgClassCategories.Assign(value);
			}
		}
		
		[Association(Name="School_ClassCategory", Storage="_School", ThisKey="SchoolId", OtherKey="Id", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.ClassCategories.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.ClassCategories.Add(this);
						this._SchoolId = value.Id;
					}
					else
					{
						this._SchoolId = default(System.Guid);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProgClassCategories(ProgClassCategory entity)
		{
			this.SendPropertyChanging();
			entity.ClassCategory = this;
		}
		
		private void detach_ProgClassCategories(ProgClassCategory entity)
		{
			this.SendPropertyChanging();
			entity.ClassCategory = null;
		}
	}
	
	[Table(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Code;
		
		private EntitySet<FamilyData> _FamilyDatas;
		
		private EntitySet<School> _Schools;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public Country()
		{
			this._FamilyDatas = new EntitySet<FamilyData>(new Action<FamilyData>(this.attach_FamilyDatas), new Action<FamilyData>(this.detach_FamilyDatas));
			this._Schools = new EntitySet<School>(new Action<School>(this.attach_Schools), new Action<School>(this.detach_Schools));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Association(Name="Country_FamilyData", Storage="_FamilyDatas", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<FamilyData> FamilyDatas
		{
			get
			{
				return this._FamilyDatas;
			}
			set
			{
				this._FamilyDatas.Assign(value);
			}
		}
		
		[Association(Name="Country_School", Storage="_Schools", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<School> Schools
		{
			get
			{
				return this._Schools;
			}
			set
			{
				this._Schools.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FamilyDatas(FamilyData entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_FamilyDatas(FamilyData entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
		
		private void attach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[Table(Name="dbo.EnrollmentStatus")]
	public partial class EnrollmentStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolId;
		
		private string _Status;
		
		private bool _Active;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntitySet<ChildProgEnrollmentFeeDetail> _ChildProgEnrollmentFeeDetails;
		
		private EntitySet<ChildEnrollmentStatus> _ChildEnrollmentStatus;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolIdChanging(System.Guid value);
    partial void OnSchoolIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public EnrollmentStatus()
		{
			this._ChildProgEnrollmentFeeDetails = new EntitySet<ChildProgEnrollmentFeeDetail>(new Action<ChildProgEnrollmentFeeDetail>(this.attach_ChildProgEnrollmentFeeDetails), new Action<ChildProgEnrollmentFeeDetail>(this.detach_ChildProgEnrollmentFeeDetails));
			this._ChildEnrollmentStatus = new EntitySet<ChildEnrollmentStatus>(new Action<ChildEnrollmentStatus>(this.attach_ChildEnrollmentStatus), new Action<ChildEnrollmentStatus>(this.detach_ChildEnrollmentStatus));
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="EnrollmentStatus_ChildProgEnrollmentFeeDetail", Storage="_ChildProgEnrollmentFeeDetails", ThisKey="Id", OtherKey="EnrollmentStatusId")]
		public EntitySet<ChildProgEnrollmentFeeDetail> ChildProgEnrollmentFeeDetails
		{
			get
			{
				return this._ChildProgEnrollmentFeeDetails;
			}
			set
			{
				this._ChildProgEnrollmentFeeDetails.Assign(value);
			}
		}
		
		[Association(Name="EnrollmentStatus_ChildEnrollmentStatus", Storage="_ChildEnrollmentStatus", ThisKey="Id", OtherKey="EnrollmentStatusId")]
		public EntitySet<ChildEnrollmentStatus> ChildEnrollmentStatus
		{
			get
			{
				return this._ChildEnrollmentStatus;
			}
			set
			{
				this._ChildEnrollmentStatus.Assign(value);
			}
		}
		
		[Association(Name="School_EnrollmentStatus", Storage="_School", ThisKey="SchoolId", OtherKey="Id", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.EnrollmentStatus.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.EnrollmentStatus.Add(this);
						this._SchoolId = value.Id;
					}
					else
					{
						this._SchoolId = default(System.Guid);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChildProgEnrollmentFeeDetails(ChildProgEnrollmentFeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.EnrollmentStatus1 = this;
		}
		
		private void detach_ChildProgEnrollmentFeeDetails(ChildProgEnrollmentFeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.EnrollmentStatus1 = null;
		}
		
		private void attach_ChildEnrollmentStatus(ChildEnrollmentStatus entity)
		{
			this.SendPropertyChanging();
			entity.EnrollmentStatus = this;
		}
		
		private void detach_ChildEnrollmentStatus(ChildEnrollmentStatus entity)
		{
			this.SendPropertyChanging();
			entity.EnrollmentStatus = null;
		}
	}
	
	[Table(Name="dbo.Relationship")]
	public partial class Relationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolId;
		
		private string _Name;
		
		private bool _Active;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntitySet<FamilyData> _FamilyDatas;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolIdChanging(System.Guid value);
    partial void OnSchoolIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public Relationship()
		{
			this._FamilyDatas = new EntitySet<FamilyData>(new Action<FamilyData>(this.attach_FamilyDatas), new Action<FamilyData>(this.detach_FamilyDatas));
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="Relationship_FamilyData", Storage="_FamilyDatas", ThisKey="Id", OtherKey="RelationShipId")]
		public EntitySet<FamilyData> FamilyDatas
		{
			get
			{
				return this._FamilyDatas;
			}
			set
			{
				this._FamilyDatas.Assign(value);
			}
		}
		
		[Association(Name="School_Relationship", Storage="_School", ThisKey="SchoolId", OtherKey="Id", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.Relationships.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.Relationships.Add(this);
						this._SchoolId = value.Id;
					}
					else
					{
						this._SchoolId = default(System.Guid);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FamilyDatas(FamilyData entity)
		{
			this.SendPropertyChanging();
			entity.Relationship = this;
		}
		
		private void detach_FamilyDatas(FamilyData entity)
		{
			this.SendPropertyChanging();
			entity.Relationship = null;
		}
	}
	
	[Table(Name="dbo.StaffCategory")]
	public partial class StaffCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _SchoolId;
		
		private string _Name;
		
		private System.Nullable<bool> _Active;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolIdChanging(System.Nullable<System.Guid> value);
    partial void OnSchoolIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public StaffCategory()
		{
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="School_StaffCategory", Storage="_School", ThisKey="SchoolId", OtherKey="Id", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.StaffCategories.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.StaffCategories.Add(this);
						this._SchoolId = value.Id;
					}
					else
					{
						this._SchoolId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.State")]
	public partial class State : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Code;
		
		private System.Nullable<System.Guid> _CountryId;
		
		private EntitySet<FamilyData> _FamilyDatas;
		
		private EntitySet<ChildFamily> _ChildFamilies;
		
		private EntitySet<School> _Schools;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnCountryIdChanging(System.Nullable<System.Guid> value);
    partial void OnCountryIdChanged();
    #endregion
		
		public State()
		{
			this._FamilyDatas = new EntitySet<FamilyData>(new Action<FamilyData>(this.attach_FamilyDatas), new Action<FamilyData>(this.detach_FamilyDatas));
			this._ChildFamilies = new EntitySet<ChildFamily>(new Action<ChildFamily>(this.attach_ChildFamilies), new Action<ChildFamily>(this.detach_ChildFamilies));
			this._Schools = new EntitySet<School>(new Action<School>(this.attach_Schools), new Action<School>(this.detach_Schools));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(10)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CountryId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[Association(Name="State_FamilyData", Storage="_FamilyDatas", ThisKey="Id", OtherKey="StateId")]
		public EntitySet<FamilyData> FamilyDatas
		{
			get
			{
				return this._FamilyDatas;
			}
			set
			{
				this._FamilyDatas.Assign(value);
			}
		}
		
		[Association(Name="State_ChildFamily", Storage="_ChildFamilies", ThisKey="Id", OtherKey="StateId")]
		public EntitySet<ChildFamily> ChildFamilies
		{
			get
			{
				return this._ChildFamilies;
			}
			set
			{
				this._ChildFamilies.Assign(value);
			}
		}
		
		[Association(Name="State_School", Storage="_Schools", ThisKey="Id", OtherKey="StateId")]
		public EntitySet<School> Schools
		{
			get
			{
				return this._Schools;
			}
			set
			{
				this._Schools.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FamilyDatas(FamilyData entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_FamilyDatas(FamilyData entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_ChildFamilies(ChildFamily entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_ChildFamilies(ChildFamily entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
		
		private void attach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.State = this;
		}
		
		private void detach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.State = null;
		}
	}
	
	[Table(Name="dbo.TimeZone")]
	public partial class TimeZone : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _TimeZoneUniqueName;
		
		private string _TimeZone1;
		
		private string _StandardName;
		
		private string _DaylightName;
		
		private double _TimeZoneValue;
		
		private System.Nullable<bool> _SupportDaylightSavingTime;
		
		private string _Description;
		
		private System.Guid _CreatedByid;
		
		private System.DateTime _CreatedDateTime;
		
		private System.Guid _LastModifiedById;
		
		private System.DateTime _LastModifiedDateTime;
		
		private EntitySet<School> _Schools;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnTimeZoneUniqueNameChanging(string value);
    partial void OnTimeZoneUniqueNameChanged();
    partial void OnTimeZone1Changing(string value);
    partial void OnTimeZone1Changed();
    partial void OnStandardNameChanging(string value);
    partial void OnStandardNameChanged();
    partial void OnDaylightNameChanging(string value);
    partial void OnDaylightNameChanged();
    partial void OnTimeZoneValueChanging(double value);
    partial void OnTimeZoneValueChanged();
    partial void OnSupportDaylightSavingTimeChanging(System.Nullable<bool> value);
    partial void OnSupportDaylightSavingTimeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedByidChanging(System.Guid value);
    partial void OnCreatedByidChanged();
    partial void OnCreatedDateTimeChanging(System.DateTime value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedByIdChanging(System.Guid value);
    partial void OnLastModifiedByIdChanged();
    partial void OnLastModifiedDateTimeChanging(System.DateTime value);
    partial void OnLastModifiedDateTimeChanged();
    #endregion
		
		public TimeZone()
		{
			this._Schools = new EntitySet<School>(new Action<School>(this.attach_Schools), new Action<School>(this.detach_Schools));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_TimeZoneUniqueName", DbType="NVarChar(500)")]
		public string TimeZoneUniqueName
		{
			get
			{
				return this._TimeZoneUniqueName;
			}
			set
			{
				if ((this._TimeZoneUniqueName != value))
				{
					this.OnTimeZoneUniqueNameChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneUniqueName = value;
					this.SendPropertyChanged("TimeZoneUniqueName");
					this.OnTimeZoneUniqueNameChanged();
				}
			}
		}
		
		[Column(Name="TimeZone", Storage="_TimeZone1", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
		public string TimeZone1
		{
			get
			{
				return this._TimeZone1;
			}
			set
			{
				if ((this._TimeZone1 != value))
				{
					this.OnTimeZone1Changing(value);
					this.SendPropertyChanging();
					this._TimeZone1 = value;
					this.SendPropertyChanged("TimeZone1");
					this.OnTimeZone1Changed();
				}
			}
		}
		
		[Column(Storage="_StandardName", DbType="NVarChar(500)")]
		public string StandardName
		{
			get
			{
				return this._StandardName;
			}
			set
			{
				if ((this._StandardName != value))
				{
					this.OnStandardNameChanging(value);
					this.SendPropertyChanging();
					this._StandardName = value;
					this.SendPropertyChanged("StandardName");
					this.OnStandardNameChanged();
				}
			}
		}
		
		[Column(Storage="_DaylightName", DbType="NVarChar(500)")]
		public string DaylightName
		{
			get
			{
				return this._DaylightName;
			}
			set
			{
				if ((this._DaylightName != value))
				{
					this.OnDaylightNameChanging(value);
					this.SendPropertyChanging();
					this._DaylightName = value;
					this.SendPropertyChanged("DaylightName");
					this.OnDaylightNameChanged();
				}
			}
		}
		
		[Column(Storage="_TimeZoneValue", DbType="Float NOT NULL")]
		public double TimeZoneValue
		{
			get
			{
				return this._TimeZoneValue;
			}
			set
			{
				if ((this._TimeZoneValue != value))
				{
					this.OnTimeZoneValueChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneValue = value;
					this.SendPropertyChanged("TimeZoneValue");
					this.OnTimeZoneValueChanged();
				}
			}
		}
		
		[Column(Storage="_SupportDaylightSavingTime", DbType="Bit")]
		public System.Nullable<bool> SupportDaylightSavingTime
		{
			get
			{
				return this._SupportDaylightSavingTime;
			}
			set
			{
				if ((this._SupportDaylightSavingTime != value))
				{
					this.OnSupportDaylightSavingTimeChanging(value);
					this.SendPropertyChanging();
					this._SupportDaylightSavingTime = value;
					this.SendPropertyChanged("SupportDaylightSavingTime");
					this.OnSupportDaylightSavingTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedByid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedByid
		{
			get
			{
				return this._CreatedByid;
			}
			set
			{
				if ((this._CreatedByid != value))
				{
					this.OnCreatedByidChanging(value);
					this.SendPropertyChanging();
					this._CreatedByid = value;
					this.SendPropertyChanged("CreatedByid");
					this.OnCreatedByidChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastModifiedDateTime
		{
			get
			{
				return this._LastModifiedDateTime;
			}
			set
			{
				if ((this._LastModifiedDateTime != value))
				{
					this.OnLastModifiedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDateTime = value;
					this.SendPropertyChanged("LastModifiedDateTime");
					this.OnLastModifiedDateTimeChanged();
				}
			}
		}
		
		[Association(Name="TimeZone_School", Storage="_Schools", ThisKey="Id", OtherKey="TimeZoneId")]
		public EntitySet<School> Schools
		{
			get
			{
				return this._Schools;
			}
			set
			{
				this._Schools.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.TimeZone = this;
		}
		
		private void detach_Schools(School entity)
		{
			this.SendPropertyChanging();
			entity.TimeZone = null;
		}
	}
	
	[Table(Name="dbo.ChargeCode")]
	public partial class ChargeCode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Category;
		
		private bool _DebitCrdit;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntitySet<Ledger> _Ledgers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    partial void OnDebitCrditChanging(bool value);
    partial void OnDebitCrditChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public ChargeCode()
		{
			this._Ledgers = new EntitySet<Ledger>(new Action<Ledger>(this.attach_Ledgers), new Action<Ledger>(this.detach_Ledgers));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Category", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[Column(Storage="_DebitCrdit", DbType="Bit NOT NULL")]
		public bool DebitCrdit
		{
			get
			{
				return this._DebitCrdit;
			}
			set
			{
				if ((this._DebitCrdit != value))
				{
					this.OnDebitCrditChanging(value);
					this.SendPropertyChanging();
					this._DebitCrdit = value;
					this.SendPropertyChanged("DebitCrdit");
					this.OnDebitCrditChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="ChargeCode_Ledger", Storage="_Ledgers", ThisKey="Id", OtherKey="ChargeCodeCategoryId")]
		public EntitySet<Ledger> Ledgers
		{
			get
			{
				return this._Ledgers;
			}
			set
			{
				this._Ledgers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ledgers(Ledger entity)
		{
			this.SendPropertyChanging();
			entity.ChargeCode = this;
		}
		
		private void detach_Ledgers(Ledger entity)
		{
			this.SendPropertyChanging();
			entity.ChargeCode = null;
		}
	}
	
	[Table(Name="dbo.FeesPeriod")]
	public partial class FeesPeriod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntitySet<SchoolProgramFeesDetail> _SchoolProgramFeesDetails;
		
		private EntitySet<ChildProgEnrollmentFeeDetail> _ChildProgEnrollmentFeeDetails;
		
		private EntitySet<ChildProgEnrollment> _ChildProgEnrollments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public FeesPeriod()
		{
			this._SchoolProgramFeesDetails = new EntitySet<SchoolProgramFeesDetail>(new Action<SchoolProgramFeesDetail>(this.attach_SchoolProgramFeesDetails), new Action<SchoolProgramFeesDetail>(this.detach_SchoolProgramFeesDetails));
			this._ChildProgEnrollmentFeeDetails = new EntitySet<ChildProgEnrollmentFeeDetail>(new Action<ChildProgEnrollmentFeeDetail>(this.attach_ChildProgEnrollmentFeeDetails), new Action<ChildProgEnrollmentFeeDetail>(this.detach_ChildProgEnrollmentFeeDetails));
			this._ChildProgEnrollments = new EntitySet<ChildProgEnrollment>(new Action<ChildProgEnrollment>(this.attach_ChildProgEnrollments), new Action<ChildProgEnrollment>(this.detach_ChildProgEnrollments));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="FeesPeriod_SchoolProgramFeesDetail", Storage="_SchoolProgramFeesDetails", ThisKey="Id", OtherKey="FeesPeriodId")]
		public EntitySet<SchoolProgramFeesDetail> SchoolProgramFeesDetails
		{
			get
			{
				return this._SchoolProgramFeesDetails;
			}
			set
			{
				this._SchoolProgramFeesDetails.Assign(value);
			}
		}
		
		[Association(Name="FeesPeriod_ChildProgEnrollmentFeeDetail", Storage="_ChildProgEnrollmentFeeDetails", ThisKey="Id", OtherKey="FeesPeriodId")]
		public EntitySet<ChildProgEnrollmentFeeDetail> ChildProgEnrollmentFeeDetails
		{
			get
			{
				return this._ChildProgEnrollmentFeeDetails;
			}
			set
			{
				this._ChildProgEnrollmentFeeDetails.Assign(value);
			}
		}
		
		[Association(Name="FeesPeriod_ChildProgEnrollment", Storage="_ChildProgEnrollments", ThisKey="Id", OtherKey="FeesPeriodId")]
		public EntitySet<ChildProgEnrollment> ChildProgEnrollments
		{
			get
			{
				return this._ChildProgEnrollments;
			}
			set
			{
				this._ChildProgEnrollments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SchoolProgramFeesDetails(SchoolProgramFeesDetail entity)
		{
			this.SendPropertyChanging();
			entity.FeesPeriod = this;
		}
		
		private void detach_SchoolProgramFeesDetails(SchoolProgramFeesDetail entity)
		{
			this.SendPropertyChanging();
			entity.FeesPeriod = null;
		}
		
		private void attach_ChildProgEnrollmentFeeDetails(ChildProgEnrollmentFeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.FeesPeriod = this;
		}
		
		private void detach_ChildProgEnrollmentFeeDetails(ChildProgEnrollmentFeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.FeesPeriod = null;
		}
		
		private void attach_ChildProgEnrollments(ChildProgEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.FeesPeriod = this;
		}
		
		private void detach_ChildProgEnrollments(ChildProgEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.FeesPeriod = null;
		}
	}
	
	[Table(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private bool _Active;
		
		private EntitySet<UserGroup> _UserGroups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Role()
		{
			this._UserGroups = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroups), new Action<UserGroup>(this.detach_UserGroups));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Association(Name="Role_UserGroup", Storage="_UserGroups", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<UserGroup> UserGroups
		{
			get
			{
				return this._UserGroups;
			}
			set
			{
				this._UserGroups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
	
	[Table(Name="dbo.ProgClassCategory")]
	public partial class ProgClassCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolProgramId;
		
		private System.Guid _ClassCategoryId;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntityRef<ClassCategory> _ClassCategory;
		
		private EntityRef<SchoolProgram> _SchoolProgram;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolProgramIdChanging(System.Guid value);
    partial void OnSchoolProgramIdChanged();
    partial void OnClassCategoryIdChanging(System.Guid value);
    partial void OnClassCategoryIdChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public ProgClassCategory()
		{
			this._ClassCategory = default(EntityRef<ClassCategory>);
			this._SchoolProgram = default(EntityRef<SchoolProgram>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					if (this._SchoolProgram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolProgramIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolProgramId = value;
					this.SendPropertyChanged("SchoolProgramId");
					this.OnSchoolProgramIdChanged();
				}
			}
		}
		
		[Column(Storage="_ClassCategoryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ClassCategoryId
		{
			get
			{
				return this._ClassCategoryId;
			}
			set
			{
				if ((this._ClassCategoryId != value))
				{
					if (this._ClassCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ClassCategoryId = value;
					this.SendPropertyChanged("ClassCategoryId");
					this.OnClassCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="ClassCategory_ProgClassCategory", Storage="_ClassCategory", ThisKey="ClassCategoryId", OtherKey="Id", IsForeignKey=true)]
		public ClassCategory ClassCategory
		{
			get
			{
				return this._ClassCategory.Entity;
			}
			set
			{
				ClassCategory previousValue = this._ClassCategory.Entity;
				if (((previousValue != value) 
							|| (this._ClassCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClassCategory.Entity = null;
						previousValue.ProgClassCategories.Remove(this);
					}
					this._ClassCategory.Entity = value;
					if ((value != null))
					{
						value.ProgClassCategories.Add(this);
						this._ClassCategoryId = value.Id;
					}
					else
					{
						this._ClassCategoryId = default(System.Guid);
					}
					this.SendPropertyChanged("ClassCategory");
				}
			}
		}
		
		[Association(Name="SchoolProgram_ProgClassCategory", Storage="_SchoolProgram", ThisKey="SchoolProgramId", OtherKey="Id", IsForeignKey=true)]
		public SchoolProgram SchoolProgram
		{
			get
			{
				return this._SchoolProgram.Entity;
			}
			set
			{
				SchoolProgram previousValue = this._SchoolProgram.Entity;
				if (((previousValue != value) 
							|| (this._SchoolProgram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolProgram.Entity = null;
						previousValue.ProgClassCategories.Remove(this);
					}
					this._SchoolProgram.Entity = value;
					if ((value != null))
					{
						value.ProgClassCategories.Add(this);
						this._SchoolProgramId = value.Id;
					}
					else
					{
						this._SchoolProgramId = default(System.Guid);
					}
					this.SendPropertyChanged("SchoolProgram");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProgStaff")]
	public partial class ProgStaff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolProgramId;
		
		private System.Guid _StaffId;
		
		private bool _Active;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntityRef<SchoolProgram> _SchoolProgram;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolProgramIdChanging(System.Guid value);
    partial void OnSchoolProgramIdChanged();
    partial void OnStaffIdChanging(System.Guid value);
    partial void OnStaffIdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public ProgStaff()
		{
			this._SchoolProgram = default(EntityRef<SchoolProgram>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					if (this._SchoolProgram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolProgramIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolProgramId = value;
					this.SendPropertyChanged("SchoolProgramId");
					this.OnSchoolProgramIdChanged();
				}
			}
		}
		
		[Column(Storage="_StaffId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="SchoolProgram_ProgStaff", Storage="_SchoolProgram", ThisKey="SchoolProgramId", OtherKey="Id", IsForeignKey=true)]
		public SchoolProgram SchoolProgram
		{
			get
			{
				return this._SchoolProgram.Entity;
			}
			set
			{
				SchoolProgram previousValue = this._SchoolProgram.Entity;
				if (((previousValue != value) 
							|| (this._SchoolProgram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolProgram.Entity = null;
						previousValue.ProgStaffs.Remove(this);
					}
					this._SchoolProgram.Entity = value;
					if ((value != null))
					{
						value.ProgStaffs.Add(this);
						this._SchoolProgramId = value.Id;
					}
					else
					{
						this._SchoolProgramId = default(System.Guid);
					}
					this.SendPropertyChanged("SchoolProgram");
				}
			}
		}
		
		[Association(Name="Staff_ProgStaff", Storage="_Staff", ThisKey="StaffId", OtherKey="Id", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.ProgStaffs.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.ProgStaffs.Add(this);
						this._StaffId = value.Id;
					}
					else
					{
						this._StaffId = default(System.Guid);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserGroup")]
	public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolId;
		
		private string _GroupTitle;
		
		private System.Guid _RoleId;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntityRef<Role> _Role;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolIdChanging(System.Guid value);
    partial void OnSchoolIdChanged();
    partial void OnGroupTitleChanging(string value);
    partial void OnGroupTitleChanged();
    partial void OnRoleIdChanging(System.Guid value);
    partial void OnRoleIdChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public UserGroup()
		{
			this._Role = default(EntityRef<Role>);
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[Column(Storage="_GroupTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string GroupTitle
		{
			get
			{
				return this._GroupTitle;
			}
			set
			{
				if ((this._GroupTitle != value))
				{
					this.OnGroupTitleChanging(value);
					this.SendPropertyChanging();
					this._GroupTitle = value;
					this.SendPropertyChanged("GroupTitle");
					this.OnGroupTitleChanged();
				}
			}
		}
		
		[Column(Storage="_RoleId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="Role_UserGroup", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.UserGroups.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.UserGroups.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(System.Guid);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		[Association(Name="School_UserGroup", Storage="_School", ThisKey="SchoolId", OtherKey="Id", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.UserGroups.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.UserGroups.Add(this);
						this._SchoolId = value.Id;
					}
					else
					{
						this._SchoolId = default(System.Guid);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Font")]
	public partial class Font : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Color;
		
		private int _Size;
		
		private bool _Active;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnColorChanging(string value);
    partial void OnColorChanged();
    partial void OnSizeChanging(int value);
    partial void OnSizeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public Font()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Color", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Color
		{
			get
			{
				return this._Color;
			}
			set
			{
				if ((this._Color != value))
				{
					this.OnColorChanging(value);
					this.SendPropertyChanging();
					this._Color = value;
					this.SendPropertyChanged("Color");
					this.OnColorChanged();
				}
			}
		}
		
		[Column(Storage="_Size", DbType="Int NOT NULL")]
		public int Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ClassRoom")]
	public partial class ClassRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolId;
		
		private string _Name;
		
		private int _MaxSize;
		
		private bool _Active;
		
		private System.Nullable<System.Guid> _StaffId;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntitySet<ProgClassRoom> _ProgClassRooms;
		
		private EntitySet<ClassRoomSchoolYear> _ClassRoomSchoolYears;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolIdChanging(System.Guid value);
    partial void OnSchoolIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnMaxSizeChanging(int value);
    partial void OnMaxSizeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnStaffIdChanging(System.Nullable<System.Guid> value);
    partial void OnStaffIdChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public ClassRoom()
		{
			this._ProgClassRooms = new EntitySet<ProgClassRoom>(new Action<ProgClassRoom>(this.attach_ProgClassRooms), new Action<ProgClassRoom>(this.detach_ProgClassRooms));
			this._ClassRoomSchoolYears = new EntitySet<ClassRoomSchoolYear>(new Action<ClassRoomSchoolYear>(this.attach_ClassRoomSchoolYears), new Action<ClassRoomSchoolYear>(this.detach_ClassRoomSchoolYears));
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_MaxSize", DbType="Int NOT NULL")]
		public int MaxSize
		{
			get
			{
				return this._MaxSize;
			}
			set
			{
				if ((this._MaxSize != value))
				{
					this.OnMaxSizeChanging(value);
					this.SendPropertyChanging();
					this._MaxSize = value;
					this.SendPropertyChanged("MaxSize");
					this.OnMaxSizeChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_StaffId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="ClassRoom_ProgClassRoom", Storage="_ProgClassRooms", ThisKey="Id", OtherKey="ClassRoomId")]
		public EntitySet<ProgClassRoom> ProgClassRooms
		{
			get
			{
				return this._ProgClassRooms;
			}
			set
			{
				this._ProgClassRooms.Assign(value);
			}
		}
		
		[Association(Name="ClassRoom_ClassRoomSchoolYear", Storage="_ClassRoomSchoolYears", ThisKey="Id", OtherKey="ClassRoomId")]
		public EntitySet<ClassRoomSchoolYear> ClassRoomSchoolYears
		{
			get
			{
				return this._ClassRoomSchoolYears;
			}
			set
			{
				this._ClassRoomSchoolYears.Assign(value);
			}
		}
		
		[Association(Name="School_ClassRoom", Storage="_School", ThisKey="SchoolId", OtherKey="Id", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.ClassRooms.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.ClassRooms.Add(this);
						this._SchoolId = value.Id;
					}
					else
					{
						this._SchoolId = default(System.Guid);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProgClassRooms(ProgClassRoom entity)
		{
			this.SendPropertyChanging();
			entity.ClassRoom = this;
		}
		
		private void detach_ProgClassRooms(ProgClassRoom entity)
		{
			this.SendPropertyChanging();
			entity.ClassRoom = null;
		}
		
		private void attach_ClassRoomSchoolYears(ClassRoomSchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.ClassRoom = this;
		}
		
		private void detach_ClassRoomSchoolYears(ClassRoomSchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.ClassRoom = null;
		}
	}
	
	[Table(Name="dbo.StaffAttendenceHistory")]
	public partial class StaffAttendenceHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _StaffSchoolYearId;
		
		private bool _CheckInCheckOut;
		
		private System.DateTime _CheckInCheckOutDateTime;
		
		private System.DateTime _CreatedDateTime;
		
		private EntityRef<StaffSchoolYear> _StaffSchoolYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnStaffSchoolYearIdChanging(System.Guid value);
    partial void OnStaffSchoolYearIdChanged();
    partial void OnCheckInCheckOutChanging(bool value);
    partial void OnCheckInCheckOutChanged();
    partial void OnCheckInCheckOutDateTimeChanging(System.DateTime value);
    partial void OnCheckInCheckOutDateTimeChanged();
    partial void OnCreatedDateTimeChanging(System.DateTime value);
    partial void OnCreatedDateTimeChanged();
    #endregion
		
		public StaffAttendenceHistory()
		{
			this._StaffSchoolYear = default(EntityRef<StaffSchoolYear>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_StaffSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StaffSchoolYearId
		{
			get
			{
				return this._StaffSchoolYearId;
			}
			set
			{
				if ((this._StaffSchoolYearId != value))
				{
					if (this._StaffSchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._StaffSchoolYearId = value;
					this.SendPropertyChanged("StaffSchoolYearId");
					this.OnStaffSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_CheckInCheckOut", DbType="Bit NOT NULL")]
		public bool CheckInCheckOut
		{
			get
			{
				return this._CheckInCheckOut;
			}
			set
			{
				if ((this._CheckInCheckOut != value))
				{
					this.OnCheckInCheckOutChanging(value);
					this.SendPropertyChanging();
					this._CheckInCheckOut = value;
					this.SendPropertyChanged("CheckInCheckOut");
					this.OnCheckInCheckOutChanged();
				}
			}
		}
		
		[Column(Storage="_CheckInCheckOutDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CheckInCheckOutDateTime
		{
			get
			{
				return this._CheckInCheckOutDateTime;
			}
			set
			{
				if ((this._CheckInCheckOutDateTime != value))
				{
					this.OnCheckInCheckOutDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CheckInCheckOutDateTime = value;
					this.SendPropertyChanged("CheckInCheckOutDateTime");
					this.OnCheckInCheckOutDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Association(Name="StaffSchoolYear_StaffAttendenceHistory", Storage="_StaffSchoolYear", ThisKey="StaffSchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public StaffSchoolYear StaffSchoolYear
		{
			get
			{
				return this._StaffSchoolYear.Entity;
			}
			set
			{
				StaffSchoolYear previousValue = this._StaffSchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._StaffSchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffSchoolYear.Entity = null;
						previousValue.StaffAttendenceHistories.Remove(this);
					}
					this._StaffSchoolYear.Entity = value;
					if ((value != null))
					{
						value.StaffAttendenceHistories.Add(this);
						this._StaffSchoolYearId = value.Id;
					}
					else
					{
						this._StaffSchoolYearId = default(System.Guid);
					}
					this.SendPropertyChanged("StaffSchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.HoursOfOperation")]
	public partial class HoursOfOperation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolId;
		
		private string _Day;
		
		private System.DateTime _OpenTime;
		
		private System.DateTime _CloseTime;
		
		private string _Comments;
		
		private System.Nullable<int> _DayIndex;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolIdChanging(System.Guid value);
    partial void OnSchoolIdChanged();
    partial void OnDayChanging(string value);
    partial void OnDayChanged();
    partial void OnOpenTimeChanging(System.DateTime value);
    partial void OnOpenTimeChanged();
    partial void OnCloseTimeChanging(System.DateTime value);
    partial void OnCloseTimeChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnDayIndexChanging(System.Nullable<int> value);
    partial void OnDayIndexChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public HoursOfOperation()
		{
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[Column(Storage="_Day", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[Column(Storage="_OpenTime", DbType="DateTime NOT NULL")]
		public System.DateTime OpenTime
		{
			get
			{
				return this._OpenTime;
			}
			set
			{
				if ((this._OpenTime != value))
				{
					this.OnOpenTimeChanging(value);
					this.SendPropertyChanging();
					this._OpenTime = value;
					this.SendPropertyChanged("OpenTime");
					this.OnOpenTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CloseTime", DbType="DateTime NOT NULL")]
		public System.DateTime CloseTime
		{
			get
			{
				return this._CloseTime;
			}
			set
			{
				if ((this._CloseTime != value))
				{
					this.OnCloseTimeChanging(value);
					this.SendPropertyChanging();
					this._CloseTime = value;
					this.SendPropertyChanged("CloseTime");
					this.OnCloseTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_DayIndex", DbType="Int")]
		public System.Nullable<int> DayIndex
		{
			get
			{
				return this._DayIndex;
			}
			set
			{
				if ((this._DayIndex != value))
				{
					this.OnDayIndexChanging(value);
					this.SendPropertyChanging();
					this._DayIndex = value;
					this.SendPropertyChanged("DayIndex");
					this.OnDayIndexChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="School_HoursOfOperation", Storage="_School", ThisKey="SchoolId", OtherKey="Id", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.HoursOfOperations.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.HoursOfOperations.Add(this);
						this._SchoolId = value.Id;
					}
					else
					{
						this._SchoolId = default(System.Guid);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProgSchedule")]
	public partial class ProgSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolProgramId;
		
		private string _Day;
		
		private System.DateTime _BeginTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private bool _Active;
		
		private System.Nullable<int> _DayIndex;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntitySet<ChildSchedule> _ChildSchedules;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolProgramIdChanging(System.Guid value);
    partial void OnSchoolProgramIdChanged();
    partial void OnDayChanging(string value);
    partial void OnDayChanged();
    partial void OnBeginTimeChanging(System.DateTime value);
    partial void OnBeginTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnDayIndexChanging(System.Nullable<int> value);
    partial void OnDayIndexChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public ProgSchedule()
		{
			this._ChildSchedules = new EntitySet<ChildSchedule>(new Action<ChildSchedule>(this.attach_ChildSchedules), new Action<ChildSchedule>(this.detach_ChildSchedules));
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					this.OnSchoolProgramIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolProgramId = value;
					this.SendPropertyChanged("SchoolProgramId");
					this.OnSchoolProgramIdChanged();
				}
			}
		}
		
		[Column(Storage="_Day", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this.OnDayChanging(value);
					this.SendPropertyChanging();
					this._Day = value;
					this.SendPropertyChanged("Day");
					this.OnDayChanged();
				}
			}
		}
		
		[Column(Storage="_BeginTime", DbType="DateTime NOT NULL")]
		public System.DateTime BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this.OnBeginTimeChanging(value);
					this.SendPropertyChanging();
					this._BeginTime = value;
					this.SendPropertyChanged("BeginTime");
					this.OnBeginTimeChanged();
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_DayIndex", DbType="Int")]
		public System.Nullable<int> DayIndex
		{
			get
			{
				return this._DayIndex;
			}
			set
			{
				if ((this._DayIndex != value))
				{
					this.OnDayIndexChanging(value);
					this.SendPropertyChanging();
					this._DayIndex = value;
					this.SendPropertyChanged("DayIndex");
					this.OnDayIndexChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="ProgSchedule_ChildSchedule", Storage="_ChildSchedules", ThisKey="Id", OtherKey="ProgScheduleId")]
		public EntitySet<ChildSchedule> ChildSchedules
		{
			get
			{
				return this._ChildSchedules;
			}
			set
			{
				this._ChildSchedules.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChildSchedules(ChildSchedule entity)
		{
			this.SendPropertyChanging();
			entity.ProgSchedule = this;
		}
		
		private void detach_ChildSchedules(ChildSchedule entity)
		{
			this.SendPropertyChanging();
			entity.ProgSchedule = null;
		}
	}
	
	[Table(Name="dbo.FamilyData")]
	public partial class FamilyData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _RelationShipId;
		
		private System.Guid _ChildFamilyId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private bool _Gender;
		
		private string _IdInfo;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private string _Zip;
		
		private System.Nullable<System.Guid> _StateId;
		
		private System.Nullable<System.Guid> _CountryId;
		
		private string _MainPhone;
		
		private string _SecondaryPhone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Photo;
		
		private string _SecurityQuestion;
		
		private string _SecurityAnswer;
		
		private string _Code;
		
		private bool _Active;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<Relationship> _Relationship;
		
		private EntityRef<State> _State;
		
		private EntityRef<ChildFamily> _ChildFamily;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnRelationShipIdChanging(System.Guid value);
    partial void OnRelationShipIdChanged();
    partial void OnChildFamilyIdChanging(System.Guid value);
    partial void OnChildFamilyIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGenderChanging(bool value);
    partial void OnGenderChanged();
    partial void OnIdInfoChanging(string value);
    partial void OnIdInfoChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnStateIdChanging(System.Nullable<System.Guid> value);
    partial void OnStateIdChanged();
    partial void OnCountryIdChanging(System.Nullable<System.Guid> value);
    partial void OnCountryIdChanged();
    partial void OnMainPhoneChanging(string value);
    partial void OnMainPhoneChanged();
    partial void OnSecondaryPhoneChanging(string value);
    partial void OnSecondaryPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnSecurityQuestionChanging(string value);
    partial void OnSecurityQuestionChanged();
    partial void OnSecurityAnswerChanging(string value);
    partial void OnSecurityAnswerChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public FamilyData()
		{
			this._Country = default(EntityRef<Country>);
			this._Relationship = default(EntityRef<Relationship>);
			this._State = default(EntityRef<State>);
			this._ChildFamily = default(EntityRef<ChildFamily>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_RelationShipId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid RelationShipId
		{
			get
			{
				return this._RelationShipId;
			}
			set
			{
				if ((this._RelationShipId != value))
				{
					if (this._Relationship.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRelationShipIdChanging(value);
					this.SendPropertyChanging();
					this._RelationShipId = value;
					this.SendPropertyChanged("RelationShipId");
					this.OnRelationShipIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildFamilyId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildFamilyId
		{
			get
			{
				return this._ChildFamilyId;
			}
			set
			{
				if ((this._ChildFamilyId != value))
				{
					if (this._ChildFamily.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildFamilyIdChanging(value);
					this.SendPropertyChanging();
					this._ChildFamilyId = value;
					this.SendPropertyChanged("ChildFamilyId");
					this.OnChildFamilyIdChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="Bit NOT NULL")]
		public bool Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[Column(Storage="_IdInfo", DbType="NVarChar(50)")]
		public string IdInfo
		{
			get
			{
				return this._IdInfo;
			}
			set
			{
				if ((this._IdInfo != value))
				{
					this.OnIdInfoChanging(value);
					this.SendPropertyChanging();
					this._IdInfo = value;
					this.SendPropertyChanged("IdInfo");
					this.OnIdInfoChanged();
				}
			}
		}
		
		[Column(Storage="_Address1", DbType="NVarChar(200)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[Column(Storage="_Address2", DbType="NVarChar(200)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="NVarChar(10)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Column(Storage="_StateId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[Column(Storage="_CountryId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[Column(Storage="_MainPhone", DbType="NVarChar(20)")]
		public string MainPhone
		{
			get
			{
				return this._MainPhone;
			}
			set
			{
				if ((this._MainPhone != value))
				{
					this.OnMainPhoneChanging(value);
					this.SendPropertyChanging();
					this._MainPhone = value;
					this.SendPropertyChanged("MainPhone");
					this.OnMainPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_SecondaryPhone", DbType="NVarChar(20)")]
		public string SecondaryPhone
		{
			get
			{
				return this._SecondaryPhone;
			}
			set
			{
				if ((this._SecondaryPhone != value))
				{
					this.OnSecondaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._SecondaryPhone = value;
					this.SendPropertyChanged("SecondaryPhone");
					this.OnSecondaryPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(15)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="NVarChar(200)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityQuestion", DbType="NVarChar(200)")]
		public string SecurityQuestion
		{
			get
			{
				return this._SecurityQuestion;
			}
			set
			{
				if ((this._SecurityQuestion != value))
				{
					this.OnSecurityQuestionChanging(value);
					this.SendPropertyChanging();
					this._SecurityQuestion = value;
					this.SendPropertyChanged("SecurityQuestion");
					this.OnSecurityQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityAnswer", DbType="NVarChar(200)")]
		public string SecurityAnswer
		{
			get
			{
				return this._SecurityAnswer;
			}
			set
			{
				if ((this._SecurityAnswer != value))
				{
					this.OnSecurityAnswerChanging(value);
					this.SendPropertyChanging();
					this._SecurityAnswer = value;
					this.SendPropertyChanged("SecurityAnswer");
					this.OnSecurityAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="Country_FamilyData", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.FamilyDatas.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.FamilyDatas.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="Relationship_FamilyData", Storage="_Relationship", ThisKey="RelationShipId", OtherKey="Id", IsForeignKey=true)]
		public Relationship Relationship
		{
			get
			{
				return this._Relationship.Entity;
			}
			set
			{
				Relationship previousValue = this._Relationship.Entity;
				if (((previousValue != value) 
							|| (this._Relationship.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Relationship.Entity = null;
						previousValue.FamilyDatas.Remove(this);
					}
					this._Relationship.Entity = value;
					if ((value != null))
					{
						value.FamilyDatas.Add(this);
						this._RelationShipId = value.Id;
					}
					else
					{
						this._RelationShipId = default(System.Guid);
					}
					this.SendPropertyChanged("Relationship");
				}
			}
		}
		
		[Association(Name="State_FamilyData", Storage="_State", ThisKey="StateId", OtherKey="Id", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.FamilyDatas.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.FamilyDatas.Add(this);
						this._StateId = value.Id;
					}
					else
					{
						this._StateId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		[Association(Name="ChildFamily_FamilyData", Storage="_ChildFamily", ThisKey="ChildFamilyId", OtherKey="Id", IsForeignKey=true)]
		public ChildFamily ChildFamily
		{
			get
			{
				return this._ChildFamily.Entity;
			}
			set
			{
				ChildFamily previousValue = this._ChildFamily.Entity;
				if (((previousValue != value) 
							|| (this._ChildFamily.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildFamily.Entity = null;
						previousValue.FamilyDatas.Remove(this);
					}
					this._ChildFamily.Entity = value;
					if ((value != null))
					{
						value.FamilyDatas.Add(this);
						this._ChildFamilyId = value.Id;
					}
					else
					{
						this._ChildFamilyId = default(System.Guid);
					}
					this.SendPropertyChanged("ChildFamily");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EmploymentStatus")]
	public partial class EmploymentStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolId;
		
		private string _Status;
		
		private bool _Active;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntitySet<Staff> _Staffs;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolIdChanging(System.Guid value);
    partial void OnSchoolIdChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public EmploymentStatus()
		{
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="EmploymentStatus_Staff", Storage="_Staffs", ThisKey="Id", OtherKey="EmploymentStatusId")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		[Association(Name="School_EmploymentStatus", Storage="_School", ThisKey="SchoolId", OtherKey="Id", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.EmploymentStatus.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.EmploymentStatus.Add(this);
						this._SchoolId = value.Id;
					}
					else
					{
						this._SchoolId = default(System.Guid);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.EmploymentStatus = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.EmploymentStatus = null;
		}
	}
	
	[Table(Name="dbo.ChildSchedule")]
	public partial class ChildSchedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.Guid _SchoolProgramId;
		
		private System.Guid _ProgClassRoomId;
		
		private System.Guid _ProgScheduleId;
		
		private System.DateTime _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private decimal _Discount;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntityRef<ProgSchedule> _ProgSchedule;
		
		private EntityRef<SchoolProgram> _SchoolProgram;
		
		private EntityRef<ProgClassRoom> _ProgClassRoom;
		
		private EntityRef<ProgClassRoom> _ProgClassRoom1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnChildSchoolYearIdChanging(System.Guid value);
    partial void OnChildSchoolYearIdChanged();
    partial void OnSchoolProgramIdChanging(System.Guid value);
    partial void OnSchoolProgramIdChanged();
    partial void OnProgClassRoomIdChanging(System.Guid value);
    partial void OnProgClassRoomIdChanged();
    partial void OnProgScheduleIdChanging(System.Guid value);
    partial void OnProgScheduleIdChanged();
    partial void OnBeginDateChanging(System.DateTime value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnDiscountChanging(decimal value);
    partial void OnDiscountChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public ChildSchedule()
		{
			this._ProgSchedule = default(EntityRef<ProgSchedule>);
			this._SchoolProgram = default(EntityRef<SchoolProgram>);
			this._ProgClassRoom = default(EntityRef<ProgClassRoom>);
			this._ProgClassRoom1 = default(EntityRef<ProgClassRoom>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					this.OnChildSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._ChildSchoolYearId = value;
					this.SendPropertyChanged("ChildSchoolYearId");
					this.OnChildSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					if (this._SchoolProgram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolProgramIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolProgramId = value;
					this.SendPropertyChanged("SchoolProgramId");
					this.OnSchoolProgramIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProgClassRoomId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProgClassRoomId
		{
			get
			{
				return this._ProgClassRoomId;
			}
			set
			{
				if ((this._ProgClassRoomId != value))
				{
					if (this._ProgClassRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgClassRoomIdChanging(value);
					this.SendPropertyChanging();
					this._ProgClassRoomId = value;
					this.SendPropertyChanged("ProgClassRoomId");
					this.OnProgClassRoomIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProgScheduleId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProgScheduleId
		{
			get
			{
				return this._ProgScheduleId;
			}
			set
			{
				if ((this._ProgScheduleId != value))
				{
					if (this._ProgSchedule.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgScheduleIdChanging(value);
					this.SendPropertyChanging();
					this._ProgScheduleId = value;
					this.SendPropertyChanged("ProgScheduleId");
					this.OnProgScheduleIdChanged();
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this.OnBeginDateChanging(value);
					this.SendPropertyChanging();
					this._BeginDate = value;
					this.SendPropertyChanged("BeginDate");
					this.OnBeginDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_Discount", DbType="Decimal(18,2) NOT NULL")]
		public decimal Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="ProgSchedule_ChildSchedule", Storage="_ProgSchedule", ThisKey="ProgScheduleId", OtherKey="Id", IsForeignKey=true)]
		public ProgSchedule ProgSchedule
		{
			get
			{
				return this._ProgSchedule.Entity;
			}
			set
			{
				ProgSchedule previousValue = this._ProgSchedule.Entity;
				if (((previousValue != value) 
							|| (this._ProgSchedule.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgSchedule.Entity = null;
						previousValue.ChildSchedules.Remove(this);
					}
					this._ProgSchedule.Entity = value;
					if ((value != null))
					{
						value.ChildSchedules.Add(this);
						this._ProgScheduleId = value.Id;
					}
					else
					{
						this._ProgScheduleId = default(System.Guid);
					}
					this.SendPropertyChanged("ProgSchedule");
				}
			}
		}
		
		[Association(Name="SchoolProgram_ChildSchedule", Storage="_SchoolProgram", ThisKey="SchoolProgramId", OtherKey="Id", IsForeignKey=true)]
		public SchoolProgram SchoolProgram
		{
			get
			{
				return this._SchoolProgram.Entity;
			}
			set
			{
				SchoolProgram previousValue = this._SchoolProgram.Entity;
				if (((previousValue != value) 
							|| (this._SchoolProgram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolProgram.Entity = null;
						previousValue.ChildSchedules.Remove(this);
					}
					this._SchoolProgram.Entity = value;
					if ((value != null))
					{
						value.ChildSchedules.Add(this);
						this._SchoolProgramId = value.Id;
					}
					else
					{
						this._SchoolProgramId = default(System.Guid);
					}
					this.SendPropertyChanged("SchoolProgram");
				}
			}
		}
		
		[Association(Name="ProgClassRoom_ChildSchedule", Storage="_ProgClassRoom", ThisKey="ProgClassRoomId", OtherKey="Id", IsForeignKey=true)]
		public ProgClassRoom ProgClassRoom
		{
			get
			{
				return this._ProgClassRoom.Entity;
			}
			set
			{
				ProgClassRoom previousValue = this._ProgClassRoom.Entity;
				if (((previousValue != value) 
							|| (this._ProgClassRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgClassRoom.Entity = null;
						previousValue.ChildSchedules.Remove(this);
					}
					this._ProgClassRoom.Entity = value;
					if ((value != null))
					{
						value.ChildSchedules.Add(this);
						this._ProgClassRoomId = value.Id;
					}
					else
					{
						this._ProgClassRoomId = default(System.Guid);
					}
					this.SendPropertyChanged("ProgClassRoom");
				}
			}
		}
		
		[Association(Name="ProgClassRoom_ChildSchedule1", Storage="_ProgClassRoom1", ThisKey="ProgClassRoomId", OtherKey="Id", IsForeignKey=true)]
		public ProgClassRoom ProgClassRoom1
		{
			get
			{
				return this._ProgClassRoom1.Entity;
			}
			set
			{
				ProgClassRoom previousValue = this._ProgClassRoom1.Entity;
				if (((previousValue != value) 
							|| (this._ProgClassRoom1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgClassRoom1.Entity = null;
						previousValue.ChildSchedules1.Remove(this);
					}
					this._ProgClassRoom1.Entity = value;
					if ((value != null))
					{
						value.ChildSchedules1.Add(this);
						this._ProgClassRoomId = value.Id;
					}
					else
					{
						this._ProgClassRoomId = default(System.Guid);
					}
					this.SendPropertyChanged("ProgClassRoom1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _SchoolYearId;
		
		private System.Nullable<System.Guid> _ChildFamilyId;
		
		private System.Nullable<System.DateTime> _PostDate;
		
		private string _PaymentMethod;
		
		private string _PaymentDetail;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntitySet<Ledger> _Ledgers;
		
		private EntityRef<ChildFamily> _ChildFamily;
		
		private EntityRef<SchoolYear> _SchoolYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolYearIdChanging(System.Nullable<System.Guid> value);
    partial void OnSchoolYearIdChanged();
    partial void OnChildFamilyIdChanging(System.Nullable<System.Guid> value);
    partial void OnChildFamilyIdChanged();
    partial void OnPostDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPostDateChanged();
    partial void OnPaymentMethodChanging(string value);
    partial void OnPaymentMethodChanged();
    partial void OnPaymentDetailChanging(string value);
    partial void OnPaymentDetailChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public Payment()
		{
			this._Ledgers = new EntitySet<Ledger>(new Action<Ledger>(this.attach_Ledgers), new Action<Ledger>(this.detach_Ledgers));
			this._ChildFamily = default(EntityRef<ChildFamily>);
			this._SchoolYear = default(EntityRef<SchoolYear>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolYearId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					if (this._SchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolYearId = value;
					this.SendPropertyChanged("SchoolYearId");
					this.OnSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildFamilyId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ChildFamilyId
		{
			get
			{
				return this._ChildFamilyId;
			}
			set
			{
				if ((this._ChildFamilyId != value))
				{
					if (this._ChildFamily.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildFamilyIdChanging(value);
					this.SendPropertyChanging();
					this._ChildFamilyId = value;
					this.SendPropertyChanged("ChildFamilyId");
					this.OnChildFamilyIdChanged();
				}
			}
		}
		
		[Column(Storage="_PostDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentMethod", DbType="NVarChar(50)")]
		public string PaymentMethod
		{
			get
			{
				return this._PaymentMethod;
			}
			set
			{
				if ((this._PaymentMethod != value))
				{
					this.OnPaymentMethodChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethod = value;
					this.SendPropertyChanged("PaymentMethod");
					this.OnPaymentMethodChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentDetail", DbType="NVarChar(200)")]
		public string PaymentDetail
		{
			get
			{
				return this._PaymentDetail;
			}
			set
			{
				if ((this._PaymentDetail != value))
				{
					this.OnPaymentDetailChanging(value);
					this.SendPropertyChanging();
					this._PaymentDetail = value;
					this.SendPropertyChanged("PaymentDetail");
					this.OnPaymentDetailChanged();
				}
			}
		}
		
		[Column(Storage="_Amount", DbType="Decimal(18,0)")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="Payment_Ledger", Storage="_Ledgers", ThisKey="Id", OtherKey="PaymentId")]
		public EntitySet<Ledger> Ledgers
		{
			get
			{
				return this._Ledgers;
			}
			set
			{
				this._Ledgers.Assign(value);
			}
		}
		
		[Association(Name="ChildFamily_Payment", Storage="_ChildFamily", ThisKey="ChildFamilyId", OtherKey="Id", IsForeignKey=true)]
		public ChildFamily ChildFamily
		{
			get
			{
				return this._ChildFamily.Entity;
			}
			set
			{
				ChildFamily previousValue = this._ChildFamily.Entity;
				if (((previousValue != value) 
							|| (this._ChildFamily.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildFamily.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._ChildFamily.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._ChildFamilyId = value.Id;
					}
					else
					{
						this._ChildFamilyId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ChildFamily");
				}
			}
		}
		
		[Association(Name="SchoolYear_Payment", Storage="_SchoolYear", ThisKey="SchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public SchoolYear SchoolYear
		{
			get
			{
				return this._SchoolYear.Entity;
			}
			set
			{
				SchoolYear previousValue = this._SchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolYear.Entity = null;
						previousValue.Payments.Remove(this);
					}
					this._SchoolYear.Entity = value;
					if ((value != null))
					{
						value.Payments.Add(this);
						this._SchoolYearId = value.Id;
					}
					else
					{
						this._SchoolYearId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("SchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ledgers(Ledger entity)
		{
			this.SendPropertyChanging();
			entity.Payment = this;
		}
		
		private void detach_Ledgers(Ledger entity)
		{
			this.SendPropertyChanging();
			entity.Payment = null;
		}
	}
	
	[Table(Name="dbo.SchoolProgramFeesDetail")]
	public partial class SchoolProgramFeesDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolProgramId;
		
		private decimal _Fees;
		
		private System.Guid _FeesPeriodId;
		
		private System.Nullable<System.DateTime> _EffectiveYearDate;
		
		private System.Nullable<int> _EffectiveMonthDay;
		
		private System.Nullable<int> _EffectiveWeekDay;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntityRef<FeesPeriod> _FeesPeriod;
		
		private EntityRef<SchoolProgram> _SchoolProgram;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolProgramIdChanging(System.Guid value);
    partial void OnSchoolProgramIdChanged();
    partial void OnFeesChanging(decimal value);
    partial void OnFeesChanged();
    partial void OnFeesPeriodIdChanging(System.Guid value);
    partial void OnFeesPeriodIdChanged();
    partial void OnEffectiveYearDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEffectiveYearDateChanged();
    partial void OnEffectiveMonthDayChanging(System.Nullable<int> value);
    partial void OnEffectiveMonthDayChanged();
    partial void OnEffectiveWeekDayChanging(System.Nullable<int> value);
    partial void OnEffectiveWeekDayChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public SchoolProgramFeesDetail()
		{
			this._FeesPeriod = default(EntityRef<FeesPeriod>);
			this._SchoolProgram = default(EntityRef<SchoolProgram>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					if (this._SchoolProgram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolProgramIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolProgramId = value;
					this.SendPropertyChanged("SchoolProgramId");
					this.OnSchoolProgramIdChanged();
				}
			}
		}
		
		[Column(Storage="_Fees", DbType="Decimal(18,0) NOT NULL")]
		public decimal Fees
		{
			get
			{
				return this._Fees;
			}
			set
			{
				if ((this._Fees != value))
				{
					this.OnFeesChanging(value);
					this.SendPropertyChanging();
					this._Fees = value;
					this.SendPropertyChanged("Fees");
					this.OnFeesChanged();
				}
			}
		}
		
		[Column(Storage="_FeesPeriodId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FeesPeriodId
		{
			get
			{
				return this._FeesPeriodId;
			}
			set
			{
				if ((this._FeesPeriodId != value))
				{
					if (this._FeesPeriod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeesPeriodIdChanging(value);
					this.SendPropertyChanging();
					this._FeesPeriodId = value;
					this.SendPropertyChanged("FeesPeriodId");
					this.OnFeesPeriodIdChanged();
				}
			}
		}
		
		[Column(Storage="_EffectiveYearDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EffectiveYearDate
		{
			get
			{
				return this._EffectiveYearDate;
			}
			set
			{
				if ((this._EffectiveYearDate != value))
				{
					this.OnEffectiveYearDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveYearDate = value;
					this.SendPropertyChanged("EffectiveYearDate");
					this.OnEffectiveYearDateChanged();
				}
			}
		}
		
		[Column(Storage="_EffectiveMonthDay", DbType="Int")]
		public System.Nullable<int> EffectiveMonthDay
		{
			get
			{
				return this._EffectiveMonthDay;
			}
			set
			{
				if ((this._EffectiveMonthDay != value))
				{
					this.OnEffectiveMonthDayChanging(value);
					this.SendPropertyChanging();
					this._EffectiveMonthDay = value;
					this.SendPropertyChanged("EffectiveMonthDay");
					this.OnEffectiveMonthDayChanged();
				}
			}
		}
		
		[Column(Storage="_EffectiveWeekDay", DbType="Int")]
		public System.Nullable<int> EffectiveWeekDay
		{
			get
			{
				return this._EffectiveWeekDay;
			}
			set
			{
				if ((this._EffectiveWeekDay != value))
				{
					this.OnEffectiveWeekDayChanging(value);
					this.SendPropertyChanging();
					this._EffectiveWeekDay = value;
					this.SendPropertyChanged("EffectiveWeekDay");
					this.OnEffectiveWeekDayChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="FeesPeriod_SchoolProgramFeesDetail", Storage="_FeesPeriod", ThisKey="FeesPeriodId", OtherKey="Id", IsForeignKey=true)]
		public FeesPeriod FeesPeriod
		{
			get
			{
				return this._FeesPeriod.Entity;
			}
			set
			{
				FeesPeriod previousValue = this._FeesPeriod.Entity;
				if (((previousValue != value) 
							|| (this._FeesPeriod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeesPeriod.Entity = null;
						previousValue.SchoolProgramFeesDetails.Remove(this);
					}
					this._FeesPeriod.Entity = value;
					if ((value != null))
					{
						value.SchoolProgramFeesDetails.Add(this);
						this._FeesPeriodId = value.Id;
					}
					else
					{
						this._FeesPeriodId = default(System.Guid);
					}
					this.SendPropertyChanged("FeesPeriod");
				}
			}
		}
		
		[Association(Name="SchoolProgram_SchoolProgramFeesDetail", Storage="_SchoolProgram", ThisKey="SchoolProgramId", OtherKey="Id", IsForeignKey=true)]
		public SchoolProgram SchoolProgram
		{
			get
			{
				return this._SchoolProgram.Entity;
			}
			set
			{
				SchoolProgram previousValue = this._SchoolProgram.Entity;
				if (((previousValue != value) 
							|| (this._SchoolProgram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolProgram.Entity = null;
						previousValue.SchoolProgramFeesDetails.Remove(this);
					}
					this._SchoolProgram.Entity = value;
					if ((value != null))
					{
						value.SchoolProgramFeesDetails.Add(this);
						this._SchoolProgramId = value.Id;
					}
					else
					{
						this._SchoolProgramId = default(System.Guid);
					}
					this.SendPropertyChanged("SchoolProgram");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ChildProgEnrollmentFeeDetail")]
	public partial class ChildProgEnrollmentFeeDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _ChildSchoolYearId;
		
		private System.Nullable<System.Guid> _ChildFamilyId;
		
		private System.Nullable<System.Guid> _SchoolProgramId;
		
		private System.Nullable<System.Guid> _FeesPeriodId;
		
		private decimal _Fee;
		
		private System.Nullable<System.DateTime> _EffectiveYearDate;
		
		private System.Nullable<int> _EffectiveMonthDay;
		
		private System.Nullable<int> _EffectiveWeekDay;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.DateTime> _CreatedDatetime;
		
		private System.Nullable<System.Guid> _LastmodiedById;
		
		private System.Nullable<System.DateTime> _LastmodifiedDatetime;
		
		private System.Nullable<System.DateTime> _EnrollmentDate;
		
		private string _EnrollmentStatus;
		
		private System.Nullable<System.Guid> _EnrollmentStatusId;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntityRef<EnrollmentStatus> _EnrollmentStatus1;
		
		private EntityRef<FeesPeriod> _FeesPeriod;
		
		private EntityRef<SchoolProgram> _SchoolProgram;
		
		private EntityRef<ChildFamily> _ChildFamily;
		
		private EntityRef<ChildSchoolYear> _ChildSchoolYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnChildSchoolYearIdChanging(System.Nullable<System.Guid> value);
    partial void OnChildSchoolYearIdChanged();
    partial void OnChildFamilyIdChanging(System.Nullable<System.Guid> value);
    partial void OnChildFamilyIdChanged();
    partial void OnSchoolProgramIdChanging(System.Nullable<System.Guid> value);
    partial void OnSchoolProgramIdChanged();
    partial void OnFeesPeriodIdChanging(System.Nullable<System.Guid> value);
    partial void OnFeesPeriodIdChanged();
    partial void OnFeeChanging(decimal value);
    partial void OnFeeChanged();
    partial void OnEffectiveYearDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEffectiveYearDateChanged();
    partial void OnEffectiveMonthDayChanging(System.Nullable<int> value);
    partial void OnEffectiveMonthDayChanged();
    partial void OnEffectiveWeekDayChanging(System.Nullable<int> value);
    partial void OnEffectiveWeekDayChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnCreatedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDatetimeChanged();
    partial void OnLastmodiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastmodiedByIdChanged();
    partial void OnLastmodifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastmodifiedDatetimeChanged();
    partial void OnEnrollmentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEnrollmentDateChanged();
    partial void OnEnrollmentStatusChanging(string value);
    partial void OnEnrollmentStatusChanged();
    partial void OnEnrollmentStatusIdChanging(System.Nullable<System.Guid> value);
    partial void OnEnrollmentStatusIdChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public ChildProgEnrollmentFeeDetail()
		{
			this._EnrollmentStatus1 = default(EntityRef<EnrollmentStatus>);
			this._FeesPeriod = default(EntityRef<FeesPeriod>);
			this._SchoolProgram = default(EntityRef<SchoolProgram>);
			this._ChildFamily = default(EntityRef<ChildFamily>);
			this._ChildSchoolYear = default(EntityRef<ChildSchoolYear>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					if (this._ChildSchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._ChildSchoolYearId = value;
					this.SendPropertyChanged("ChildSchoolYearId");
					this.OnChildSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildFamilyId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ChildFamilyId
		{
			get
			{
				return this._ChildFamilyId;
			}
			set
			{
				if ((this._ChildFamilyId != value))
				{
					if (this._ChildFamily.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildFamilyIdChanging(value);
					this.SendPropertyChanging();
					this._ChildFamilyId = value;
					this.SendPropertyChanged("ChildFamilyId");
					this.OnChildFamilyIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					if (this._SchoolProgram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolProgramIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolProgramId = value;
					this.SendPropertyChanged("SchoolProgramId");
					this.OnSchoolProgramIdChanged();
				}
			}
		}
		
		[Column(Storage="_FeesPeriodId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FeesPeriodId
		{
			get
			{
				return this._FeesPeriodId;
			}
			set
			{
				if ((this._FeesPeriodId != value))
				{
					if (this._FeesPeriod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeesPeriodIdChanging(value);
					this.SendPropertyChanging();
					this._FeesPeriodId = value;
					this.SendPropertyChanged("FeesPeriodId");
					this.OnFeesPeriodIdChanged();
				}
			}
		}
		
		[Column(Storage="_Fee", DbType="Decimal(18,2) NOT NULL")]
		public decimal Fee
		{
			get
			{
				return this._Fee;
			}
			set
			{
				if ((this._Fee != value))
				{
					this.OnFeeChanging(value);
					this.SendPropertyChanging();
					this._Fee = value;
					this.SendPropertyChanged("Fee");
					this.OnFeeChanged();
				}
			}
		}
		
		[Column(Storage="_EffectiveYearDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EffectiveYearDate
		{
			get
			{
				return this._EffectiveYearDate;
			}
			set
			{
				if ((this._EffectiveYearDate != value))
				{
					this.OnEffectiveYearDateChanging(value);
					this.SendPropertyChanging();
					this._EffectiveYearDate = value;
					this.SendPropertyChanged("EffectiveYearDate");
					this.OnEffectiveYearDateChanged();
				}
			}
		}
		
		[Column(Storage="_EffectiveMonthDay", DbType="Int")]
		public System.Nullable<int> EffectiveMonthDay
		{
			get
			{
				return this._EffectiveMonthDay;
			}
			set
			{
				if ((this._EffectiveMonthDay != value))
				{
					this.OnEffectiveMonthDayChanging(value);
					this.SendPropertyChanging();
					this._EffectiveMonthDay = value;
					this.SendPropertyChanged("EffectiveMonthDay");
					this.OnEffectiveMonthDayChanged();
				}
			}
		}
		
		[Column(Storage="_EffectiveWeekDay", DbType="Int")]
		public System.Nullable<int> EffectiveWeekDay
		{
			get
			{
				return this._EffectiveWeekDay;
			}
			set
			{
				if ((this._EffectiveWeekDay != value))
				{
					this.OnEffectiveWeekDayChanging(value);
					this.SendPropertyChanging();
					this._EffectiveWeekDay = value;
					this.SendPropertyChanged("EffectiveWeekDay");
					this.OnEffectiveWeekDayChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDatetime
		{
			get
			{
				return this._CreatedDatetime;
			}
			set
			{
				if ((this._CreatedDatetime != value))
				{
					this.OnCreatedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDatetime = value;
					this.SendPropertyChanged("CreatedDatetime");
					this.OnCreatedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastmodiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastmodiedById
		{
			get
			{
				return this._LastmodiedById;
			}
			set
			{
				if ((this._LastmodiedById != value))
				{
					this.OnLastmodiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastmodiedById = value;
					this.SendPropertyChanged("LastmodiedById");
					this.OnLastmodiedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastmodifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastmodifiedDatetime
		{
			get
			{
				return this._LastmodifiedDatetime;
			}
			set
			{
				if ((this._LastmodifiedDatetime != value))
				{
					this.OnLastmodifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastmodifiedDatetime = value;
					this.SendPropertyChanged("LastmodifiedDatetime");
					this.OnLastmodifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_EnrollmentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EnrollmentDate
		{
			get
			{
				return this._EnrollmentDate;
			}
			set
			{
				if ((this._EnrollmentDate != value))
				{
					this.OnEnrollmentDateChanging(value);
					this.SendPropertyChanging();
					this._EnrollmentDate = value;
					this.SendPropertyChanged("EnrollmentDate");
					this.OnEnrollmentDateChanged();
				}
			}
		}
		
		[Column(Storage="_EnrollmentStatus", DbType="VarChar(50)")]
		public string EnrollmentStatus
		{
			get
			{
				return this._EnrollmentStatus;
			}
			set
			{
				if ((this._EnrollmentStatus != value))
				{
					this.OnEnrollmentStatusChanging(value);
					this.SendPropertyChanging();
					this._EnrollmentStatus = value;
					this.SendPropertyChanged("EnrollmentStatus");
					this.OnEnrollmentStatusChanged();
				}
			}
		}
		
		[Column(Storage="_EnrollmentStatusId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EnrollmentStatusId
		{
			get
			{
				return this._EnrollmentStatusId;
			}
			set
			{
				if ((this._EnrollmentStatusId != value))
				{
					if (this._EnrollmentStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnrollmentStatusIdChanging(value);
					this.SendPropertyChanging();
					this._EnrollmentStatusId = value;
					this.SendPropertyChanged("EnrollmentStatusId");
					this.OnEnrollmentStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Association(Name="EnrollmentStatus_ChildProgEnrollmentFeeDetail", Storage="_EnrollmentStatus1", ThisKey="EnrollmentStatusId", OtherKey="Id", IsForeignKey=true)]
		public EnrollmentStatus EnrollmentStatus1
		{
			get
			{
				return this._EnrollmentStatus1.Entity;
			}
			set
			{
				EnrollmentStatus previousValue = this._EnrollmentStatus1.Entity;
				if (((previousValue != value) 
							|| (this._EnrollmentStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EnrollmentStatus1.Entity = null;
						previousValue.ChildProgEnrollmentFeeDetails.Remove(this);
					}
					this._EnrollmentStatus1.Entity = value;
					if ((value != null))
					{
						value.ChildProgEnrollmentFeeDetails.Add(this);
						this._EnrollmentStatusId = value.Id;
					}
					else
					{
						this._EnrollmentStatusId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("EnrollmentStatus1");
				}
			}
		}
		
		[Association(Name="FeesPeriod_ChildProgEnrollmentFeeDetail", Storage="_FeesPeriod", ThisKey="FeesPeriodId", OtherKey="Id", IsForeignKey=true)]
		public FeesPeriod FeesPeriod
		{
			get
			{
				return this._FeesPeriod.Entity;
			}
			set
			{
				FeesPeriod previousValue = this._FeesPeriod.Entity;
				if (((previousValue != value) 
							|| (this._FeesPeriod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeesPeriod.Entity = null;
						previousValue.ChildProgEnrollmentFeeDetails.Remove(this);
					}
					this._FeesPeriod.Entity = value;
					if ((value != null))
					{
						value.ChildProgEnrollmentFeeDetails.Add(this);
						this._FeesPeriodId = value.Id;
					}
					else
					{
						this._FeesPeriodId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("FeesPeriod");
				}
			}
		}
		
		[Association(Name="SchoolProgram_ChildProgEnrollmentFeeDetail", Storage="_SchoolProgram", ThisKey="SchoolProgramId", OtherKey="Id", IsForeignKey=true)]
		public SchoolProgram SchoolProgram
		{
			get
			{
				return this._SchoolProgram.Entity;
			}
			set
			{
				SchoolProgram previousValue = this._SchoolProgram.Entity;
				if (((previousValue != value) 
							|| (this._SchoolProgram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolProgram.Entity = null;
						previousValue.ChildProgEnrollmentFeeDetails.Remove(this);
					}
					this._SchoolProgram.Entity = value;
					if ((value != null))
					{
						value.ChildProgEnrollmentFeeDetails.Add(this);
						this._SchoolProgramId = value.Id;
					}
					else
					{
						this._SchoolProgramId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("SchoolProgram");
				}
			}
		}
		
		[Association(Name="ChildFamily_ChildProgEnrollmentFeeDetail", Storage="_ChildFamily", ThisKey="ChildFamilyId", OtherKey="Id", IsForeignKey=true)]
		public ChildFamily ChildFamily
		{
			get
			{
				return this._ChildFamily.Entity;
			}
			set
			{
				ChildFamily previousValue = this._ChildFamily.Entity;
				if (((previousValue != value) 
							|| (this._ChildFamily.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildFamily.Entity = null;
						previousValue.ChildProgEnrollmentFeeDetails.Remove(this);
					}
					this._ChildFamily.Entity = value;
					if ((value != null))
					{
						value.ChildProgEnrollmentFeeDetails.Add(this);
						this._ChildFamilyId = value.Id;
					}
					else
					{
						this._ChildFamilyId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ChildFamily");
				}
			}
		}
		
		[Association(Name="ChildSchoolYear_ChildProgEnrollmentFeeDetail", Storage="_ChildSchoolYear", ThisKey="ChildSchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public ChildSchoolYear ChildSchoolYear
		{
			get
			{
				return this._ChildSchoolYear.Entity;
			}
			set
			{
				ChildSchoolYear previousValue = this._ChildSchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._ChildSchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildSchoolYear.Entity = null;
						previousValue.ChildProgEnrollmentFeeDetails.Remove(this);
					}
					this._ChildSchoolYear.Entity = value;
					if ((value != null))
					{
						value.ChildProgEnrollmentFeeDetails.Add(this);
						this._ChildSchoolYearId = value.Id;
					}
					else
					{
						this._ChildSchoolYearId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ChildSchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ChildProgEnrollment")]
	public partial class ChildProgEnrollment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.Guid _SchoolProgramId;
		
		private System.Guid _ProgClassRoomId;
		
		private int _DayIndex;
		
		private string _DayType;
		
		private System.DateTime _CreatedDateTime;
		
		private System.DateTime _LastModifiedDateTime;
		
		private System.Guid _CreatedById;
		
		private System.Guid _LastModifiedById;
		
		private System.Nullable<System.Guid> _FeesPeriodId;
		
		private System.Nullable<decimal> _Fees;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private EntityRef<FeesPeriod> _FeesPeriod;
		
		private EntityRef<SchoolProgram> _SchoolProgram;
		
		private EntityRef<ChildSchoolYear> _ChildSchoolYear;
		
		private EntityRef<ProgClassRoom> _ProgClassRoom;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnChildSchoolYearIdChanging(System.Guid value);
    partial void OnChildSchoolYearIdChanged();
    partial void OnSchoolProgramIdChanging(System.Guid value);
    partial void OnSchoolProgramIdChanged();
    partial void OnProgClassRoomIdChanging(System.Guid value);
    partial void OnProgClassRoomIdChanged();
    partial void OnDayIndexChanging(int value);
    partial void OnDayIndexChanged();
    partial void OnDayTypeChanging(string value);
    partial void OnDayTypeChanged();
    partial void OnCreatedDateTimeChanging(System.DateTime value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDateTimeChanging(System.DateTime value);
    partial void OnLastModifiedDateTimeChanged();
    partial void OnCreatedByIdChanging(System.Guid value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Guid value);
    partial void OnLastModifiedByIdChanged();
    partial void OnFeesPeriodIdChanging(System.Nullable<System.Guid> value);
    partial void OnFeesPeriodIdChanged();
    partial void OnFeesChanging(System.Nullable<decimal> value);
    partial void OnFeesChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
		
		public ChildProgEnrollment()
		{
			this._FeesPeriod = default(EntityRef<FeesPeriod>);
			this._SchoolProgram = default(EntityRef<SchoolProgram>);
			this._ChildSchoolYear = default(EntityRef<ChildSchoolYear>);
			this._ProgClassRoom = default(EntityRef<ProgClassRoom>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					if (this._ChildSchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._ChildSchoolYearId = value;
					this.SendPropertyChanged("ChildSchoolYearId");
					this.OnChildSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					if (this._SchoolProgram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolProgramIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolProgramId = value;
					this.SendPropertyChanged("SchoolProgramId");
					this.OnSchoolProgramIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProgClassRoomId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProgClassRoomId
		{
			get
			{
				return this._ProgClassRoomId;
			}
			set
			{
				if ((this._ProgClassRoomId != value))
				{
					if (this._ProgClassRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProgClassRoomIdChanging(value);
					this.SendPropertyChanging();
					this._ProgClassRoomId = value;
					this.SendPropertyChanged("ProgClassRoomId");
					this.OnProgClassRoomIdChanged();
				}
			}
		}
		
		[Column(Storage="_DayIndex", DbType="Int NOT NULL")]
		public int DayIndex
		{
			get
			{
				return this._DayIndex;
			}
			set
			{
				if ((this._DayIndex != value))
				{
					this.OnDayIndexChanging(value);
					this.SendPropertyChanging();
					this._DayIndex = value;
					this.SendPropertyChanged("DayIndex");
					this.OnDayIndexChanged();
				}
			}
		}
		
		[Column(Storage="_DayType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DayType
		{
			get
			{
				return this._DayType;
			}
			set
			{
				if ((this._DayType != value))
				{
					this.OnDayTypeChanging(value);
					this.SendPropertyChanging();
					this._DayType = value;
					this.SendPropertyChanged("DayType");
					this.OnDayTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastModifiedDateTime
		{
			get
			{
				return this._LastModifiedDateTime;
			}
			set
			{
				if ((this._LastModifiedDateTime != value))
				{
					this.OnLastModifiedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDateTime = value;
					this.SendPropertyChanged("LastModifiedDateTime");
					this.OnLastModifiedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_FeesPeriodId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FeesPeriodId
		{
			get
			{
				return this._FeesPeriodId;
			}
			set
			{
				if ((this._FeesPeriodId != value))
				{
					if (this._FeesPeriod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFeesPeriodIdChanging(value);
					this.SendPropertyChanging();
					this._FeesPeriodId = value;
					this.SendPropertyChanged("FeesPeriodId");
					this.OnFeesPeriodIdChanged();
				}
			}
		}
		
		[Column(Storage="_Fees", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> Fees
		{
			get
			{
				return this._Fees;
			}
			set
			{
				if ((this._Fees != value))
				{
					this.OnFeesChanging(value);
					this.SendPropertyChanging();
					this._Fees = value;
					this.SendPropertyChanged("Fees");
					this.OnFeesChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Association(Name="FeesPeriod_ChildProgEnrollment", Storage="_FeesPeriod", ThisKey="FeesPeriodId", OtherKey="Id", IsForeignKey=true)]
		public FeesPeriod FeesPeriod
		{
			get
			{
				return this._FeesPeriod.Entity;
			}
			set
			{
				FeesPeriod previousValue = this._FeesPeriod.Entity;
				if (((previousValue != value) 
							|| (this._FeesPeriod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FeesPeriod.Entity = null;
						previousValue.ChildProgEnrollments.Remove(this);
					}
					this._FeesPeriod.Entity = value;
					if ((value != null))
					{
						value.ChildProgEnrollments.Add(this);
						this._FeesPeriodId = value.Id;
					}
					else
					{
						this._FeesPeriodId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("FeesPeriod");
				}
			}
		}
		
		[Association(Name="SchoolProgram_ChildProgEnrollment", Storage="_SchoolProgram", ThisKey="SchoolProgramId", OtherKey="Id", IsForeignKey=true)]
		public SchoolProgram SchoolProgram
		{
			get
			{
				return this._SchoolProgram.Entity;
			}
			set
			{
				SchoolProgram previousValue = this._SchoolProgram.Entity;
				if (((previousValue != value) 
							|| (this._SchoolProgram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolProgram.Entity = null;
						previousValue.ChildProgEnrollments.Remove(this);
					}
					this._SchoolProgram.Entity = value;
					if ((value != null))
					{
						value.ChildProgEnrollments.Add(this);
						this._SchoolProgramId = value.Id;
					}
					else
					{
						this._SchoolProgramId = default(System.Guid);
					}
					this.SendPropertyChanged("SchoolProgram");
				}
			}
		}
		
		[Association(Name="ChildSchoolYear_ChildProgEnrollment", Storage="_ChildSchoolYear", ThisKey="ChildSchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public ChildSchoolYear ChildSchoolYear
		{
			get
			{
				return this._ChildSchoolYear.Entity;
			}
			set
			{
				ChildSchoolYear previousValue = this._ChildSchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._ChildSchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildSchoolYear.Entity = null;
						previousValue.ChildProgEnrollments.Remove(this);
					}
					this._ChildSchoolYear.Entity = value;
					if ((value != null))
					{
						value.ChildProgEnrollments.Add(this);
						this._ChildSchoolYearId = value.Id;
					}
					else
					{
						this._ChildSchoolYearId = default(System.Guid);
					}
					this.SendPropertyChanged("ChildSchoolYear");
				}
			}
		}
		
		[Association(Name="ProgClassRoom_ChildProgEnrollment", Storage="_ProgClassRoom", ThisKey="ProgClassRoomId", OtherKey="Id", IsForeignKey=true)]
		public ProgClassRoom ProgClassRoom
		{
			get
			{
				return this._ProgClassRoom.Entity;
			}
			set
			{
				ProgClassRoom previousValue = this._ProgClassRoom.Entity;
				if (((previousValue != value) 
							|| (this._ProgClassRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProgClassRoom.Entity = null;
						previousValue.ChildProgEnrollments.Remove(this);
					}
					this._ProgClassRoom.Entity = value;
					if ((value != null))
					{
						value.ChildProgEnrollments.Add(this);
						this._ProgClassRoomId = value.Id;
					}
					else
					{
						this._ProgClassRoomId = default(System.Guid);
					}
					this.SendPropertyChanged("ProgClassRoom");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ChildData")]
	public partial class ChildData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _ChildFamilyId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private bool _Gender;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _SocSec;
		
		private string _Photo;
		
		private string _Comments;
		
		private bool _Active;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private EntitySet<Ledger> _Ledgers;
		
		private EntitySet<ChildSchoolYear> _ChildSchoolYears;
		
		private EntityRef<ChildFamily> _ChildFamily;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnChildFamilyIdChanging(System.Guid value);
    partial void OnChildFamilyIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnGenderChanging(bool value);
    partial void OnGenderChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnSocSecChanging(string value);
    partial void OnSocSecChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    #endregion
		
		public ChildData()
		{
			this._Ledgers = new EntitySet<Ledger>(new Action<Ledger>(this.attach_Ledgers), new Action<Ledger>(this.detach_Ledgers));
			this._ChildSchoolYears = new EntitySet<ChildSchoolYear>(new Action<ChildSchoolYear>(this.attach_ChildSchoolYears), new Action<ChildSchoolYear>(this.detach_ChildSchoolYears));
			this._ChildFamily = default(EntityRef<ChildFamily>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildFamilyId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildFamilyId
		{
			get
			{
				return this._ChildFamilyId;
			}
			set
			{
				if ((this._ChildFamilyId != value))
				{
					if (this._ChildFamily.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildFamilyIdChanging(value);
					this.SendPropertyChanging();
					this._ChildFamilyId = value;
					this.SendPropertyChanged("ChildFamilyId");
					this.OnChildFamilyIdChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="Bit NOT NULL")]
		public bool Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[Column(Storage="_DOB", DbType="DateTime")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[Column(Storage="_SocSec", DbType="NVarChar(50)")]
		public string SocSec
		{
			get
			{
				return this._SocSec;
			}
			set
			{
				if ((this._SocSec != value))
				{
					this.OnSocSecChanging(value);
					this.SendPropertyChanging();
					this._SocSec = value;
					this.SendPropertyChanged("SocSec");
					this.OnSocSecChanged();
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="NVarChar(100)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Association(Name="ChildData_Ledger", Storage="_Ledgers", ThisKey="Id", OtherKey="ChildDataId")]
		public EntitySet<Ledger> Ledgers
		{
			get
			{
				return this._Ledgers;
			}
			set
			{
				this._Ledgers.Assign(value);
			}
		}
		
		[Association(Name="ChildData_ChildSchoolYear", Storage="_ChildSchoolYears", ThisKey="Id", OtherKey="ChildDataId")]
		public EntitySet<ChildSchoolYear> ChildSchoolYears
		{
			get
			{
				return this._ChildSchoolYears;
			}
			set
			{
				this._ChildSchoolYears.Assign(value);
			}
		}
		
		[Association(Name="ChildFamily_ChildData", Storage="_ChildFamily", ThisKey="ChildFamilyId", OtherKey="Id", IsForeignKey=true)]
		public ChildFamily ChildFamily
		{
			get
			{
				return this._ChildFamily.Entity;
			}
			set
			{
				ChildFamily previousValue = this._ChildFamily.Entity;
				if (((previousValue != value) 
							|| (this._ChildFamily.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildFamily.Entity = null;
						previousValue.ChildDatas.Remove(this);
					}
					this._ChildFamily.Entity = value;
					if ((value != null))
					{
						value.ChildDatas.Add(this);
						this._ChildFamilyId = value.Id;
					}
					else
					{
						this._ChildFamilyId = default(System.Guid);
					}
					this.SendPropertyChanged("ChildFamily");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ledgers(Ledger entity)
		{
			this.SendPropertyChanging();
			entity.ChildData = this;
		}
		
		private void detach_Ledgers(Ledger entity)
		{
			this.SendPropertyChanging();
			entity.ChildData = null;
		}
		
		private void attach_ChildSchoolYears(ChildSchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.ChildData = this;
		}
		
		private void detach_ChildSchoolYears(ChildSchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.ChildData = null;
		}
	}
	
	[Table(Name="dbo.ChildEnrollmentStatus")]
	public partial class ChildEnrollmentStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.Nullable<System.Guid> _EnrollmentStatusId;
		
		private System.Nullable<System.DateTime> _EnrollmentDate;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntityRef<EnrollmentStatus> _EnrollmentStatus;
		
		private EntityRef<ChildSchoolYear> _ChildSchoolYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnChildSchoolYearIdChanging(System.Guid value);
    partial void OnChildSchoolYearIdChanged();
    partial void OnEnrollmentStatusIdChanging(System.Nullable<System.Guid> value);
    partial void OnEnrollmentStatusIdChanged();
    partial void OnEnrollmentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEnrollmentDateChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public ChildEnrollmentStatus()
		{
			this._EnrollmentStatus = default(EntityRef<EnrollmentStatus>);
			this._ChildSchoolYear = default(EntityRef<ChildSchoolYear>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					if (this._ChildSchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._ChildSchoolYearId = value;
					this.SendPropertyChanged("ChildSchoolYearId");
					this.OnChildSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_EnrollmentStatusId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EnrollmentStatusId
		{
			get
			{
				return this._EnrollmentStatusId;
			}
			set
			{
				if ((this._EnrollmentStatusId != value))
				{
					if (this._EnrollmentStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnrollmentStatusIdChanging(value);
					this.SendPropertyChanging();
					this._EnrollmentStatusId = value;
					this.SendPropertyChanged("EnrollmentStatusId");
					this.OnEnrollmentStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_EnrollmentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EnrollmentDate
		{
			get
			{
				return this._EnrollmentDate;
			}
			set
			{
				if ((this._EnrollmentDate != value))
				{
					this.OnEnrollmentDateChanging(value);
					this.SendPropertyChanging();
					this._EnrollmentDate = value;
					this.SendPropertyChanged("EnrollmentDate");
					this.OnEnrollmentDateChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="EnrollmentStatus_ChildEnrollmentStatus", Storage="_EnrollmentStatus", ThisKey="EnrollmentStatusId", OtherKey="Id", IsForeignKey=true)]
		public EnrollmentStatus EnrollmentStatus
		{
			get
			{
				return this._EnrollmentStatus.Entity;
			}
			set
			{
				EnrollmentStatus previousValue = this._EnrollmentStatus.Entity;
				if (((previousValue != value) 
							|| (this._EnrollmentStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EnrollmentStatus.Entity = null;
						previousValue.ChildEnrollmentStatus.Remove(this);
					}
					this._EnrollmentStatus.Entity = value;
					if ((value != null))
					{
						value.ChildEnrollmentStatus.Add(this);
						this._EnrollmentStatusId = value.Id;
					}
					else
					{
						this._EnrollmentStatusId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("EnrollmentStatus");
				}
			}
		}
		
		[Association(Name="ChildSchoolYear_ChildEnrollmentStatus", Storage="_ChildSchoolYear", ThisKey="ChildSchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public ChildSchoolYear ChildSchoolYear
		{
			get
			{
				return this._ChildSchoolYear.Entity;
			}
			set
			{
				ChildSchoolYear previousValue = this._ChildSchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._ChildSchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildSchoolYear.Entity = null;
						previousValue.ChildEnrollmentStatus.Remove(this);
					}
					this._ChildSchoolYear.Entity = value;
					if ((value != null))
					{
						value.ChildEnrollmentStatus.Add(this);
						this._ChildSchoolYearId = value.Id;
					}
					else
					{
						this._ChildSchoolYearId = default(System.Guid);
					}
					this.SendPropertyChanged("ChildSchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SyncLog")]
	public partial class SyncLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _UserId;
		
		private System.Nullable<System.DateTime> _Datetime;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(System.Nullable<System.Guid> value);
    partial void OnUserIdChanged();
    partial void OnDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnDatetimeChanged();
    #endregion
		
		public SyncLog()
		{
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_Datetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> Datetime
		{
			get
			{
				return this._Datetime;
			}
			set
			{
				if ((this._Datetime != value))
				{
					this.OnDatetimeChanging(value);
					this.SendPropertyChanging();
					this._Datetime = value;
					this.SendPropertyChanged("Datetime");
					this.OnDatetimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Ledger")]
	public partial class Ledger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _SchoolYearId;
		
		private System.Nullable<System.Guid> _ChildFamilyId;
		
		private System.Nullable<System.Guid> _ChildDataId;
		
		private System.Nullable<System.Guid> _PaymentId;
		
		private System.DateTime _TransactionDate;
		
		private string _Detail;
		
		private decimal _Debit;
		
		private decimal _Credit;
		
		private decimal _Balance;
		
		private bool _AllowEdit;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _SchoolProgramId;
		
		private string _Comment;
		
		private System.Nullable<int> _PaymentMethodId;
		
		private System.Nullable<System.Guid> _ChargeCodeCategoryId;
		
		private System.Nullable<int> _LateFee;
		
		private EntityRef<ChargeCode> _ChargeCode;
		
		private EntityRef<ChildData> _ChildData;
		
		private EntityRef<Payment> _Payment;
		
		private EntityRef<SchoolProgram> _SchoolProgram;
		
		private EntityRef<ChildFamily> _ChildFamily;
		
		private EntityRef<SchoolYear> _SchoolYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolYearIdChanging(System.Nullable<System.Guid> value);
    partial void OnSchoolYearIdChanged();
    partial void OnChildFamilyIdChanging(System.Nullable<System.Guid> value);
    partial void OnChildFamilyIdChanged();
    partial void OnChildDataIdChanging(System.Nullable<System.Guid> value);
    partial void OnChildDataIdChanged();
    partial void OnPaymentIdChanging(System.Nullable<System.Guid> value);
    partial void OnPaymentIdChanged();
    partial void OnTransactionDateChanging(System.DateTime value);
    partial void OnTransactionDateChanged();
    partial void OnDetailChanging(string value);
    partial void OnDetailChanged();
    partial void OnDebitChanging(decimal value);
    partial void OnDebitChanged();
    partial void OnCreditChanging(decimal value);
    partial void OnCreditChanged();
    partial void OnBalanceChanging(decimal value);
    partial void OnBalanceChanged();
    partial void OnAllowEditChanging(bool value);
    partial void OnAllowEditChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnSchoolProgramIdChanging(System.Nullable<System.Guid> value);
    partial void OnSchoolProgramIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnPaymentMethodIdChanging(System.Nullable<int> value);
    partial void OnPaymentMethodIdChanged();
    partial void OnChargeCodeCategoryIdChanging(System.Nullable<System.Guid> value);
    partial void OnChargeCodeCategoryIdChanged();
    partial void OnLateFeeChanging(System.Nullable<int> value);
    partial void OnLateFeeChanged();
    #endregion
		
		public Ledger()
		{
			this._ChargeCode = default(EntityRef<ChargeCode>);
			this._ChildData = default(EntityRef<ChildData>);
			this._Payment = default(EntityRef<Payment>);
			this._SchoolProgram = default(EntityRef<SchoolProgram>);
			this._ChildFamily = default(EntityRef<ChildFamily>);
			this._SchoolYear = default(EntityRef<SchoolYear>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolYearId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					if (this._SchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolYearId = value;
					this.SendPropertyChanged("SchoolYearId");
					this.OnSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildFamilyId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ChildFamilyId
		{
			get
			{
				return this._ChildFamilyId;
			}
			set
			{
				if ((this._ChildFamilyId != value))
				{
					if (this._ChildFamily.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildFamilyIdChanging(value);
					this.SendPropertyChanging();
					this._ChildFamilyId = value;
					this.SendPropertyChanged("ChildFamilyId");
					this.OnChildFamilyIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildDataId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ChildDataId
		{
			get
			{
				return this._ChildDataId;
			}
			set
			{
				if ((this._ChildDataId != value))
				{
					if (this._ChildData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildDataIdChanging(value);
					this.SendPropertyChanging();
					this._ChildDataId = value;
					this.SendPropertyChanged("ChildDataId");
					this.OnChildDataIdChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PaymentId
		{
			get
			{
				return this._PaymentId;
			}
			set
			{
				if ((this._PaymentId != value))
				{
					if (this._Payment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentId = value;
					this.SendPropertyChanged("PaymentId");
					this.OnPaymentIdChanged();
				}
			}
		}
		
		[Column(Storage="_TransactionDate", DbType="DateTime NOT NULL")]
		public System.DateTime TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this.OnTransactionDateChanging(value);
					this.SendPropertyChanging();
					this._TransactionDate = value;
					this.SendPropertyChanged("TransactionDate");
					this.OnTransactionDateChanged();
				}
			}
		}
		
		[Column(Storage="_Detail", DbType="NChar(100)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this.OnDetailChanging(value);
					this.SendPropertyChanging();
					this._Detail = value;
					this.SendPropertyChanged("Detail");
					this.OnDetailChanged();
				}
			}
		}
		
		[Column(Storage="_Debit", DbType="Decimal(18,2) NOT NULL")]
		public decimal Debit
		{
			get
			{
				return this._Debit;
			}
			set
			{
				if ((this._Debit != value))
				{
					this.OnDebitChanging(value);
					this.SendPropertyChanging();
					this._Debit = value;
					this.SendPropertyChanged("Debit");
					this.OnDebitChanged();
				}
			}
		}
		
		[Column(Storage="_Credit", DbType="Decimal(18,2) NOT NULL")]
		public decimal Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this.OnCreditChanging(value);
					this.SendPropertyChanging();
					this._Credit = value;
					this.SendPropertyChanged("Credit");
					this.OnCreditChanged();
				}
			}
		}
		
		[Column(Storage="_Balance", DbType="Decimal(18,2) NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this.OnBalanceChanging(value);
					this.SendPropertyChanging();
					this._Balance = value;
					this.SendPropertyChanged("Balance");
					this.OnBalanceChanged();
				}
			}
		}
		
		[Column(Storage="_AllowEdit", DbType="Bit NOT NULL")]
		public bool AllowEdit
		{
			get
			{
				return this._AllowEdit;
			}
			set
			{
				if ((this._AllowEdit != value))
				{
					this.OnAllowEditChanging(value);
					this.SendPropertyChanging();
					this._AllowEdit = value;
					this.SendPropertyChanged("AllowEdit");
					this.OnAllowEditChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					if (this._SchoolProgram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolProgramIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolProgramId = value;
					this.SendPropertyChanged("SchoolProgramId");
					this.OnSchoolProgramIdChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Column(Storage="_PaymentMethodId", DbType="Int")]
		public System.Nullable<int> PaymentMethodId
		{
			get
			{
				return this._PaymentMethodId;
			}
			set
			{
				if ((this._PaymentMethodId != value))
				{
					this.OnPaymentMethodIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodId = value;
					this.SendPropertyChanged("PaymentMethodId");
					this.OnPaymentMethodIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChargeCodeCategoryId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ChargeCodeCategoryId
		{
			get
			{
				return this._ChargeCodeCategoryId;
			}
			set
			{
				if ((this._ChargeCodeCategoryId != value))
				{
					if (this._ChargeCode.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChargeCodeCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ChargeCodeCategoryId = value;
					this.SendPropertyChanged("ChargeCodeCategoryId");
					this.OnChargeCodeCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_LateFee", DbType="Int")]
		public System.Nullable<int> LateFee
		{
			get
			{
				return this._LateFee;
			}
			set
			{
				if ((this._LateFee != value))
				{
					this.OnLateFeeChanging(value);
					this.SendPropertyChanging();
					this._LateFee = value;
					this.SendPropertyChanged("LateFee");
					this.OnLateFeeChanged();
				}
			}
		}
		
		[Association(Name="ChargeCode_Ledger", Storage="_ChargeCode", ThisKey="ChargeCodeCategoryId", OtherKey="Id", IsForeignKey=true)]
		public ChargeCode ChargeCode
		{
			get
			{
				return this._ChargeCode.Entity;
			}
			set
			{
				ChargeCode previousValue = this._ChargeCode.Entity;
				if (((previousValue != value) 
							|| (this._ChargeCode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChargeCode.Entity = null;
						previousValue.Ledgers.Remove(this);
					}
					this._ChargeCode.Entity = value;
					if ((value != null))
					{
						value.Ledgers.Add(this);
						this._ChargeCodeCategoryId = value.Id;
					}
					else
					{
						this._ChargeCodeCategoryId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ChargeCode");
				}
			}
		}
		
		[Association(Name="ChildData_Ledger", Storage="_ChildData", ThisKey="ChildDataId", OtherKey="Id", IsForeignKey=true)]
		public ChildData ChildData
		{
			get
			{
				return this._ChildData.Entity;
			}
			set
			{
				ChildData previousValue = this._ChildData.Entity;
				if (((previousValue != value) 
							|| (this._ChildData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildData.Entity = null;
						previousValue.Ledgers.Remove(this);
					}
					this._ChildData.Entity = value;
					if ((value != null))
					{
						value.Ledgers.Add(this);
						this._ChildDataId = value.Id;
					}
					else
					{
						this._ChildDataId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ChildData");
				}
			}
		}
		
		[Association(Name="Payment_Ledger", Storage="_Payment", ThisKey="PaymentId", OtherKey="Id", IsForeignKey=true)]
		public Payment Payment
		{
			get
			{
				return this._Payment.Entity;
			}
			set
			{
				Payment previousValue = this._Payment.Entity;
				if (((previousValue != value) 
							|| (this._Payment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payment.Entity = null;
						previousValue.Ledgers.Remove(this);
					}
					this._Payment.Entity = value;
					if ((value != null))
					{
						value.Ledgers.Add(this);
						this._PaymentId = value.Id;
					}
					else
					{
						this._PaymentId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Payment");
				}
			}
		}
		
		[Association(Name="SchoolProgram_Ledger", Storage="_SchoolProgram", ThisKey="SchoolProgramId", OtherKey="Id", IsForeignKey=true)]
		public SchoolProgram SchoolProgram
		{
			get
			{
				return this._SchoolProgram.Entity;
			}
			set
			{
				SchoolProgram previousValue = this._SchoolProgram.Entity;
				if (((previousValue != value) 
							|| (this._SchoolProgram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolProgram.Entity = null;
						previousValue.Ledgers.Remove(this);
					}
					this._SchoolProgram.Entity = value;
					if ((value != null))
					{
						value.Ledgers.Add(this);
						this._SchoolProgramId = value.Id;
					}
					else
					{
						this._SchoolProgramId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("SchoolProgram");
				}
			}
		}
		
		[Association(Name="ChildFamily_Ledger", Storage="_ChildFamily", ThisKey="ChildFamilyId", OtherKey="Id", IsForeignKey=true)]
		public ChildFamily ChildFamily
		{
			get
			{
				return this._ChildFamily.Entity;
			}
			set
			{
				ChildFamily previousValue = this._ChildFamily.Entity;
				if (((previousValue != value) 
							|| (this._ChildFamily.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildFamily.Entity = null;
						previousValue.Ledgers.Remove(this);
					}
					this._ChildFamily.Entity = value;
					if ((value != null))
					{
						value.Ledgers.Add(this);
						this._ChildFamilyId = value.Id;
					}
					else
					{
						this._ChildFamilyId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ChildFamily");
				}
			}
		}
		
		[Association(Name="SchoolYear_Ledger", Storage="_SchoolYear", ThisKey="SchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public SchoolYear SchoolYear
		{
			get
			{
				return this._SchoolYear.Entity;
			}
			set
			{
				SchoolYear previousValue = this._SchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolYear.Entity = null;
						previousValue.Ledgers.Remove(this);
					}
					this._SchoolYear.Entity = value;
					if ((value != null))
					{
						value.Ledgers.Add(this);
						this._SchoolYearId = value.Id;
					}
					else
					{
						this._SchoolYearId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("SchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.AdditionalNotes")]
	public partial class AdditionalNote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.DateTime _CommentDate;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.DateTime> _LastMidifiedDateTime;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntityRef<ChildSchoolYear> _ChildSchoolYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnChildSchoolYearIdChanging(System.Guid value);
    partial void OnChildSchoolYearIdChanged();
    partial void OnCommentDateChanging(System.DateTime value);
    partial void OnCommentDateChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastMidifiedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastMidifiedDateTimeChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public AdditionalNote()
		{
			this._ChildSchoolYear = default(EntityRef<ChildSchoolYear>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					if (this._ChildSchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._ChildSchoolYearId = value;
					this.SendPropertyChanged("ChildSchoolYearId");
					this.OnChildSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_CommentDate", DbType="DateTime NOT NULL")]
		public System.DateTime CommentDate
		{
			get
			{
				return this._CommentDate;
			}
			set
			{
				if ((this._CommentDate != value))
				{
					this.OnCommentDateChanging(value);
					this.SendPropertyChanging();
					this._CommentDate = value;
					this.SendPropertyChanged("CommentDate");
					this.OnCommentDateChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastMidifiedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastMidifiedDateTime
		{
			get
			{
				return this._LastMidifiedDateTime;
			}
			set
			{
				if ((this._LastMidifiedDateTime != value))
				{
					this.OnLastMidifiedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastMidifiedDateTime = value;
					this.SendPropertyChanged("LastMidifiedDateTime");
					this.OnLastMidifiedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="ChildSchoolYear_AdditionalNote", Storage="_ChildSchoolYear", ThisKey="ChildSchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public ChildSchoolYear ChildSchoolYear
		{
			get
			{
				return this._ChildSchoolYear.Entity;
			}
			set
			{
				ChildSchoolYear previousValue = this._ChildSchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._ChildSchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildSchoolYear.Entity = null;
						previousValue.AdditionalNotes.Remove(this);
					}
					this._ChildSchoolYear.Entity = value;
					if ((value != null))
					{
						value.AdditionalNotes.Add(this);
						this._ChildSchoolYearId = value.Id;
					}
					else
					{
						this._ChildSchoolYearId = default(System.Guid);
					}
					this.SendPropertyChanged("ChildSchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.SchoolProgram")]
	public partial class SchoolProgram : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolYearId;
		
		private string _Title;
		
		private bool _Active;
		
		private string _Comments;
		
		private bool _IsPrimary;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private System.Nullable<System.Guid> _ProgUniqueId;
		
		private EntitySet<ProgClassCategory> _ProgClassCategories;
		
		private EntitySet<ProgStaff> _ProgStaffs;
		
		private EntitySet<ChildSchedule> _ChildSchedules;
		
		private EntitySet<SchoolProgramFeesDetail> _SchoolProgramFeesDetails;
		
		private EntitySet<ChildProgEnrollmentFeeDetail> _ChildProgEnrollmentFeeDetails;
		
		private EntitySet<ChildProgEnrollment> _ChildProgEnrollments;
		
		private EntitySet<Ledger> _Ledgers;
		
		private EntitySet<ProgClassRoom> _ProgClassRooms;
		
		private EntityRef<SchoolYear> _SchoolYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolYearIdChanging(System.Guid value);
    partial void OnSchoolYearIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnIsPrimaryChanging(bool value);
    partial void OnIsPrimaryChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    partial void OnProgUniqueIdChanging(System.Nullable<System.Guid> value);
    partial void OnProgUniqueIdChanged();
    #endregion
		
		public SchoolProgram()
		{
			this._ProgClassCategories = new EntitySet<ProgClassCategory>(new Action<ProgClassCategory>(this.attach_ProgClassCategories), new Action<ProgClassCategory>(this.detach_ProgClassCategories));
			this._ProgStaffs = new EntitySet<ProgStaff>(new Action<ProgStaff>(this.attach_ProgStaffs), new Action<ProgStaff>(this.detach_ProgStaffs));
			this._ChildSchedules = new EntitySet<ChildSchedule>(new Action<ChildSchedule>(this.attach_ChildSchedules), new Action<ChildSchedule>(this.detach_ChildSchedules));
			this._SchoolProgramFeesDetails = new EntitySet<SchoolProgramFeesDetail>(new Action<SchoolProgramFeesDetail>(this.attach_SchoolProgramFeesDetails), new Action<SchoolProgramFeesDetail>(this.detach_SchoolProgramFeesDetails));
			this._ChildProgEnrollmentFeeDetails = new EntitySet<ChildProgEnrollmentFeeDetail>(new Action<ChildProgEnrollmentFeeDetail>(this.attach_ChildProgEnrollmentFeeDetails), new Action<ChildProgEnrollmentFeeDetail>(this.detach_ChildProgEnrollmentFeeDetails));
			this._ChildProgEnrollments = new EntitySet<ChildProgEnrollment>(new Action<ChildProgEnrollment>(this.attach_ChildProgEnrollments), new Action<ChildProgEnrollment>(this.detach_ChildProgEnrollments));
			this._Ledgers = new EntitySet<Ledger>(new Action<Ledger>(this.attach_Ledgers), new Action<Ledger>(this.detach_Ledgers));
			this._ProgClassRooms = new EntitySet<ProgClassRoom>(new Action<ProgClassRoom>(this.attach_ProgClassRooms), new Action<ProgClassRoom>(this.detach_ProgClassRooms));
			this._SchoolYear = default(EntityRef<SchoolYear>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					if (this._SchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolYearId = value;
					this.SendPropertyChanged("SchoolYearId");
					this.OnSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_IsPrimary", DbType="Bit NOT NULL")]
		public bool IsPrimary
		{
			get
			{
				return this._IsPrimary;
			}
			set
			{
				if ((this._IsPrimary != value))
				{
					this.OnIsPrimaryChanging(value);
					this.SendPropertyChanging();
					this._IsPrimary = value;
					this.SendPropertyChanged("IsPrimary");
					this.OnIsPrimaryChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProgUniqueId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProgUniqueId
		{
			get
			{
				return this._ProgUniqueId;
			}
			set
			{
				if ((this._ProgUniqueId != value))
				{
					this.OnProgUniqueIdChanging(value);
					this.SendPropertyChanging();
					this._ProgUniqueId = value;
					this.SendPropertyChanged("ProgUniqueId");
					this.OnProgUniqueIdChanged();
				}
			}
		}
		
		[Association(Name="SchoolProgram_ProgClassCategory", Storage="_ProgClassCategories", ThisKey="Id", OtherKey="SchoolProgramId")]
		public EntitySet<ProgClassCategory> ProgClassCategories
		{
			get
			{
				return this._ProgClassCategories;
			}
			set
			{
				this._ProgClassCategories.Assign(value);
			}
		}
		
		[Association(Name="SchoolProgram_ProgStaff", Storage="_ProgStaffs", ThisKey="Id", OtherKey="SchoolProgramId")]
		public EntitySet<ProgStaff> ProgStaffs
		{
			get
			{
				return this._ProgStaffs;
			}
			set
			{
				this._ProgStaffs.Assign(value);
			}
		}
		
		[Association(Name="SchoolProgram_ChildSchedule", Storage="_ChildSchedules", ThisKey="Id", OtherKey="SchoolProgramId")]
		public EntitySet<ChildSchedule> ChildSchedules
		{
			get
			{
				return this._ChildSchedules;
			}
			set
			{
				this._ChildSchedules.Assign(value);
			}
		}
		
		[Association(Name="SchoolProgram_SchoolProgramFeesDetail", Storage="_SchoolProgramFeesDetails", ThisKey="Id", OtherKey="SchoolProgramId")]
		public EntitySet<SchoolProgramFeesDetail> SchoolProgramFeesDetails
		{
			get
			{
				return this._SchoolProgramFeesDetails;
			}
			set
			{
				this._SchoolProgramFeesDetails.Assign(value);
			}
		}
		
		[Association(Name="SchoolProgram_ChildProgEnrollmentFeeDetail", Storage="_ChildProgEnrollmentFeeDetails", ThisKey="Id", OtherKey="SchoolProgramId")]
		public EntitySet<ChildProgEnrollmentFeeDetail> ChildProgEnrollmentFeeDetails
		{
			get
			{
				return this._ChildProgEnrollmentFeeDetails;
			}
			set
			{
				this._ChildProgEnrollmentFeeDetails.Assign(value);
			}
		}
		
		[Association(Name="SchoolProgram_ChildProgEnrollment", Storage="_ChildProgEnrollments", ThisKey="Id", OtherKey="SchoolProgramId")]
		public EntitySet<ChildProgEnrollment> ChildProgEnrollments
		{
			get
			{
				return this._ChildProgEnrollments;
			}
			set
			{
				this._ChildProgEnrollments.Assign(value);
			}
		}
		
		[Association(Name="SchoolProgram_Ledger", Storage="_Ledgers", ThisKey="Id", OtherKey="SchoolProgramId")]
		public EntitySet<Ledger> Ledgers
		{
			get
			{
				return this._Ledgers;
			}
			set
			{
				this._Ledgers.Assign(value);
			}
		}
		
		[Association(Name="SchoolProgram_ProgClassRoom", Storage="_ProgClassRooms", ThisKey="Id", OtherKey="SchoolProgramId")]
		public EntitySet<ProgClassRoom> ProgClassRooms
		{
			get
			{
				return this._ProgClassRooms;
			}
			set
			{
				this._ProgClassRooms.Assign(value);
			}
		}
		
		[Association(Name="SchoolYear_SchoolProgram", Storage="_SchoolYear", ThisKey="SchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public SchoolYear SchoolYear
		{
			get
			{
				return this._SchoolYear.Entity;
			}
			set
			{
				SchoolYear previousValue = this._SchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolYear.Entity = null;
						previousValue.SchoolPrograms.Remove(this);
					}
					this._SchoolYear.Entity = value;
					if ((value != null))
					{
						value.SchoolPrograms.Add(this);
						this._SchoolYearId = value.Id;
					}
					else
					{
						this._SchoolYearId = default(System.Guid);
					}
					this.SendPropertyChanged("SchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProgClassCategories(ProgClassCategory entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = this;
		}
		
		private void detach_ProgClassCategories(ProgClassCategory entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = null;
		}
		
		private void attach_ProgStaffs(ProgStaff entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = this;
		}
		
		private void detach_ProgStaffs(ProgStaff entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = null;
		}
		
		private void attach_ChildSchedules(ChildSchedule entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = this;
		}
		
		private void detach_ChildSchedules(ChildSchedule entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = null;
		}
		
		private void attach_SchoolProgramFeesDetails(SchoolProgramFeesDetail entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = this;
		}
		
		private void detach_SchoolProgramFeesDetails(SchoolProgramFeesDetail entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = null;
		}
		
		private void attach_ChildProgEnrollmentFeeDetails(ChildProgEnrollmentFeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = this;
		}
		
		private void detach_ChildProgEnrollmentFeeDetails(ChildProgEnrollmentFeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = null;
		}
		
		private void attach_ChildProgEnrollments(ChildProgEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = this;
		}
		
		private void detach_ChildProgEnrollments(ChildProgEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = null;
		}
		
		private void attach_Ledgers(Ledger entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = this;
		}
		
		private void detach_Ledgers(Ledger entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = null;
		}
		
		private void attach_ProgClassRooms(ProgClassRoom entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = this;
		}
		
		private void detach_ProgClassRooms(ProgClassRoom entity)
		{
			this.SendPropertyChanging();
			entity.SchoolProgram = null;
		}
	}
	
	[Table(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _UserGroupId;
		
		private System.Guid _StaffCategoryId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private string _Zip;
		
		private System.Nullable<System.Guid> _StateId;
		
		private System.Nullable<System.Guid> _CountryId;
		
		private string _MainPhone;
		
		private string _SecondaryPhone;
		
		private string _Email;
		
		private string _UserName;
		
		private string _Password;
		
		private string _code;
		
		private bool _gender;
		
		private string _SecurityQuestion;
		
		private string _SecurityAnswer;
		
		private string _Photo;
		
		private string _Comments;
		
		private string _Message;
		
		private System.Nullable<System.Guid> _EmploymentStatusId;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntitySet<ProgStaff> _ProgStaffs;
		
		private EntitySet<StaffSchoolYear> _StaffSchoolYears;
		
		private EntityRef<EmploymentStatus> _EmploymentStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUserGroupIdChanging(System.Guid value);
    partial void OnUserGroupIdChanged();
    partial void OnStaffCategoryIdChanging(System.Guid value);
    partial void OnStaffCategoryIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnStateIdChanging(System.Nullable<System.Guid> value);
    partial void OnStateIdChanged();
    partial void OnCountryIdChanging(System.Nullable<System.Guid> value);
    partial void OnCountryIdChanged();
    partial void OnMainPhoneChanging(string value);
    partial void OnMainPhoneChanged();
    partial void OnSecondaryPhoneChanging(string value);
    partial void OnSecondaryPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    partial void OngenderChanging(bool value);
    partial void OngenderChanged();
    partial void OnSecurityQuestionChanging(string value);
    partial void OnSecurityQuestionChanged();
    partial void OnSecurityAnswerChanging(string value);
    partial void OnSecurityAnswerChanged();
    partial void OnPhotoChanging(string value);
    partial void OnPhotoChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnEmploymentStatusIdChanging(System.Nullable<System.Guid> value);
    partial void OnEmploymentStatusIdChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public Staff()
		{
			this._ProgStaffs = new EntitySet<ProgStaff>(new Action<ProgStaff>(this.attach_ProgStaffs), new Action<ProgStaff>(this.detach_ProgStaffs));
			this._StaffSchoolYears = new EntitySet<StaffSchoolYear>(new Action<StaffSchoolYear>(this.attach_StaffSchoolYears), new Action<StaffSchoolYear>(this.detach_StaffSchoolYears));
			this._EmploymentStatus = default(EntityRef<EmploymentStatus>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserGroupId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserGroupId
		{
			get
			{
				return this._UserGroupId;
			}
			set
			{
				if ((this._UserGroupId != value))
				{
					this.OnUserGroupIdChanging(value);
					this.SendPropertyChanging();
					this._UserGroupId = value;
					this.SendPropertyChanged("UserGroupId");
					this.OnUserGroupIdChanged();
				}
			}
		}
		
		[Column(Storage="_StaffCategoryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StaffCategoryId
		{
			get
			{
				return this._StaffCategoryId;
			}
			set
			{
				if ((this._StaffCategoryId != value))
				{
					this.OnStaffCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._StaffCategoryId = value;
					this.SendPropertyChanged("StaffCategoryId");
					this.OnStaffCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Address1", DbType="NVarChar(50)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[Column(Storage="_Address2", DbType="NVarChar(50)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="NVarChar(10)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Column(Storage="_StateId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[Column(Storage="_CountryId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[Column(Storage="_MainPhone", DbType="NVarChar(20)")]
		public string MainPhone
		{
			get
			{
				return this._MainPhone;
			}
			set
			{
				if ((this._MainPhone != value))
				{
					this.OnMainPhoneChanging(value);
					this.SendPropertyChanging();
					this._MainPhone = value;
					this.SendPropertyChanged("MainPhone");
					this.OnMainPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_SecondaryPhone", DbType="NVarChar(20)")]
		public string SecondaryPhone
		{
			get
			{
				return this._SecondaryPhone;
			}
			set
			{
				if ((this._SecondaryPhone != value))
				{
					this.OnSecondaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._SecondaryPhone = value;
					this.SendPropertyChanged("SecondaryPhone");
					this.OnSecondaryPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_code", DbType="NVarChar(50)")]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[Column(Storage="_gender", DbType="Bit NOT NULL")]
		public bool gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityQuestion", DbType="NVarChar(200)")]
		public string SecurityQuestion
		{
			get
			{
				return this._SecurityQuestion;
			}
			set
			{
				if ((this._SecurityQuestion != value))
				{
					this.OnSecurityQuestionChanging(value);
					this.SendPropertyChanging();
					this._SecurityQuestion = value;
					this.SendPropertyChanged("SecurityQuestion");
					this.OnSecurityQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityAnswer", DbType="NVarChar(200)")]
		public string SecurityAnswer
		{
			get
			{
				return this._SecurityAnswer;
			}
			set
			{
				if ((this._SecurityAnswer != value))
				{
					this.OnSecurityAnswerChanging(value);
					this.SendPropertyChanging();
					this._SecurityAnswer = value;
					this.SendPropertyChanged("SecurityAnswer");
					this.OnSecurityAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="NVarChar(100)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this.OnPhotoChanging(value);
					this.SendPropertyChanging();
					this._Photo = value;
					this.SendPropertyChanged("Photo");
					this.OnPhotoChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="NVarChar(500)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_EmploymentStatusId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EmploymentStatusId
		{
			get
			{
				return this._EmploymentStatusId;
			}
			set
			{
				if ((this._EmploymentStatusId != value))
				{
					if (this._EmploymentStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmploymentStatusIdChanging(value);
					this.SendPropertyChanging();
					this._EmploymentStatusId = value;
					this.SendPropertyChanged("EmploymentStatusId");
					this.OnEmploymentStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="Staff_ProgStaff", Storage="_ProgStaffs", ThisKey="Id", OtherKey="StaffId")]
		public EntitySet<ProgStaff> ProgStaffs
		{
			get
			{
				return this._ProgStaffs;
			}
			set
			{
				this._ProgStaffs.Assign(value);
			}
		}
		
		[Association(Name="Staff_StaffSchoolYear", Storage="_StaffSchoolYears", ThisKey="Id", OtherKey="StaffId")]
		public EntitySet<StaffSchoolYear> StaffSchoolYears
		{
			get
			{
				return this._StaffSchoolYears;
			}
			set
			{
				this._StaffSchoolYears.Assign(value);
			}
		}
		
		[Association(Name="EmploymentStatus_Staff", Storage="_EmploymentStatus", ThisKey="EmploymentStatusId", OtherKey="Id", IsForeignKey=true)]
		public EmploymentStatus EmploymentStatus
		{
			get
			{
				return this._EmploymentStatus.Entity;
			}
			set
			{
				EmploymentStatus previousValue = this._EmploymentStatus.Entity;
				if (((previousValue != value) 
							|| (this._EmploymentStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmploymentStatus.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._EmploymentStatus.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._EmploymentStatusId = value.Id;
					}
					else
					{
						this._EmploymentStatusId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("EmploymentStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProgStaffs(ProgStaff entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_ProgStaffs(ProgStaff entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_StaffSchoolYears(StaffSchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_StaffSchoolYears(StaffSchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[Table(Name="dbo.StaffSchoolYear")]
	public partial class StaffSchoolYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _StaffId;
		
		private System.Guid _SchoolYearId;
		
		private System.Nullable<bool> _active;
		
		private EntitySet<StaffAttendenceHistory> _StaffAttendenceHistories;
		
		private EntityRef<Staff> _Staff;
		
		private EntityRef<SchoolYear> _SchoolYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnStaffIdChanging(System.Guid value);
    partial void OnStaffIdChanged();
    partial void OnSchoolYearIdChanging(System.Guid value);
    partial void OnSchoolYearIdChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    #endregion
		
		public StaffSchoolYear()
		{
			this._StaffAttendenceHistories = new EntitySet<StaffAttendenceHistory>(new Action<StaffAttendenceHistory>(this.attach_StaffAttendenceHistories), new Action<StaffAttendenceHistory>(this.detach_StaffAttendenceHistories));
			this._Staff = default(EntityRef<Staff>);
			this._SchoolYear = default(EntityRef<SchoolYear>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_StaffId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					if (this._SchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolYearId = value;
					this.SendPropertyChanged("SchoolYearId");
					this.OnSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[Association(Name="StaffSchoolYear_StaffAttendenceHistory", Storage="_StaffAttendenceHistories", ThisKey="Id", OtherKey="StaffSchoolYearId")]
		public EntitySet<StaffAttendenceHistory> StaffAttendenceHistories
		{
			get
			{
				return this._StaffAttendenceHistories;
			}
			set
			{
				this._StaffAttendenceHistories.Assign(value);
			}
		}
		
		[Association(Name="Staff_StaffSchoolYear", Storage="_Staff", ThisKey="StaffId", OtherKey="Id", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.StaffSchoolYears.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.StaffSchoolYears.Add(this);
						this._StaffId = value.Id;
					}
					else
					{
						this._StaffId = default(System.Guid);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		[Association(Name="SchoolYear_StaffSchoolYear", Storage="_SchoolYear", ThisKey="SchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public SchoolYear SchoolYear
		{
			get
			{
				return this._SchoolYear.Entity;
			}
			set
			{
				SchoolYear previousValue = this._SchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolYear.Entity = null;
						previousValue.StaffSchoolYears.Remove(this);
					}
					this._SchoolYear.Entity = value;
					if ((value != null))
					{
						value.StaffSchoolYears.Add(this);
						this._SchoolYearId = value.Id;
					}
					else
					{
						this._SchoolYearId = default(System.Guid);
					}
					this.SendPropertyChanged("SchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StaffAttendenceHistories(StaffAttendenceHistory entity)
		{
			this.SendPropertyChanging();
			entity.StaffSchoolYear = this;
		}
		
		private void detach_StaffAttendenceHistories(StaffAttendenceHistory entity)
		{
			this.SendPropertyChanging();
			entity.StaffSchoolYear = null;
		}
	}
	
	[Table(Name="dbo.ChildFamily")]
	public partial class ChildFamily : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolId;
		
		private string _FamilyTitle;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Code;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private System.Nullable<System.Guid> _StateId;
		
		private string _Zip;
		
		private string _HomePhone;
		
		private string _Comments;
		
		private string _MsgDisplayed;
		
		private System.Nullable<System.DateTime> _MsgStartDate;
		
		private System.Nullable<System.DateTime> _MsgEndDate;
		
		private System.Nullable<bool> _MsgActive;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private EntitySet<FamilyData> _FamilyDatas;
		
		private EntitySet<Payment> _Payments;
		
		private EntitySet<ChildProgEnrollmentFeeDetail> _ChildProgEnrollmentFeeDetails;
		
		private EntitySet<ChildData> _ChildDatas;
		
		private EntitySet<Ledger> _Ledgers;
		
		private EntitySet<ChildFamilySchoolYear> _ChildFamilySchoolYears;
		
		private EntityRef<State> _State;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolIdChanging(System.Guid value);
    partial void OnSchoolIdChanged();
    partial void OnFamilyTitleChanging(string value);
    partial void OnFamilyTitleChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateIdChanging(System.Nullable<System.Guid> value);
    partial void OnStateIdChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnHomePhoneChanging(string value);
    partial void OnHomePhoneChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnMsgDisplayedChanging(string value);
    partial void OnMsgDisplayedChanged();
    partial void OnMsgStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMsgStartDateChanged();
    partial void OnMsgEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnMsgEndDateChanged();
    partial void OnMsgActiveChanging(System.Nullable<bool> value);
    partial void OnMsgActiveChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    #endregion
		
		public ChildFamily()
		{
			this._FamilyDatas = new EntitySet<FamilyData>(new Action<FamilyData>(this.attach_FamilyDatas), new Action<FamilyData>(this.detach_FamilyDatas));
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._ChildProgEnrollmentFeeDetails = new EntitySet<ChildProgEnrollmentFeeDetail>(new Action<ChildProgEnrollmentFeeDetail>(this.attach_ChildProgEnrollmentFeeDetails), new Action<ChildProgEnrollmentFeeDetail>(this.detach_ChildProgEnrollmentFeeDetails));
			this._ChildDatas = new EntitySet<ChildData>(new Action<ChildData>(this.attach_ChildDatas), new Action<ChildData>(this.detach_ChildDatas));
			this._Ledgers = new EntitySet<Ledger>(new Action<Ledger>(this.attach_Ledgers), new Action<Ledger>(this.detach_Ledgers));
			this._ChildFamilySchoolYears = new EntitySet<ChildFamilySchoolYear>(new Action<ChildFamilySchoolYear>(this.attach_ChildFamilySchoolYears), new Action<ChildFamilySchoolYear>(this.detach_ChildFamilySchoolYears));
			this._State = default(EntityRef<State>);
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[Column(Storage="_FamilyTitle", DbType="NVarChar(500)")]
		public string FamilyTitle
		{
			get
			{
				return this._FamilyTitle;
			}
			set
			{
				if ((this._FamilyTitle != value))
				{
					this.OnFamilyTitleChanging(value);
					this.SendPropertyChanging();
					this._FamilyTitle = value;
					this.SendPropertyChanged("FamilyTitle");
					this.OnFamilyTitleChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Address1", DbType="NVarChar(200)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[Column(Storage="_Address2", DbType="NVarChar(200)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_StateId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="NVarChar(10)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Column(Storage="_HomePhone", DbType="NVarChar(20)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this.OnHomePhoneChanging(value);
					this.SendPropertyChanging();
					this._HomePhone = value;
					this.SendPropertyChanged("HomePhone");
					this.OnHomePhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_MsgDisplayed", DbType="NVarChar(500)")]
		public string MsgDisplayed
		{
			get
			{
				return this._MsgDisplayed;
			}
			set
			{
				if ((this._MsgDisplayed != value))
				{
					this.OnMsgDisplayedChanging(value);
					this.SendPropertyChanging();
					this._MsgDisplayed = value;
					this.SendPropertyChanged("MsgDisplayed");
					this.OnMsgDisplayedChanged();
				}
			}
		}
		
		[Column(Storage="_MsgStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MsgStartDate
		{
			get
			{
				return this._MsgStartDate;
			}
			set
			{
				if ((this._MsgStartDate != value))
				{
					this.OnMsgStartDateChanging(value);
					this.SendPropertyChanging();
					this._MsgStartDate = value;
					this.SendPropertyChanged("MsgStartDate");
					this.OnMsgStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_MsgEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MsgEndDate
		{
			get
			{
				return this._MsgEndDate;
			}
			set
			{
				if ((this._MsgEndDate != value))
				{
					this.OnMsgEndDateChanging(value);
					this.SendPropertyChanging();
					this._MsgEndDate = value;
					this.SendPropertyChanged("MsgEndDate");
					this.OnMsgEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_MsgActive", DbType="Bit")]
		public System.Nullable<bool> MsgActive
		{
			get
			{
				return this._MsgActive;
			}
			set
			{
				if ((this._MsgActive != value))
				{
					this.OnMsgActiveChanging(value);
					this.SendPropertyChanging();
					this._MsgActive = value;
					this.SendPropertyChanged("MsgActive");
					this.OnMsgActiveChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Association(Name="ChildFamily_FamilyData", Storage="_FamilyDatas", ThisKey="Id", OtherKey="ChildFamilyId")]
		public EntitySet<FamilyData> FamilyDatas
		{
			get
			{
				return this._FamilyDatas;
			}
			set
			{
				this._FamilyDatas.Assign(value);
			}
		}
		
		[Association(Name="ChildFamily_Payment", Storage="_Payments", ThisKey="Id", OtherKey="ChildFamilyId")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[Association(Name="ChildFamily_ChildProgEnrollmentFeeDetail", Storage="_ChildProgEnrollmentFeeDetails", ThisKey="Id", OtherKey="ChildFamilyId")]
		public EntitySet<ChildProgEnrollmentFeeDetail> ChildProgEnrollmentFeeDetails
		{
			get
			{
				return this._ChildProgEnrollmentFeeDetails;
			}
			set
			{
				this._ChildProgEnrollmentFeeDetails.Assign(value);
			}
		}
		
		[Association(Name="ChildFamily_ChildData", Storage="_ChildDatas", ThisKey="Id", OtherKey="ChildFamilyId")]
		public EntitySet<ChildData> ChildDatas
		{
			get
			{
				return this._ChildDatas;
			}
			set
			{
				this._ChildDatas.Assign(value);
			}
		}
		
		[Association(Name="ChildFamily_Ledger", Storage="_Ledgers", ThisKey="Id", OtherKey="ChildFamilyId")]
		public EntitySet<Ledger> Ledgers
		{
			get
			{
				return this._Ledgers;
			}
			set
			{
				this._Ledgers.Assign(value);
			}
		}
		
		[Association(Name="ChildFamily_ChildFamilySchoolYear", Storage="_ChildFamilySchoolYears", ThisKey="Id", OtherKey="ChildFamilyId")]
		public EntitySet<ChildFamilySchoolYear> ChildFamilySchoolYears
		{
			get
			{
				return this._ChildFamilySchoolYears;
			}
			set
			{
				this._ChildFamilySchoolYears.Assign(value);
			}
		}
		
		[Association(Name="State_ChildFamily", Storage="_State", ThisKey="StateId", OtherKey="Id", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.ChildFamilies.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.ChildFamilies.Add(this);
						this._StateId = value.Id;
					}
					else
					{
						this._StateId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		[Association(Name="School_ChildFamily", Storage="_School", ThisKey="SchoolId", OtherKey="Id", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.ChildFamilies.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.ChildFamilies.Add(this);
						this._SchoolId = value.Id;
					}
					else
					{
						this._SchoolId = default(System.Guid);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FamilyDatas(FamilyData entity)
		{
			this.SendPropertyChanging();
			entity.ChildFamily = this;
		}
		
		private void detach_FamilyDatas(FamilyData entity)
		{
			this.SendPropertyChanging();
			entity.ChildFamily = null;
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.ChildFamily = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.ChildFamily = null;
		}
		
		private void attach_ChildProgEnrollmentFeeDetails(ChildProgEnrollmentFeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.ChildFamily = this;
		}
		
		private void detach_ChildProgEnrollmentFeeDetails(ChildProgEnrollmentFeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.ChildFamily = null;
		}
		
		private void attach_ChildDatas(ChildData entity)
		{
			this.SendPropertyChanging();
			entity.ChildFamily = this;
		}
		
		private void detach_ChildDatas(ChildData entity)
		{
			this.SendPropertyChanging();
			entity.ChildFamily = null;
		}
		
		private void attach_Ledgers(Ledger entity)
		{
			this.SendPropertyChanging();
			entity.ChildFamily = this;
		}
		
		private void detach_Ledgers(Ledger entity)
		{
			this.SendPropertyChanging();
			entity.ChildFamily = null;
		}
		
		private void attach_ChildFamilySchoolYears(ChildFamilySchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.ChildFamily = this;
		}
		
		private void detach_ChildFamilySchoolYears(ChildFamilySchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.ChildFamily = null;
		}
	}
	
	[Table(Name="dbo.ChildSchoolYear")]
	public partial class ChildSchoolYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _ChildDataId;
		
		private System.Guid _SchoolYearId;
		
		private System.Nullable<bool> _active;
		
		private EntitySet<ChildAbsentHistory> _ChildAbsentHistories;
		
		private EntitySet<ChildAttendenceHistory> _ChildAttendenceHistories;
		
		private EntitySet<ChildProgEnrollmentFeeDetail> _ChildProgEnrollmentFeeDetails;
		
		private EntitySet<ChildProgEnrollment> _ChildProgEnrollments;
		
		private EntitySet<ChildEnrollmentStatus> _ChildEnrollmentStatus;
		
		private EntitySet<AdditionalNote> _AdditionalNotes;
		
		private EntityRef<ChildData> _ChildData;
		
		private EntityRef<SchoolYear> _SchoolYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnChildDataIdChanging(System.Guid value);
    partial void OnChildDataIdChanged();
    partial void OnSchoolYearIdChanging(System.Guid value);
    partial void OnSchoolYearIdChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    #endregion
		
		public ChildSchoolYear()
		{
			this._ChildAbsentHistories = new EntitySet<ChildAbsentHistory>(new Action<ChildAbsentHistory>(this.attach_ChildAbsentHistories), new Action<ChildAbsentHistory>(this.detach_ChildAbsentHistories));
			this._ChildAttendenceHistories = new EntitySet<ChildAttendenceHistory>(new Action<ChildAttendenceHistory>(this.attach_ChildAttendenceHistories), new Action<ChildAttendenceHistory>(this.detach_ChildAttendenceHistories));
			this._ChildProgEnrollmentFeeDetails = new EntitySet<ChildProgEnrollmentFeeDetail>(new Action<ChildProgEnrollmentFeeDetail>(this.attach_ChildProgEnrollmentFeeDetails), new Action<ChildProgEnrollmentFeeDetail>(this.detach_ChildProgEnrollmentFeeDetails));
			this._ChildProgEnrollments = new EntitySet<ChildProgEnrollment>(new Action<ChildProgEnrollment>(this.attach_ChildProgEnrollments), new Action<ChildProgEnrollment>(this.detach_ChildProgEnrollments));
			this._ChildEnrollmentStatus = new EntitySet<ChildEnrollmentStatus>(new Action<ChildEnrollmentStatus>(this.attach_ChildEnrollmentStatus), new Action<ChildEnrollmentStatus>(this.detach_ChildEnrollmentStatus));
			this._AdditionalNotes = new EntitySet<AdditionalNote>(new Action<AdditionalNote>(this.attach_AdditionalNotes), new Action<AdditionalNote>(this.detach_AdditionalNotes));
			this._ChildData = default(EntityRef<ChildData>);
			this._SchoolYear = default(EntityRef<SchoolYear>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildDataId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildDataId
		{
			get
			{
				return this._ChildDataId;
			}
			set
			{
				if ((this._ChildDataId != value))
				{
					if (this._ChildData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildDataIdChanging(value);
					this.SendPropertyChanging();
					this._ChildDataId = value;
					this.SendPropertyChanged("ChildDataId");
					this.OnChildDataIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					if (this._SchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolYearId = value;
					this.SendPropertyChanged("SchoolYearId");
					this.OnSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[Association(Name="ChildSchoolYear_ChildAbsentHistory", Storage="_ChildAbsentHistories", ThisKey="Id", OtherKey="ChildSchoolYearId")]
		public EntitySet<ChildAbsentHistory> ChildAbsentHistories
		{
			get
			{
				return this._ChildAbsentHistories;
			}
			set
			{
				this._ChildAbsentHistories.Assign(value);
			}
		}
		
		[Association(Name="ChildSchoolYear_ChildAttendenceHistory", Storage="_ChildAttendenceHistories", ThisKey="Id", OtherKey="ChildSchoolYearId")]
		public EntitySet<ChildAttendenceHistory> ChildAttendenceHistories
		{
			get
			{
				return this._ChildAttendenceHistories;
			}
			set
			{
				this._ChildAttendenceHistories.Assign(value);
			}
		}
		
		[Association(Name="ChildSchoolYear_ChildProgEnrollmentFeeDetail", Storage="_ChildProgEnrollmentFeeDetails", ThisKey="Id", OtherKey="ChildSchoolYearId")]
		public EntitySet<ChildProgEnrollmentFeeDetail> ChildProgEnrollmentFeeDetails
		{
			get
			{
				return this._ChildProgEnrollmentFeeDetails;
			}
			set
			{
				this._ChildProgEnrollmentFeeDetails.Assign(value);
			}
		}
		
		[Association(Name="ChildSchoolYear_ChildProgEnrollment", Storage="_ChildProgEnrollments", ThisKey="Id", OtherKey="ChildSchoolYearId")]
		public EntitySet<ChildProgEnrollment> ChildProgEnrollments
		{
			get
			{
				return this._ChildProgEnrollments;
			}
			set
			{
				this._ChildProgEnrollments.Assign(value);
			}
		}
		
		[Association(Name="ChildSchoolYear_ChildEnrollmentStatus", Storage="_ChildEnrollmentStatus", ThisKey="Id", OtherKey="ChildSchoolYearId")]
		public EntitySet<ChildEnrollmentStatus> ChildEnrollmentStatus
		{
			get
			{
				return this._ChildEnrollmentStatus;
			}
			set
			{
				this._ChildEnrollmentStatus.Assign(value);
			}
		}
		
		[Association(Name="ChildSchoolYear_AdditionalNote", Storage="_AdditionalNotes", ThisKey="Id", OtherKey="ChildSchoolYearId")]
		public EntitySet<AdditionalNote> AdditionalNotes
		{
			get
			{
				return this._AdditionalNotes;
			}
			set
			{
				this._AdditionalNotes.Assign(value);
			}
		}
		
		[Association(Name="ChildData_ChildSchoolYear", Storage="_ChildData", ThisKey="ChildDataId", OtherKey="Id", IsForeignKey=true)]
		public ChildData ChildData
		{
			get
			{
				return this._ChildData.Entity;
			}
			set
			{
				ChildData previousValue = this._ChildData.Entity;
				if (((previousValue != value) 
							|| (this._ChildData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildData.Entity = null;
						previousValue.ChildSchoolYears.Remove(this);
					}
					this._ChildData.Entity = value;
					if ((value != null))
					{
						value.ChildSchoolYears.Add(this);
						this._ChildDataId = value.Id;
					}
					else
					{
						this._ChildDataId = default(System.Guid);
					}
					this.SendPropertyChanged("ChildData");
				}
			}
		}
		
		[Association(Name="SchoolYear_ChildSchoolYear", Storage="_SchoolYear", ThisKey="SchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public SchoolYear SchoolYear
		{
			get
			{
				return this._SchoolYear.Entity;
			}
			set
			{
				SchoolYear previousValue = this._SchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolYear.Entity = null;
						previousValue.ChildSchoolYears.Remove(this);
					}
					this._SchoolYear.Entity = value;
					if ((value != null))
					{
						value.ChildSchoolYears.Add(this);
						this._SchoolYearId = value.Id;
					}
					else
					{
						this._SchoolYearId = default(System.Guid);
					}
					this.SendPropertyChanged("SchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChildAbsentHistories(ChildAbsentHistory entity)
		{
			this.SendPropertyChanging();
			entity.ChildSchoolYear = this;
		}
		
		private void detach_ChildAbsentHistories(ChildAbsentHistory entity)
		{
			this.SendPropertyChanging();
			entity.ChildSchoolYear = null;
		}
		
		private void attach_ChildAttendenceHistories(ChildAttendenceHistory entity)
		{
			this.SendPropertyChanging();
			entity.ChildSchoolYear = this;
		}
		
		private void detach_ChildAttendenceHistories(ChildAttendenceHistory entity)
		{
			this.SendPropertyChanging();
			entity.ChildSchoolYear = null;
		}
		
		private void attach_ChildProgEnrollmentFeeDetails(ChildProgEnrollmentFeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.ChildSchoolYear = this;
		}
		
		private void detach_ChildProgEnrollmentFeeDetails(ChildProgEnrollmentFeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.ChildSchoolYear = null;
		}
		
		private void attach_ChildProgEnrollments(ChildProgEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.ChildSchoolYear = this;
		}
		
		private void detach_ChildProgEnrollments(ChildProgEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.ChildSchoolYear = null;
		}
		
		private void attach_ChildEnrollmentStatus(ChildEnrollmentStatus entity)
		{
			this.SendPropertyChanging();
			entity.ChildSchoolYear = this;
		}
		
		private void detach_ChildEnrollmentStatus(ChildEnrollmentStatus entity)
		{
			this.SendPropertyChanging();
			entity.ChildSchoolYear = null;
		}
		
		private void attach_AdditionalNotes(AdditionalNote entity)
		{
			this.SendPropertyChanging();
			entity.ChildSchoolYear = this;
		}
		
		private void detach_AdditionalNotes(AdditionalNote entity)
		{
			this.SendPropertyChanging();
			entity.ChildSchoolYear = null;
		}
	}
	
	[Table(Name="dbo.School")]
	public partial class School : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Name;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private string _Zip;
		
		private System.Nullable<System.Guid> _StateId;
		
		private System.Nullable<System.Guid> _CountryId;
		
		private string _MainPhone;
		
		private string _SecondaryPhone;
		
		private string _Fax;
		
		private string _Email;
		
		private string _WebSite;
		
		private System.Nullable<System.Guid> _TimeZoneId;
		
		private bool _CodeRequired;
		
		private string _Comments;
		
		private string _iPadHeader;
		
		private string _iPadHeaderFont;
		
		private System.Nullable<int> _iPadHeaderFontSize;
		
		private string _iPadHeaderColor;
		
		private string _iPadMessage;
		
		private string _iPadMessageFont;
		
		private System.Nullable<int> _iPadMessageFontSize;
		
		private string _iPadBackgroundImage;
		
		private string _iPadMessageColor;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private System.Nullable<decimal> _LateFeeAmount;
		
		private System.Nullable<bool> _active;
		
		private EntitySet<AbsentReason> _AbsentReasons;
		
		private EntitySet<ClassCategory> _ClassCategories;
		
		private EntitySet<EnrollmentStatus> _EnrollmentStatus;
		
		private EntitySet<Relationship> _Relationships;
		
		private EntitySet<StaffCategory> _StaffCategories;
		
		private EntitySet<UserGroup> _UserGroups;
		
		private EntitySet<ClassRoom> _ClassRooms;
		
		private EntitySet<HoursOfOperation> _HoursOfOperations;
		
		private EntitySet<EmploymentStatus> _EmploymentStatus;
		
		private EntitySet<ChildFamily> _ChildFamilies;
		
		private EntitySet<SchoolYear> _SchoolYears;
		
		private EntityRef<Country> _Country;
		
		private EntityRef<State> _State;
		
		private EntityRef<TimeZone> _TimeZone;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnStateIdChanging(System.Nullable<System.Guid> value);
    partial void OnStateIdChanged();
    partial void OnCountryIdChanging(System.Nullable<System.Guid> value);
    partial void OnCountryIdChanged();
    partial void OnMainPhoneChanging(string value);
    partial void OnMainPhoneChanged();
    partial void OnSecondaryPhoneChanging(string value);
    partial void OnSecondaryPhoneChanged();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnWebSiteChanging(string value);
    partial void OnWebSiteChanged();
    partial void OnTimeZoneIdChanging(System.Nullable<System.Guid> value);
    partial void OnTimeZoneIdChanged();
    partial void OnCodeRequiredChanging(bool value);
    partial void OnCodeRequiredChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OniPadHeaderChanging(string value);
    partial void OniPadHeaderChanged();
    partial void OniPadHeaderFontChanging(string value);
    partial void OniPadHeaderFontChanged();
    partial void OniPadHeaderFontSizeChanging(System.Nullable<int> value);
    partial void OniPadHeaderFontSizeChanged();
    partial void OniPadHeaderColorChanging(string value);
    partial void OniPadHeaderColorChanged();
    partial void OniPadMessageChanging(string value);
    partial void OniPadMessageChanged();
    partial void OniPadMessageFontChanging(string value);
    partial void OniPadMessageFontChanged();
    partial void OniPadMessageFontSizeChanging(System.Nullable<int> value);
    partial void OniPadMessageFontSizeChanged();
    partial void OniPadBackgroundImageChanging(string value);
    partial void OniPadBackgroundImageChanged();
    partial void OniPadMessageColorChanging(string value);
    partial void OniPadMessageColorChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    partial void OnLateFeeAmountChanging(System.Nullable<decimal> value);
    partial void OnLateFeeAmountChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    #endregion
		
		public School()
		{
			this._AbsentReasons = new EntitySet<AbsentReason>(new Action<AbsentReason>(this.attach_AbsentReasons), new Action<AbsentReason>(this.detach_AbsentReasons));
			this._ClassCategories = new EntitySet<ClassCategory>(new Action<ClassCategory>(this.attach_ClassCategories), new Action<ClassCategory>(this.detach_ClassCategories));
			this._EnrollmentStatus = new EntitySet<EnrollmentStatus>(new Action<EnrollmentStatus>(this.attach_EnrollmentStatus), new Action<EnrollmentStatus>(this.detach_EnrollmentStatus));
			this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
			this._StaffCategories = new EntitySet<StaffCategory>(new Action<StaffCategory>(this.attach_StaffCategories), new Action<StaffCategory>(this.detach_StaffCategories));
			this._UserGroups = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroups), new Action<UserGroup>(this.detach_UserGroups));
			this._ClassRooms = new EntitySet<ClassRoom>(new Action<ClassRoom>(this.attach_ClassRooms), new Action<ClassRoom>(this.detach_ClassRooms));
			this._HoursOfOperations = new EntitySet<HoursOfOperation>(new Action<HoursOfOperation>(this.attach_HoursOfOperations), new Action<HoursOfOperation>(this.detach_HoursOfOperations));
			this._EmploymentStatus = new EntitySet<EmploymentStatus>(new Action<EmploymentStatus>(this.attach_EmploymentStatus), new Action<EmploymentStatus>(this.detach_EmploymentStatus));
			this._ChildFamilies = new EntitySet<ChildFamily>(new Action<ChildFamily>(this.attach_ChildFamilies), new Action<ChildFamily>(this.detach_ChildFamilies));
			this._SchoolYears = new EntitySet<SchoolYear>(new Action<SchoolYear>(this.attach_SchoolYears), new Action<SchoolYear>(this.detach_SchoolYears));
			this._Country = default(EntityRef<Country>);
			this._State = default(EntityRef<State>);
			this._TimeZone = default(EntityRef<TimeZone>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Address1", DbType="NVarChar(200)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[Column(Storage="_Address2", DbType="NVarChar(200)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="NVarChar(10)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[Column(Storage="_StateId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					if (this._State.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStateIdChanging(value);
					this.SendPropertyChanging();
					this._StateId = value;
					this.SendPropertyChanged("StateId");
					this.OnStateIdChanged();
				}
			}
		}
		
		[Column(Storage="_CountryId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[Column(Storage="_MainPhone", DbType="NVarChar(20)")]
		public string MainPhone
		{
			get
			{
				return this._MainPhone;
			}
			set
			{
				if ((this._MainPhone != value))
				{
					this.OnMainPhoneChanging(value);
					this.SendPropertyChanging();
					this._MainPhone = value;
					this.SendPropertyChanged("MainPhone");
					this.OnMainPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_SecondaryPhone", DbType="NVarChar(20)")]
		public string SecondaryPhone
		{
			get
			{
				return this._SecondaryPhone;
			}
			set
			{
				if ((this._SecondaryPhone != value))
				{
					this.OnSecondaryPhoneChanging(value);
					this.SendPropertyChanging();
					this._SecondaryPhone = value;
					this.SendPropertyChanged("SecondaryPhone");
					this.OnSecondaryPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(15)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_WebSite", DbType="NVarChar(100)")]
		public string WebSite
		{
			get
			{
				return this._WebSite;
			}
			set
			{
				if ((this._WebSite != value))
				{
					this.OnWebSiteChanging(value);
					this.SendPropertyChanging();
					this._WebSite = value;
					this.SendPropertyChanged("WebSite");
					this.OnWebSiteChanged();
				}
			}
		}
		
		[Column(Storage="_TimeZoneId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> TimeZoneId
		{
			get
			{
				return this._TimeZoneId;
			}
			set
			{
				if ((this._TimeZoneId != value))
				{
					if (this._TimeZone.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeZoneIdChanging(value);
					this.SendPropertyChanging();
					this._TimeZoneId = value;
					this.SendPropertyChanged("TimeZoneId");
					this.OnTimeZoneIdChanged();
				}
			}
		}
		
		[Column(Storage="_CodeRequired", DbType="Bit NOT NULL")]
		public bool CodeRequired
		{
			get
			{
				return this._CodeRequired;
			}
			set
			{
				if ((this._CodeRequired != value))
				{
					this.OnCodeRequiredChanging(value);
					this.SendPropertyChanging();
					this._CodeRequired = value;
					this.SendPropertyChanged("CodeRequired");
					this.OnCodeRequiredChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_iPadHeader", DbType="NVarChar(500)")]
		public string iPadHeader
		{
			get
			{
				return this._iPadHeader;
			}
			set
			{
				if ((this._iPadHeader != value))
				{
					this.OniPadHeaderChanging(value);
					this.SendPropertyChanging();
					this._iPadHeader = value;
					this.SendPropertyChanged("iPadHeader");
					this.OniPadHeaderChanged();
				}
			}
		}
		
		[Column(Storage="_iPadHeaderFont", DbType="NVarChar(50)")]
		public string iPadHeaderFont
		{
			get
			{
				return this._iPadHeaderFont;
			}
			set
			{
				if ((this._iPadHeaderFont != value))
				{
					this.OniPadHeaderFontChanging(value);
					this.SendPropertyChanging();
					this._iPadHeaderFont = value;
					this.SendPropertyChanged("iPadHeaderFont");
					this.OniPadHeaderFontChanged();
				}
			}
		}
		
		[Column(Storage="_iPadHeaderFontSize", DbType="Int")]
		public System.Nullable<int> iPadHeaderFontSize
		{
			get
			{
				return this._iPadHeaderFontSize;
			}
			set
			{
				if ((this._iPadHeaderFontSize != value))
				{
					this.OniPadHeaderFontSizeChanging(value);
					this.SendPropertyChanging();
					this._iPadHeaderFontSize = value;
					this.SendPropertyChanged("iPadHeaderFontSize");
					this.OniPadHeaderFontSizeChanged();
				}
			}
		}
		
		[Column(Storage="_iPadHeaderColor", DbType="NVarChar(50)")]
		public string iPadHeaderColor
		{
			get
			{
				return this._iPadHeaderColor;
			}
			set
			{
				if ((this._iPadHeaderColor != value))
				{
					this.OniPadHeaderColorChanging(value);
					this.SendPropertyChanging();
					this._iPadHeaderColor = value;
					this.SendPropertyChanged("iPadHeaderColor");
					this.OniPadHeaderColorChanged();
				}
			}
		}
		
		[Column(Storage="_iPadMessage", DbType="NVarChar(MAX)")]
		public string iPadMessage
		{
			get
			{
				return this._iPadMessage;
			}
			set
			{
				if ((this._iPadMessage != value))
				{
					this.OniPadMessageChanging(value);
					this.SendPropertyChanging();
					this._iPadMessage = value;
					this.SendPropertyChanged("iPadMessage");
					this.OniPadMessageChanged();
				}
			}
		}
		
		[Column(Storage="_iPadMessageFont", DbType="NVarChar(50)")]
		public string iPadMessageFont
		{
			get
			{
				return this._iPadMessageFont;
			}
			set
			{
				if ((this._iPadMessageFont != value))
				{
					this.OniPadMessageFontChanging(value);
					this.SendPropertyChanging();
					this._iPadMessageFont = value;
					this.SendPropertyChanged("iPadMessageFont");
					this.OniPadMessageFontChanged();
				}
			}
		}
		
		[Column(Storage="_iPadMessageFontSize", DbType="Int")]
		public System.Nullable<int> iPadMessageFontSize
		{
			get
			{
				return this._iPadMessageFontSize;
			}
			set
			{
				if ((this._iPadMessageFontSize != value))
				{
					this.OniPadMessageFontSizeChanging(value);
					this.SendPropertyChanging();
					this._iPadMessageFontSize = value;
					this.SendPropertyChanged("iPadMessageFontSize");
					this.OniPadMessageFontSizeChanged();
				}
			}
		}
		
		[Column(Storage="_iPadBackgroundImage", DbType="NVarChar(500)")]
		public string iPadBackgroundImage
		{
			get
			{
				return this._iPadBackgroundImage;
			}
			set
			{
				if ((this._iPadBackgroundImage != value))
				{
					this.OniPadBackgroundImageChanging(value);
					this.SendPropertyChanging();
					this._iPadBackgroundImage = value;
					this.SendPropertyChanged("iPadBackgroundImage");
					this.OniPadBackgroundImageChanged();
				}
			}
		}
		
		[Column(Storage="_iPadMessageColor", DbType="NVarChar(50)")]
		public string iPadMessageColor
		{
			get
			{
				return this._iPadMessageColor;
			}
			set
			{
				if ((this._iPadMessageColor != value))
				{
					this.OniPadMessageColorChanging(value);
					this.SendPropertyChanging();
					this._iPadMessageColor = value;
					this.SendPropertyChanged("iPadMessageColor");
					this.OniPadMessageColorChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LateFeeAmount", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> LateFeeAmount
		{
			get
			{
				return this._LateFeeAmount;
			}
			set
			{
				if ((this._LateFeeAmount != value))
				{
					this.OnLateFeeAmountChanging(value);
					this.SendPropertyChanging();
					this._LateFeeAmount = value;
					this.SendPropertyChanged("LateFeeAmount");
					this.OnLateFeeAmountChanged();
				}
			}
		}
		
		[Column(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[Association(Name="School_AbsentReason", Storage="_AbsentReasons", ThisKey="Id", OtherKey="SchoolId")]
		public EntitySet<AbsentReason> AbsentReasons
		{
			get
			{
				return this._AbsentReasons;
			}
			set
			{
				this._AbsentReasons.Assign(value);
			}
		}
		
		[Association(Name="School_ClassCategory", Storage="_ClassCategories", ThisKey="Id", OtherKey="SchoolId")]
		public EntitySet<ClassCategory> ClassCategories
		{
			get
			{
				return this._ClassCategories;
			}
			set
			{
				this._ClassCategories.Assign(value);
			}
		}
		
		[Association(Name="School_EnrollmentStatus", Storage="_EnrollmentStatus", ThisKey="Id", OtherKey="SchoolId")]
		public EntitySet<EnrollmentStatus> EnrollmentStatus
		{
			get
			{
				return this._EnrollmentStatus;
			}
			set
			{
				this._EnrollmentStatus.Assign(value);
			}
		}
		
		[Association(Name="School_Relationship", Storage="_Relationships", ThisKey="Id", OtherKey="SchoolId")]
		public EntitySet<Relationship> Relationships
		{
			get
			{
				return this._Relationships;
			}
			set
			{
				this._Relationships.Assign(value);
			}
		}
		
		[Association(Name="School_StaffCategory", Storage="_StaffCategories", ThisKey="Id", OtherKey="SchoolId")]
		public EntitySet<StaffCategory> StaffCategories
		{
			get
			{
				return this._StaffCategories;
			}
			set
			{
				this._StaffCategories.Assign(value);
			}
		}
		
		[Association(Name="School_UserGroup", Storage="_UserGroups", ThisKey="Id", OtherKey="SchoolId")]
		public EntitySet<UserGroup> UserGroups
		{
			get
			{
				return this._UserGroups;
			}
			set
			{
				this._UserGroups.Assign(value);
			}
		}
		
		[Association(Name="School_ClassRoom", Storage="_ClassRooms", ThisKey="Id", OtherKey="SchoolId")]
		public EntitySet<ClassRoom> ClassRooms
		{
			get
			{
				return this._ClassRooms;
			}
			set
			{
				this._ClassRooms.Assign(value);
			}
		}
		
		[Association(Name="School_HoursOfOperation", Storage="_HoursOfOperations", ThisKey="Id", OtherKey="SchoolId")]
		public EntitySet<HoursOfOperation> HoursOfOperations
		{
			get
			{
				return this._HoursOfOperations;
			}
			set
			{
				this._HoursOfOperations.Assign(value);
			}
		}
		
		[Association(Name="School_EmploymentStatus", Storage="_EmploymentStatus", ThisKey="Id", OtherKey="SchoolId")]
		public EntitySet<EmploymentStatus> EmploymentStatus
		{
			get
			{
				return this._EmploymentStatus;
			}
			set
			{
				this._EmploymentStatus.Assign(value);
			}
		}
		
		[Association(Name="School_ChildFamily", Storage="_ChildFamilies", ThisKey="Id", OtherKey="SchoolId")]
		public EntitySet<ChildFamily> ChildFamilies
		{
			get
			{
				return this._ChildFamilies;
			}
			set
			{
				this._ChildFamilies.Assign(value);
			}
		}
		
		[Association(Name="School_SchoolYear", Storage="_SchoolYears", ThisKey="Id", OtherKey="SchoolId")]
		public EntitySet<SchoolYear> SchoolYears
		{
			get
			{
				return this._SchoolYears;
			}
			set
			{
				this._SchoolYears.Assign(value);
			}
		}
		
		[Association(Name="Country_School", Storage="_Country", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Schools.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Schools.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		[Association(Name="State_School", Storage="_State", ThisKey="StateId", OtherKey="Id", IsForeignKey=true)]
		public State State
		{
			get
			{
				return this._State.Entity;
			}
			set
			{
				State previousValue = this._State.Entity;
				if (((previousValue != value) 
							|| (this._State.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._State.Entity = null;
						previousValue.Schools.Remove(this);
					}
					this._State.Entity = value;
					if ((value != null))
					{
						value.Schools.Add(this);
						this._StateId = value.Id;
					}
					else
					{
						this._StateId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("State");
				}
			}
		}
		
		[Association(Name="TimeZone_School", Storage="_TimeZone", ThisKey="TimeZoneId", OtherKey="Id", IsForeignKey=true)]
		public TimeZone TimeZone
		{
			get
			{
				return this._TimeZone.Entity;
			}
			set
			{
				TimeZone previousValue = this._TimeZone.Entity;
				if (((previousValue != value) 
							|| (this._TimeZone.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeZone.Entity = null;
						previousValue.Schools.Remove(this);
					}
					this._TimeZone.Entity = value;
					if ((value != null))
					{
						value.Schools.Add(this);
						this._TimeZoneId = value.Id;
					}
					else
					{
						this._TimeZoneId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("TimeZone");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AbsentReasons(AbsentReason entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_AbsentReasons(AbsentReason entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_ClassCategories(ClassCategory entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_ClassCategories(ClassCategory entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_EnrollmentStatus(EnrollmentStatus entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_EnrollmentStatus(EnrollmentStatus entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_StaffCategories(StaffCategory entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_StaffCategories(StaffCategory entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_UserGroups(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_ClassRooms(ClassRoom entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_ClassRooms(ClassRoom entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_HoursOfOperations(HoursOfOperation entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_HoursOfOperations(HoursOfOperation entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_EmploymentStatus(EmploymentStatus entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_EmploymentStatus(EmploymentStatus entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_ChildFamilies(ChildFamily entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_ChildFamilies(ChildFamily entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
		
		private void attach_SchoolYears(SchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.School = this;
		}
		
		private void detach_SchoolYears(SchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.School = null;
		}
	}
	
	[Table(Name="dbo.SchoolYear")]
	public partial class SchoolYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolId;
		
		private string _Year;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _Comments;
		
		private bool _CurrentId;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private System.Nullable<System.Guid> _OldCurrentSchoolYearId;
		
		private EntitySet<Payment> _Payments;
		
		private EntitySet<Ledger> _Ledgers;
		
		private EntitySet<SchoolProgram> _SchoolPrograms;
		
		private EntitySet<StaffSchoolYear> _StaffSchoolYears;
		
		private EntitySet<ChildSchoolYear> _ChildSchoolYears;
		
		private EntitySet<ChildFamilySchoolYear> _ChildFamilySchoolYears;
		
		private EntitySet<ClassRoomSchoolYear> _ClassRoomSchoolYears;
		
		private EntityRef<School> _School;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolIdChanging(System.Guid value);
    partial void OnSchoolIdChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    partial void OnCurrentIdChanging(bool value);
    partial void OnCurrentIdChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    partial void OnOldCurrentSchoolYearIdChanging(System.Nullable<System.Guid> value);
    partial void OnOldCurrentSchoolYearIdChanged();
    #endregion
		
		public SchoolYear()
		{
			this._Payments = new EntitySet<Payment>(new Action<Payment>(this.attach_Payments), new Action<Payment>(this.detach_Payments));
			this._Ledgers = new EntitySet<Ledger>(new Action<Ledger>(this.attach_Ledgers), new Action<Ledger>(this.detach_Ledgers));
			this._SchoolPrograms = new EntitySet<SchoolProgram>(new Action<SchoolProgram>(this.attach_SchoolPrograms), new Action<SchoolProgram>(this.detach_SchoolPrograms));
			this._StaffSchoolYears = new EntitySet<StaffSchoolYear>(new Action<StaffSchoolYear>(this.attach_StaffSchoolYears), new Action<StaffSchoolYear>(this.detach_StaffSchoolYears));
			this._ChildSchoolYears = new EntitySet<ChildSchoolYear>(new Action<ChildSchoolYear>(this.attach_ChildSchoolYears), new Action<ChildSchoolYear>(this.detach_ChildSchoolYears));
			this._ChildFamilySchoolYears = new EntitySet<ChildFamilySchoolYear>(new Action<ChildFamilySchoolYear>(this.attach_ChildFamilySchoolYears), new Action<ChildFamilySchoolYear>(this.detach_ChildFamilySchoolYears));
			this._ClassRoomSchoolYears = new EntitySet<ClassRoomSchoolYear>(new Action<ClassRoomSchoolYear>(this.attach_ClassRoomSchoolYears), new Action<ClassRoomSchoolYear>(this.detach_ClassRoomSchoolYears));
			this._School = default(EntityRef<School>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					if (this._School.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolId = value;
					this.SendPropertyChanged("SchoolId");
					this.OnSchoolIdChanged();
				}
			}
		}
		
		[Column(Storage="_Year", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		[Column(Storage="_CurrentId", DbType="Bit NOT NULL")]
		public bool CurrentId
		{
			get
			{
				return this._CurrentId;
			}
			set
			{
				if ((this._CurrentId != value))
				{
					this.OnCurrentIdChanging(value);
					this.SendPropertyChanging();
					this._CurrentId = value;
					this.SendPropertyChanged("CurrentId");
					this.OnCurrentIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_OldCurrentSchoolYearId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> OldCurrentSchoolYearId
		{
			get
			{
				return this._OldCurrentSchoolYearId;
			}
			set
			{
				if ((this._OldCurrentSchoolYearId != value))
				{
					this.OnOldCurrentSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._OldCurrentSchoolYearId = value;
					this.SendPropertyChanged("OldCurrentSchoolYearId");
					this.OnOldCurrentSchoolYearIdChanged();
				}
			}
		}
		
		[Association(Name="SchoolYear_Payment", Storage="_Payments", ThisKey="Id", OtherKey="SchoolYearId")]
		public EntitySet<Payment> Payments
		{
			get
			{
				return this._Payments;
			}
			set
			{
				this._Payments.Assign(value);
			}
		}
		
		[Association(Name="SchoolYear_Ledger", Storage="_Ledgers", ThisKey="Id", OtherKey="SchoolYearId")]
		public EntitySet<Ledger> Ledgers
		{
			get
			{
				return this._Ledgers;
			}
			set
			{
				this._Ledgers.Assign(value);
			}
		}
		
		[Association(Name="SchoolYear_SchoolProgram", Storage="_SchoolPrograms", ThisKey="Id", OtherKey="SchoolYearId")]
		public EntitySet<SchoolProgram> SchoolPrograms
		{
			get
			{
				return this._SchoolPrograms;
			}
			set
			{
				this._SchoolPrograms.Assign(value);
			}
		}
		
		[Association(Name="SchoolYear_StaffSchoolYear", Storage="_StaffSchoolYears", ThisKey="Id", OtherKey="SchoolYearId")]
		public EntitySet<StaffSchoolYear> StaffSchoolYears
		{
			get
			{
				return this._StaffSchoolYears;
			}
			set
			{
				this._StaffSchoolYears.Assign(value);
			}
		}
		
		[Association(Name="SchoolYear_ChildSchoolYear", Storage="_ChildSchoolYears", ThisKey="Id", OtherKey="SchoolYearId")]
		public EntitySet<ChildSchoolYear> ChildSchoolYears
		{
			get
			{
				return this._ChildSchoolYears;
			}
			set
			{
				this._ChildSchoolYears.Assign(value);
			}
		}
		
		[Association(Name="SchoolYear_ChildFamilySchoolYear", Storage="_ChildFamilySchoolYears", ThisKey="Id", OtherKey="SchoolYearId")]
		public EntitySet<ChildFamilySchoolYear> ChildFamilySchoolYears
		{
			get
			{
				return this._ChildFamilySchoolYears;
			}
			set
			{
				this._ChildFamilySchoolYears.Assign(value);
			}
		}
		
		[Association(Name="SchoolYear_ClassRoomSchoolYear", Storage="_ClassRoomSchoolYears", ThisKey="Id", OtherKey="SchoolYearId")]
		public EntitySet<ClassRoomSchoolYear> ClassRoomSchoolYears
		{
			get
			{
				return this._ClassRoomSchoolYears;
			}
			set
			{
				this._ClassRoomSchoolYears.Assign(value);
			}
		}
		
		[Association(Name="School_SchoolYear", Storage="_School", ThisKey="SchoolId", OtherKey="Id", IsForeignKey=true)]
		public School School
		{
			get
			{
				return this._School.Entity;
			}
			set
			{
				School previousValue = this._School.Entity;
				if (((previousValue != value) 
							|| (this._School.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._School.Entity = null;
						previousValue.SchoolYears.Remove(this);
					}
					this._School.Entity = value;
					if ((value != null))
					{
						value.SchoolYears.Add(this);
						this._SchoolId = value.Id;
					}
					else
					{
						this._SchoolId = default(System.Guid);
					}
					this.SendPropertyChanged("School");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = this;
		}
		
		private void detach_Payments(Payment entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = null;
		}
		
		private void attach_Ledgers(Ledger entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = this;
		}
		
		private void detach_Ledgers(Ledger entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = null;
		}
		
		private void attach_SchoolPrograms(SchoolProgram entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = this;
		}
		
		private void detach_SchoolPrograms(SchoolProgram entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = null;
		}
		
		private void attach_StaffSchoolYears(StaffSchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = this;
		}
		
		private void detach_StaffSchoolYears(StaffSchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = null;
		}
		
		private void attach_ChildSchoolYears(ChildSchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = this;
		}
		
		private void detach_ChildSchoolYears(ChildSchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = null;
		}
		
		private void attach_ChildFamilySchoolYears(ChildFamilySchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = this;
		}
		
		private void detach_ChildFamilySchoolYears(ChildFamilySchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = null;
		}
		
		private void attach_ClassRoomSchoolYears(ClassRoomSchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = this;
		}
		
		private void detach_ClassRoomSchoolYears(ClassRoomSchoolYear entity)
		{
			this.SendPropertyChanging();
			entity.SchoolYear = null;
		}
	}
	
	[Table(Name="dbo.ChildFamilySchoolYear")]
	public partial class ChildFamilySchoolYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _ChildFamilyId;
		
		private System.Nullable<System.Guid> _SchoolYearId;
		
		private System.Nullable<bool> _active;
		
		private System.Nullable<System.DateTime> _createddatetime;
		
		private System.Nullable<decimal> _ClosingBalance;
		
		private EntityRef<ChildFamily> _ChildFamily;
		
		private EntityRef<SchoolYear> _SchoolYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnChildFamilyIdChanging(System.Nullable<System.Guid> value);
    partial void OnChildFamilyIdChanged();
    partial void OnSchoolYearIdChanging(System.Nullable<System.Guid> value);
    partial void OnSchoolYearIdChanged();
    partial void OnactiveChanging(System.Nullable<bool> value);
    partial void OnactiveChanged();
    partial void OncreateddatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OncreateddatetimeChanged();
    partial void OnClosingBalanceChanging(System.Nullable<decimal> value);
    partial void OnClosingBalanceChanged();
    #endregion
		
		public ChildFamilySchoolYear()
		{
			this._ChildFamily = default(EntityRef<ChildFamily>);
			this._SchoolYear = default(EntityRef<SchoolYear>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ChildFamilyId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ChildFamilyId
		{
			get
			{
				return this._ChildFamilyId;
			}
			set
			{
				if ((this._ChildFamilyId != value))
				{
					if (this._ChildFamily.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildFamilyIdChanging(value);
					this.SendPropertyChanging();
					this._ChildFamilyId = value;
					this.SendPropertyChanged("ChildFamilyId");
					this.OnChildFamilyIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolYearId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					if (this._SchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolYearId = value;
					this.SendPropertyChanged("SchoolYearId");
					this.OnSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_active", DbType="Bit")]
		public System.Nullable<bool> active
		{
			get
			{
				return this._active;
			}
			set
			{
				if ((this._active != value))
				{
					this.OnactiveChanging(value);
					this.SendPropertyChanging();
					this._active = value;
					this.SendPropertyChanged("active");
					this.OnactiveChanged();
				}
			}
		}
		
		[Column(Storage="_createddatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> createddatetime
		{
			get
			{
				return this._createddatetime;
			}
			set
			{
				if ((this._createddatetime != value))
				{
					this.OncreateddatetimeChanging(value);
					this.SendPropertyChanging();
					this._createddatetime = value;
					this.SendPropertyChanged("createddatetime");
					this.OncreateddatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_ClosingBalance", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> ClosingBalance
		{
			get
			{
				return this._ClosingBalance;
			}
			set
			{
				if ((this._ClosingBalance != value))
				{
					this.OnClosingBalanceChanging(value);
					this.SendPropertyChanging();
					this._ClosingBalance = value;
					this.SendPropertyChanged("ClosingBalance");
					this.OnClosingBalanceChanged();
				}
			}
		}
		
		[Association(Name="ChildFamily_ChildFamilySchoolYear", Storage="_ChildFamily", ThisKey="ChildFamilyId", OtherKey="Id", IsForeignKey=true)]
		public ChildFamily ChildFamily
		{
			get
			{
				return this._ChildFamily.Entity;
			}
			set
			{
				ChildFamily previousValue = this._ChildFamily.Entity;
				if (((previousValue != value) 
							|| (this._ChildFamily.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ChildFamily.Entity = null;
						previousValue.ChildFamilySchoolYears.Remove(this);
					}
					this._ChildFamily.Entity = value;
					if ((value != null))
					{
						value.ChildFamilySchoolYears.Add(this);
						this._ChildFamilyId = value.Id;
					}
					else
					{
						this._ChildFamilyId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ChildFamily");
				}
			}
		}
		
		[Association(Name="SchoolYear_ChildFamilySchoolYear", Storage="_SchoolYear", ThisKey="SchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public SchoolYear SchoolYear
		{
			get
			{
				return this._SchoolYear.Entity;
			}
			set
			{
				SchoolYear previousValue = this._SchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolYear.Entity = null;
						previousValue.ChildFamilySchoolYears.Remove(this);
					}
					this._SchoolYear.Entity = value;
					if ((value != null))
					{
						value.ChildFamilySchoolYears.Add(this);
						this._SchoolYearId = value.Id;
					}
					else
					{
						this._SchoolYearId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("SchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ProgClassRoom")]
	public partial class ProgClassRoom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _SchoolProgramId;
		
		private System.Guid _ClassRoomId;
		
		private bool _Active;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private System.Nullable<System.Guid> _ClassRoomSchoolYearId;
		
		private EntitySet<ChildSchedule> _ChildSchedules;
		
		private EntitySet<ChildSchedule> _ChildSchedules1;
		
		private EntitySet<ChildProgEnrollment> _ChildProgEnrollments;
		
		private EntityRef<ClassRoom> _ClassRoom;
		
		private EntityRef<SchoolProgram> _SchoolProgram;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnSchoolProgramIdChanging(System.Guid value);
    partial void OnSchoolProgramIdChanged();
    partial void OnClassRoomIdChanging(System.Guid value);
    partial void OnClassRoomIdChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedDatetimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDatetimeChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    partial void OnClassRoomSchoolYearIdChanging(System.Nullable<System.Guid> value);
    partial void OnClassRoomSchoolYearIdChanged();
    #endregion
		
		public ProgClassRoom()
		{
			this._ChildSchedules = new EntitySet<ChildSchedule>(new Action<ChildSchedule>(this.attach_ChildSchedules), new Action<ChildSchedule>(this.detach_ChildSchedules));
			this._ChildSchedules1 = new EntitySet<ChildSchedule>(new Action<ChildSchedule>(this.attach_ChildSchedules1), new Action<ChildSchedule>(this.detach_ChildSchedules1));
			this._ChildProgEnrollments = new EntitySet<ChildProgEnrollment>(new Action<ChildProgEnrollment>(this.attach_ChildProgEnrollments), new Action<ChildProgEnrollment>(this.detach_ChildProgEnrollments));
			this._ClassRoom = default(EntityRef<ClassRoom>);
			this._SchoolProgram = default(EntityRef<SchoolProgram>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					if (this._SchoolProgram.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolProgramIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolProgramId = value;
					this.SendPropertyChanged("SchoolProgramId");
					this.OnSchoolProgramIdChanged();
				}
			}
		}
		
		[Column(Storage="_ClassRoomId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ClassRoomId
		{
			get
			{
				return this._ClassRoomId;
			}
			set
			{
				if ((this._ClassRoomId != value))
				{
					if (this._ClassRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassRoomIdChanging(value);
					this.SendPropertyChanging();
					this._ClassRoomId = value;
					this.SendPropertyChanged("ClassRoomId");
					this.OnClassRoomIdChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this.OnLastModifiedDatetimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDatetime = value;
					this.SendPropertyChanged("LastModifiedDatetime");
					this.OnLastModifiedDatetimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_ClassRoomSchoolYearId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ClassRoomSchoolYearId
		{
			get
			{
				return this._ClassRoomSchoolYearId;
			}
			set
			{
				if ((this._ClassRoomSchoolYearId != value))
				{
					this.OnClassRoomSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._ClassRoomSchoolYearId = value;
					this.SendPropertyChanged("ClassRoomSchoolYearId");
					this.OnClassRoomSchoolYearIdChanged();
				}
			}
		}
		
		[Association(Name="ProgClassRoom_ChildSchedule", Storage="_ChildSchedules", ThisKey="Id", OtherKey="ProgClassRoomId")]
		public EntitySet<ChildSchedule> ChildSchedules
		{
			get
			{
				return this._ChildSchedules;
			}
			set
			{
				this._ChildSchedules.Assign(value);
			}
		}
		
		[Association(Name="ProgClassRoom_ChildSchedule1", Storage="_ChildSchedules1", ThisKey="Id", OtherKey="ProgClassRoomId")]
		public EntitySet<ChildSchedule> ChildSchedules1
		{
			get
			{
				return this._ChildSchedules1;
			}
			set
			{
				this._ChildSchedules1.Assign(value);
			}
		}
		
		[Association(Name="ProgClassRoom_ChildProgEnrollment", Storage="_ChildProgEnrollments", ThisKey="Id", OtherKey="ProgClassRoomId")]
		public EntitySet<ChildProgEnrollment> ChildProgEnrollments
		{
			get
			{
				return this._ChildProgEnrollments;
			}
			set
			{
				this._ChildProgEnrollments.Assign(value);
			}
		}
		
		[Association(Name="ClassRoom_ProgClassRoom", Storage="_ClassRoom", ThisKey="ClassRoomId", OtherKey="Id", IsForeignKey=true)]
		public ClassRoom ClassRoom
		{
			get
			{
				return this._ClassRoom.Entity;
			}
			set
			{
				ClassRoom previousValue = this._ClassRoom.Entity;
				if (((previousValue != value) 
							|| (this._ClassRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClassRoom.Entity = null;
						previousValue.ProgClassRooms.Remove(this);
					}
					this._ClassRoom.Entity = value;
					if ((value != null))
					{
						value.ProgClassRooms.Add(this);
						this._ClassRoomId = value.Id;
					}
					else
					{
						this._ClassRoomId = default(System.Guid);
					}
					this.SendPropertyChanged("ClassRoom");
				}
			}
		}
		
		[Association(Name="SchoolProgram_ProgClassRoom", Storage="_SchoolProgram", ThisKey="SchoolProgramId", OtherKey="Id", IsForeignKey=true)]
		public SchoolProgram SchoolProgram
		{
			get
			{
				return this._SchoolProgram.Entity;
			}
			set
			{
				SchoolProgram previousValue = this._SchoolProgram.Entity;
				if (((previousValue != value) 
							|| (this._SchoolProgram.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolProgram.Entity = null;
						previousValue.ProgClassRooms.Remove(this);
					}
					this._SchoolProgram.Entity = value;
					if ((value != null))
					{
						value.ProgClassRooms.Add(this);
						this._SchoolProgramId = value.Id;
					}
					else
					{
						this._SchoolProgramId = default(System.Guid);
					}
					this.SendPropertyChanged("SchoolProgram");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ChildSchedules(ChildSchedule entity)
		{
			this.SendPropertyChanging();
			entity.ProgClassRoom = this;
		}
		
		private void detach_ChildSchedules(ChildSchedule entity)
		{
			this.SendPropertyChanging();
			entity.ProgClassRoom = null;
		}
		
		private void attach_ChildSchedules1(ChildSchedule entity)
		{
			this.SendPropertyChanging();
			entity.ProgClassRoom1 = this;
		}
		
		private void detach_ChildSchedules1(ChildSchedule entity)
		{
			this.SendPropertyChanging();
			entity.ProgClassRoom1 = null;
		}
		
		private void attach_ChildProgEnrollments(ChildProgEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.ProgClassRoom = this;
		}
		
		private void detach_ChildProgEnrollments(ChildProgEnrollment entity)
		{
			this.SendPropertyChanging();
			entity.ProgClassRoom = null;
		}
	}
	
	[Table(Name="dbo.ClassRoomSchoolYear")]
	public partial class ClassRoomSchoolYear : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _ClassRoomId;
		
		private System.Nullable<System.Guid> _SchoolYearId;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<System.Guid> _StaffId;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private System.Nullable<System.DateTime> _LastModifiedDateTime;
		
		private string _ClassRoomName;
		
		private EntityRef<ClassRoom> _ClassRoom;
		
		private EntityRef<SchoolYear> _SchoolYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnClassRoomIdChanging(System.Nullable<System.Guid> value);
    partial void OnClassRoomIdChanged();
    partial void OnSchoolYearIdChanging(System.Nullable<System.Guid> value);
    partial void OnSchoolYearIdChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnStaffIdChanging(System.Nullable<System.Guid> value);
    partial void OnStaffIdChanged();
    partial void OnCreatedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnCreatedByIdChanged();
    partial void OnCreatedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateTimeChanged();
    partial void OnLastModifiedByIdChanging(System.Nullable<System.Guid> value);
    partial void OnLastModifiedByIdChanged();
    partial void OnLastModifiedDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedDateTimeChanged();
    partial void OnClassRoomNameChanging(string value);
    partial void OnClassRoomNameChanged();
    #endregion
		
		public ClassRoomSchoolYear()
		{
			this._ClassRoom = default(EntityRef<ClassRoom>);
			this._SchoolYear = default(EntityRef<SchoolYear>);
			OnCreated();
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Storage="_ClassRoomId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ClassRoomId
		{
			get
			{
				return this._ClassRoomId;
			}
			set
			{
				if ((this._ClassRoomId != value))
				{
					if (this._ClassRoom.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassRoomIdChanging(value);
					this.SendPropertyChanging();
					this._ClassRoomId = value;
					this.SendPropertyChanged("ClassRoomId");
					this.OnClassRoomIdChanged();
				}
			}
		}
		
		[Column(Storage="_SchoolYearId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					if (this._SchoolYear.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSchoolYearIdChanging(value);
					this.SendPropertyChanging();
					this._SchoolYearId = value;
					this.SendPropertyChanged("SchoolYearId");
					this.OnSchoolYearIdChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_StaffId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this.OnCreatedByIdChanging(value);
					this.SendPropertyChanging();
					this._CreatedById = value;
					this.SendPropertyChanged("CreatedById");
					this.OnCreatedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this.OnCreatedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreatedDateTime = value;
					this.SendPropertyChanged("CreatedDateTime");
					this.OnCreatedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this.OnLastModifiedByIdChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedById = value;
					this.SendPropertyChanged("LastModifiedById");
					this.OnLastModifiedByIdChanged();
				}
			}
		}
		
		[Column(Storage="_LastModifiedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDateTime
		{
			get
			{
				return this._LastModifiedDateTime;
			}
			set
			{
				if ((this._LastModifiedDateTime != value))
				{
					this.OnLastModifiedDateTimeChanging(value);
					this.SendPropertyChanging();
					this._LastModifiedDateTime = value;
					this.SendPropertyChanged("LastModifiedDateTime");
					this.OnLastModifiedDateTimeChanged();
				}
			}
		}
		
		[Column(Storage="_ClassRoomName", DbType="VarChar(100)")]
		public string ClassRoomName
		{
			get
			{
				return this._ClassRoomName;
			}
			set
			{
				if ((this._ClassRoomName != value))
				{
					this.OnClassRoomNameChanging(value);
					this.SendPropertyChanging();
					this._ClassRoomName = value;
					this.SendPropertyChanged("ClassRoomName");
					this.OnClassRoomNameChanged();
				}
			}
		}
		
		[Association(Name="ClassRoom_ClassRoomSchoolYear", Storage="_ClassRoom", ThisKey="ClassRoomId", OtherKey="Id", IsForeignKey=true)]
		public ClassRoom ClassRoom
		{
			get
			{
				return this._ClassRoom.Entity;
			}
			set
			{
				ClassRoom previousValue = this._ClassRoom.Entity;
				if (((previousValue != value) 
							|| (this._ClassRoom.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ClassRoom.Entity = null;
						previousValue.ClassRoomSchoolYears.Remove(this);
					}
					this._ClassRoom.Entity = value;
					if ((value != null))
					{
						value.ClassRoomSchoolYears.Add(this);
						this._ClassRoomId = value.Id;
					}
					else
					{
						this._ClassRoomId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("ClassRoom");
				}
			}
		}
		
		[Association(Name="SchoolYear_ClassRoomSchoolYear", Storage="_SchoolYear", ThisKey="SchoolYearId", OtherKey="Id", IsForeignKey=true)]
		public SchoolYear SchoolYear
		{
			get
			{
				return this._SchoolYear.Entity;
			}
			set
			{
				SchoolYear previousValue = this._SchoolYear.Entity;
				if (((previousValue != value) 
							|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SchoolYear.Entity = null;
						previousValue.ClassRoomSchoolYears.Remove(this);
					}
					this._SchoolYear.Entity = value;
					if ((value != null))
					{
						value.ClassRoomSchoolYears.Add(this);
						this._SchoolYearId = value.Id;
					}
					else
					{
						this._SchoolYearId = default(Nullable<System.Guid>);
					}
					this.SendPropertyChanged("SchoolYear");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class spGetProgStaffListResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _SchoolProgramId;
		
		private System.Guid _StaffId;
		
		private bool _Active;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private System.Guid _Id1;
		
		private System.Guid _SchoolYearId;
		
		private string _Title;
		
		private decimal _Fees;
		
		private System.Guid _FeesPeriodId;
		
		private bool _Active1;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _CreatedDateTime1;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime1;
		
		private System.Nullable<System.Guid> _CreatedById1;
		
		private System.Nullable<System.Guid> _LastModifiedById1;
		
		private System.Guid _Id2;
		
		private System.Guid _SchoolId;
		
		private string _Year;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _Comments1;
		
		private bool _CurrentId;
		
		private System.Nullable<System.DateTime> _CreatedDateTime2;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime2;
		
		private System.Nullable<System.Guid> _CreatedById2;
		
		private System.Nullable<System.Guid> _LastModifiedById2;
		
		public spGetProgStaffListResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					this._SchoolProgramId = value;
				}
			}
		}
		
		[Column(Storage="_StaffId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					this._StaffId = value;
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this._LastModifiedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
		
		[Column(Storage="_Id1", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id1
		{
			get
			{
				return this._Id1;
			}
			set
			{
				if ((this._Id1 != value))
				{
					this._Id1 = value;
				}
			}
		}
		
		[Column(Storage="_SchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					this._SchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_Fees", DbType="Decimal(0,0) NOT NULL")]
		public decimal Fees
		{
			get
			{
				return this._Fees;
			}
			set
			{
				if ((this._Fees != value))
				{
					this._Fees = value;
				}
			}
		}
		
		[Column(Storage="_FeesPeriodId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FeesPeriodId
		{
			get
			{
				return this._FeesPeriodId;
			}
			set
			{
				if ((this._FeesPeriodId != value))
				{
					this._FeesPeriodId = value;
				}
			}
		}
		
		[Column(Storage="_Active1", DbType="Bit NOT NULL")]
		public bool Active1
		{
			get
			{
				return this._Active1;
			}
			set
			{
				if ((this._Active1 != value))
				{
					this._Active1 = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime1", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime1
		{
			get
			{
				return this._CreatedDateTime1;
			}
			set
			{
				if ((this._CreatedDateTime1 != value))
				{
					this._CreatedDateTime1 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime1", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime1
		{
			get
			{
				return this._LastModifiedDatetime1;
			}
			set
			{
				if ((this._LastModifiedDatetime1 != value))
				{
					this._LastModifiedDatetime1 = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById1", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById1
		{
			get
			{
				return this._CreatedById1;
			}
			set
			{
				if ((this._CreatedById1 != value))
				{
					this._CreatedById1 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById1", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById1
		{
			get
			{
				return this._LastModifiedById1;
			}
			set
			{
				if ((this._LastModifiedById1 != value))
				{
					this._LastModifiedById1 = value;
				}
			}
		}
		
		[Column(Storage="_Id2", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id2
		{
			get
			{
				return this._Id2;
			}
			set
			{
				if ((this._Id2 != value))
				{
					this._Id2 = value;
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					this._SchoolId = value;
				}
			}
		}
		
		[Column(Storage="_Year", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this._Year = value;
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this._StartDate = value;
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
		
		[Column(Storage="_Comments1", DbType="NVarChar(500)")]
		public string Comments1
		{
			get
			{
				return this._Comments1;
			}
			set
			{
				if ((this._Comments1 != value))
				{
					this._Comments1 = value;
				}
			}
		}
		
		[Column(Storage="_CurrentId", DbType="Bit NOT NULL")]
		public bool CurrentId
		{
			get
			{
				return this._CurrentId;
			}
			set
			{
				if ((this._CurrentId != value))
				{
					this._CurrentId = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime2", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime2
		{
			get
			{
				return this._CreatedDateTime2;
			}
			set
			{
				if ((this._CreatedDateTime2 != value))
				{
					this._CreatedDateTime2 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime2", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime2
		{
			get
			{
				return this._LastModifiedDatetime2;
			}
			set
			{
				if ((this._LastModifiedDatetime2 != value))
				{
					this._LastModifiedDatetime2 = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById2", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById2
		{
			get
			{
				return this._CreatedById2;
			}
			set
			{
				if ((this._CreatedById2 != value))
				{
					this._CreatedById2 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById2", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById2
		{
			get
			{
				return this._LastModifiedById2;
			}
			set
			{
				if ((this._LastModifiedById2 != value))
				{
					this._LastModifiedById2 = value;
				}
			}
		}
	}
	
	public partial class spGetProgScheduleListResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _SchoolProgramId;
		
		private string _Day;
		
		private System.DateTime _BeginTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private bool _Active;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private System.Guid _Id1;
		
		private System.Guid _SchoolYearId;
		
		private string _Title;
		
		private decimal _Fees;
		
		private System.Guid _FeesPeriodId;
		
		private bool _Active1;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _CreatedDateTime1;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime1;
		
		private System.Nullable<System.Guid> _CreatedById1;
		
		private System.Nullable<System.Guid> _LastModifiedById1;
		
		private System.Guid _Id2;
		
		private System.Guid _SchoolId;
		
		private string _Year;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _Comments1;
		
		private bool _CurrentId;
		
		private System.Nullable<System.DateTime> _CreatedDateTime2;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime2;
		
		private System.Nullable<System.Guid> _CreatedById2;
		
		private System.Nullable<System.Guid> _LastModifiedById2;
		
		private string _Title1;
		
		public spGetProgScheduleListResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					this._SchoolProgramId = value;
				}
			}
		}
		
		[Column(Storage="_Day", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this._Day = value;
				}
			}
		}
		
		[Column(Storage="_BeginTime", DbType="DateTime NOT NULL")]
		public System.DateTime BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this._BeginTime = value;
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this._EndTime = value;
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this._LastModifiedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
		
		[Column(Storage="_Id1", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id1
		{
			get
			{
				return this._Id1;
			}
			set
			{
				if ((this._Id1 != value))
				{
					this._Id1 = value;
				}
			}
		}
		
		[Column(Storage="_SchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					this._SchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_Fees", DbType="Decimal(0,0) NOT NULL")]
		public decimal Fees
		{
			get
			{
				return this._Fees;
			}
			set
			{
				if ((this._Fees != value))
				{
					this._Fees = value;
				}
			}
		}
		
		[Column(Storage="_FeesPeriodId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FeesPeriodId
		{
			get
			{
				return this._FeesPeriodId;
			}
			set
			{
				if ((this._FeesPeriodId != value))
				{
					this._FeesPeriodId = value;
				}
			}
		}
		
		[Column(Storage="_Active1", DbType="Bit NOT NULL")]
		public bool Active1
		{
			get
			{
				return this._Active1;
			}
			set
			{
				if ((this._Active1 != value))
				{
					this._Active1 = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime1", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime1
		{
			get
			{
				return this._CreatedDateTime1;
			}
			set
			{
				if ((this._CreatedDateTime1 != value))
				{
					this._CreatedDateTime1 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime1", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime1
		{
			get
			{
				return this._LastModifiedDatetime1;
			}
			set
			{
				if ((this._LastModifiedDatetime1 != value))
				{
					this._LastModifiedDatetime1 = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById1", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById1
		{
			get
			{
				return this._CreatedById1;
			}
			set
			{
				if ((this._CreatedById1 != value))
				{
					this._CreatedById1 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById1", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById1
		{
			get
			{
				return this._LastModifiedById1;
			}
			set
			{
				if ((this._LastModifiedById1 != value))
				{
					this._LastModifiedById1 = value;
				}
			}
		}
		
		[Column(Storage="_Id2", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id2
		{
			get
			{
				return this._Id2;
			}
			set
			{
				if ((this._Id2 != value))
				{
					this._Id2 = value;
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					this._SchoolId = value;
				}
			}
		}
		
		[Column(Storage="_Year", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this._Year = value;
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this._StartDate = value;
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
		
		[Column(Storage="_Comments1", DbType="NVarChar(500)")]
		public string Comments1
		{
			get
			{
				return this._Comments1;
			}
			set
			{
				if ((this._Comments1 != value))
				{
					this._Comments1 = value;
				}
			}
		}
		
		[Column(Storage="_CurrentId", DbType="Bit NOT NULL")]
		public bool CurrentId
		{
			get
			{
				return this._CurrentId;
			}
			set
			{
				if ((this._CurrentId != value))
				{
					this._CurrentId = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime2", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime2
		{
			get
			{
				return this._CreatedDateTime2;
			}
			set
			{
				if ((this._CreatedDateTime2 != value))
				{
					this._CreatedDateTime2 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime2", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime2
		{
			get
			{
				return this._LastModifiedDatetime2;
			}
			set
			{
				if ((this._LastModifiedDatetime2 != value))
				{
					this._LastModifiedDatetime2 = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById2", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById2
		{
			get
			{
				return this._CreatedById2;
			}
			set
			{
				if ((this._CreatedById2 != value))
				{
					this._CreatedById2 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById2", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById2
		{
			get
			{
				return this._LastModifiedById2;
			}
			set
			{
				if ((this._LastModifiedById2 != value))
				{
					this._LastModifiedById2 = value;
				}
			}
		}
		
		[Column(Storage="_Title1", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title1
		{
			get
			{
				return this._Title1;
			}
			set
			{
				if ((this._Title1 != value))
				{
					this._Title1 = value;
				}
			}
		}
	}
	
	public partial class spGetProgClassCategoryResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _SchoolProgramId;
		
		private System.Guid _ClassCategoryId;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private System.Guid _Id1;
		
		private System.Guid _SchoolYearId;
		
		private string _Title;
		
		private decimal _Fees;
		
		private System.Guid _FeesPeriodId;
		
		private bool _Active;
		
		private string _Comments;
		
		private bool _IsPrimary;
		
		private System.Nullable<System.DateTime> _CreatedDateTime1;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime1;
		
		private System.Nullable<System.Guid> _CreatedById1;
		
		private System.Nullable<System.Guid> _LastModifiedById1;
		
		private System.Guid _Id2;
		
		private System.Guid _SchoolId;
		
		private string _Name;
		
		private bool _Active1;
		
		private string _Comments1;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime2;
		
		private System.Nullable<System.Guid> _LastModifiedById2;
		
		private System.Guid _Id3;
		
		private System.Guid _SchoolId1;
		
		private string _Year;
		
		private System.DateTime _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private string _Comments2;
		
		private bool _CurrentId;
		
		private System.Nullable<System.DateTime> _CreatedDateTime2;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime3;
		
		private System.Nullable<System.Guid> _CreatedById2;
		
		private System.Nullable<System.Guid> _LastModifiedById3;
		
		private System.Guid _SchoolProgramId1;
		
		private System.Guid _ClassCategoryId1;
		
		private string _Name1;
		
		private string _Title1;
		
		private System.Nullable<System.DateTime> _CreatedDateTime3;
		
		private System.Nullable<System.DateTime> _LastModifiedDateTime4;
		
		private System.Nullable<System.Guid> _CreatedById3;
		
		private System.Nullable<System.Guid> _LastModifiedById4;
		
		public spGetProgClassCategoryResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					this._SchoolProgramId = value;
				}
			}
		}
		
		[Column(Storage="_ClassCategoryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ClassCategoryId
		{
			get
			{
				return this._ClassCategoryId;
			}
			set
			{
				if ((this._ClassCategoryId != value))
				{
					this._ClassCategoryId = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this._LastModifiedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
		
		[Column(Storage="_Id1", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id1
		{
			get
			{
				return this._Id1;
			}
			set
			{
				if ((this._Id1 != value))
				{
					this._Id1 = value;
				}
			}
		}
		
		[Column(Storage="_SchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					this._SchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_Fees", DbType="Decimal(0,0) NOT NULL")]
		public decimal Fees
		{
			get
			{
				return this._Fees;
			}
			set
			{
				if ((this._Fees != value))
				{
					this._Fees = value;
				}
			}
		}
		
		[Column(Storage="_FeesPeriodId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FeesPeriodId
		{
			get
			{
				return this._FeesPeriodId;
			}
			set
			{
				if ((this._FeesPeriodId != value))
				{
					this._FeesPeriodId = value;
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_IsPrimary", DbType="Bit NOT NULL")]
		public bool IsPrimary
		{
			get
			{
				return this._IsPrimary;
			}
			set
			{
				if ((this._IsPrimary != value))
				{
					this._IsPrimary = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime1", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime1
		{
			get
			{
				return this._CreatedDateTime1;
			}
			set
			{
				if ((this._CreatedDateTime1 != value))
				{
					this._CreatedDateTime1 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime1", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime1
		{
			get
			{
				return this._LastModifiedDatetime1;
			}
			set
			{
				if ((this._LastModifiedDatetime1 != value))
				{
					this._LastModifiedDatetime1 = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById1", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById1
		{
			get
			{
				return this._CreatedById1;
			}
			set
			{
				if ((this._CreatedById1 != value))
				{
					this._CreatedById1 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById1", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById1
		{
			get
			{
				return this._LastModifiedById1;
			}
			set
			{
				if ((this._LastModifiedById1 != value))
				{
					this._LastModifiedById1 = value;
				}
			}
		}
		
		[Column(Storage="_Id2", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id2
		{
			get
			{
				return this._Id2;
			}
			set
			{
				if ((this._Id2 != value))
				{
					this._Id2 = value;
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					this._SchoolId = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Active1", DbType="Bit NOT NULL")]
		public bool Active1
		{
			get
			{
				return this._Active1;
			}
			set
			{
				if ((this._Active1 != value))
				{
					this._Active1 = value;
				}
			}
		}
		
		[Column(Storage="_Comments1", DbType="NVarChar(500)")]
		public string Comments1
		{
			get
			{
				return this._Comments1;
			}
			set
			{
				if ((this._Comments1 != value))
				{
					this._Comments1 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime2", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime2
		{
			get
			{
				return this._LastModifiedDatetime2;
			}
			set
			{
				if ((this._LastModifiedDatetime2 != value))
				{
					this._LastModifiedDatetime2 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById2", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById2
		{
			get
			{
				return this._LastModifiedById2;
			}
			set
			{
				if ((this._LastModifiedById2 != value))
				{
					this._LastModifiedById2 = value;
				}
			}
		}
		
		[Column(Storage="_Id3", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id3
		{
			get
			{
				return this._Id3;
			}
			set
			{
				if ((this._Id3 != value))
				{
					this._Id3 = value;
				}
			}
		}
		
		[Column(Storage="_SchoolId1", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId1
		{
			get
			{
				return this._SchoolId1;
			}
			set
			{
				if ((this._SchoolId1 != value))
				{
					this._SchoolId1 = value;
				}
			}
		}
		
		[Column(Storage="_Year", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this._Year = value;
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this._StartDate = value;
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
		
		[Column(Storage="_Comments2", DbType="NVarChar(500)")]
		public string Comments2
		{
			get
			{
				return this._Comments2;
			}
			set
			{
				if ((this._Comments2 != value))
				{
					this._Comments2 = value;
				}
			}
		}
		
		[Column(Storage="_CurrentId", DbType="Bit NOT NULL")]
		public bool CurrentId
		{
			get
			{
				return this._CurrentId;
			}
			set
			{
				if ((this._CurrentId != value))
				{
					this._CurrentId = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime2", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime2
		{
			get
			{
				return this._CreatedDateTime2;
			}
			set
			{
				if ((this._CreatedDateTime2 != value))
				{
					this._CreatedDateTime2 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime3", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime3
		{
			get
			{
				return this._LastModifiedDatetime3;
			}
			set
			{
				if ((this._LastModifiedDatetime3 != value))
				{
					this._LastModifiedDatetime3 = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById2", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById2
		{
			get
			{
				return this._CreatedById2;
			}
			set
			{
				if ((this._CreatedById2 != value))
				{
					this._CreatedById2 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById3", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById3
		{
			get
			{
				return this._LastModifiedById3;
			}
			set
			{
				if ((this._LastModifiedById3 != value))
				{
					this._LastModifiedById3 = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId1", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId1
		{
			get
			{
				return this._SchoolProgramId1;
			}
			set
			{
				if ((this._SchoolProgramId1 != value))
				{
					this._SchoolProgramId1 = value;
				}
			}
		}
		
		[Column(Storage="_ClassCategoryId1", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ClassCategoryId1
		{
			get
			{
				return this._ClassCategoryId1;
			}
			set
			{
				if ((this._ClassCategoryId1 != value))
				{
					this._ClassCategoryId1 = value;
				}
			}
		}
		
		[Column(Storage="_Name1", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name1
		{
			get
			{
				return this._Name1;
			}
			set
			{
				if ((this._Name1 != value))
				{
					this._Name1 = value;
				}
			}
		}
		
		[Column(Storage="_Title1", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title1
		{
			get
			{
				return this._Title1;
			}
			set
			{
				if ((this._Title1 != value))
				{
					this._Title1 = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime3", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime3
		{
			get
			{
				return this._CreatedDateTime3;
			}
			set
			{
				if ((this._CreatedDateTime3 != value))
				{
					this._CreatedDateTime3 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDateTime4", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDateTime4
		{
			get
			{
				return this._LastModifiedDateTime4;
			}
			set
			{
				if ((this._LastModifiedDateTime4 != value))
				{
					this._LastModifiedDateTime4 = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById3", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById3
		{
			get
			{
				return this._CreatedById3;
			}
			set
			{
				if ((this._CreatedById3 != value))
				{
					this._CreatedById3 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById4", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById4
		{
			get
			{
				return this._LastModifiedById4;
			}
			set
			{
				if ((this._LastModifiedById4 != value))
				{
					this._LastModifiedById4 = value;
				}
			}
		}
	}
	
	public partial class spGetChildIdNotInChildSchoolYearResult
	{
		
		private System.Guid _Id;
		
		public spGetChildIdNotInChildSchoolYearResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
	}
	
	public partial class spGetChildAbsentHistoryResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.Guid _AbsentReasonId;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private string _ChildName;
		
		private string _AbsentReason;
		
		public spGetChildAbsentHistoryResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					this._ChildSchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_AbsentReasonId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AbsentReasonId
		{
			get
			{
				return this._AbsentReasonId;
			}
			set
			{
				if ((this._AbsentReasonId != value))
				{
					this._AbsentReasonId = value;
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this._StartDate = value;
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this._LastModifiedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
		
		[Column(Storage="_ChildName", DbType="NVarChar(101) NOT NULL", CanBeNull=false)]
		public string ChildName
		{
			get
			{
				return this._ChildName;
			}
			set
			{
				if ((this._ChildName != value))
				{
					this._ChildName = value;
				}
			}
		}
		
		[Column(Storage="_AbsentReason", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string AbsentReason
		{
			get
			{
				return this._AbsentReason;
			}
			set
			{
				if ((this._AbsentReason != value))
				{
					this._AbsentReason = value;
				}
			}
		}
	}
	
	public partial class spGetSchoolProgramForScheduleResult
	{
		
		private System.Guid _Id;
		
		private string _Title;
		
		private bool _IsPrimary;
		
		public spGetSchoolProgramForScheduleResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_IsPrimary", DbType="Bit NOT NULL")]
		public bool IsPrimary
		{
			get
			{
				return this._IsPrimary;
			}
			set
			{
				if ((this._IsPrimary != value))
				{
					this._IsPrimary = value;
				}
			}
		}
	}
	
	public partial class spGetChildEnrollmentStatusResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.Guid _EnrollmentStatusId;
		
		private System.DateTime _EnrollmentDate;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private string _Status;
		
		public spGetChildEnrollmentStatusResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					this._ChildSchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_EnrollmentStatusId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EnrollmentStatusId
		{
			get
			{
				return this._EnrollmentStatusId;
			}
			set
			{
				if ((this._EnrollmentStatusId != value))
				{
					this._EnrollmentStatusId = value;
				}
			}
		}
		
		[Column(Storage="_EnrollmentDate", DbType="DateTime NOT NULL")]
		public System.DateTime EnrollmentDate
		{
			get
			{
				return this._EnrollmentDate;
			}
			set
			{
				if ((this._EnrollmentDate != value))
				{
					this._EnrollmentDate = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this._LastModifiedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
	}
	
	public partial class spGetProgScheduleForChildScheduleResult
	{
		
		private System.Guid _Id;
		
		private string _Day;
		
		private System.DateTime _BeginTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private System.Nullable<System.Guid> _ProgClassRoomId;
		
		private string _FullName;
		
		private string _ClassRoomName;
		
		public spGetProgScheduleForChildScheduleResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_Day", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this._Day = value;
				}
			}
		}
		
		[Column(Storage="_BeginTime", DbType="DateTime NOT NULL")]
		public System.DateTime BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this._BeginTime = value;
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this._EndTime = value;
				}
			}
		}
		
		[Column(Storage="_ProgClassRoomId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProgClassRoomId
		{
			get
			{
				return this._ProgClassRoomId;
			}
			set
			{
				if ((this._ProgClassRoomId != value))
				{
					this._ProgClassRoomId = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(101) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_ClassRoomName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ClassRoomName
		{
			get
			{
				return this._ClassRoomName;
			}
			set
			{
				if ((this._ClassRoomName != value))
				{
					this._ClassRoomName = value;
				}
			}
		}
	}
	
	public partial class spCheckDuplicateChildEnrollmentStatusResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.Guid _EnrollmentStatusId;
		
		private System.DateTime _EnrollmentDate;
		
		private string _Comments;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		public spCheckDuplicateChildEnrollmentStatusResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					this._ChildSchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_EnrollmentStatusId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EnrollmentStatusId
		{
			get
			{
				return this._EnrollmentStatusId;
			}
			set
			{
				if ((this._EnrollmentStatusId != value))
				{
					this._EnrollmentStatusId = value;
				}
			}
		}
		
		[Column(Storage="_EnrollmentDate", DbType="DateTime NOT NULL")]
		public System.DateTime EnrollmentDate
		{
			get
			{
				return this._EnrollmentDate;
			}
			set
			{
				if ((this._EnrollmentDate != value))
				{
					this._EnrollmentDate = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this._LastModifiedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
	}
	
	public partial class spJSONGetClassRoomStaffResult
	{
		
		private System.Guid _ClassRoomId;
		
		private string _ClassRoomTitle;
		
		private System.Nullable<System.Guid> _StaffId;
		
		private string _StaffName;
		
		private System.Nullable<System.DateTime> _LastModifiedDateTime;
		
		private System.Guid _StaffSchoolYearId;
		
		public spJSONGetClassRoomStaffResult()
		{
		}
		
		[Column(Storage="_ClassRoomId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ClassRoomId
		{
			get
			{
				return this._ClassRoomId;
			}
			set
			{
				if ((this._ClassRoomId != value))
				{
					this._ClassRoomId = value;
				}
			}
		}
		
		[Column(Storage="_ClassRoomTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ClassRoomTitle
		{
			get
			{
				return this._ClassRoomTitle;
			}
			set
			{
				if ((this._ClassRoomTitle != value))
				{
					this._ClassRoomTitle = value;
				}
			}
		}
		
		[Column(Storage="_StaffId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					this._StaffId = value;
				}
			}
		}
		
		[Column(Storage="_StaffName", DbType="NVarChar(102) NOT NULL", CanBeNull=false)]
		public string StaffName
		{
			get
			{
				return this._StaffName;
			}
			set
			{
				if ((this._StaffName != value))
				{
					this._StaffName = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDateTime
		{
			get
			{
				return this._LastModifiedDateTime;
			}
			set
			{
				if ((this._LastModifiedDateTime != value))
				{
					this._LastModifiedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_StaffSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StaffSchoolYearId
		{
			get
			{
				return this._StaffSchoolYearId;
			}
			set
			{
				if ((this._StaffSchoolYearId != value))
				{
					this._StaffSchoolYearId = value;
				}
			}
		}
	}
	
	public partial class spGetProgClassRoomIdAndClassRoomNameResult
	{
		
		private System.Guid _Id;
		
		private string _ClassRoomTitle;
		
		private System.Guid _ClassRoomId;
		
		public spGetProgClassRoomIdAndClassRoomNameResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_ClassRoomTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ClassRoomTitle
		{
			get
			{
				return this._ClassRoomTitle;
			}
			set
			{
				if ((this._ClassRoomTitle != value))
				{
					this._ClassRoomTitle = value;
				}
			}
		}
		
		[Column(Storage="_ClassRoomId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ClassRoomId
		{
			get
			{
				return this._ClassRoomId;
			}
			set
			{
				if ((this._ClassRoomId != value))
				{
					this._ClassRoomId = value;
				}
			}
		}
	}
	
	public partial class spGetCheckDuplicateProgClassRoomIdResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _SchoolProgramId;
		
		private string _Day;
		
		private System.DateTime _BeginTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private bool _Active;
		
		private System.Nullable<int> _DayIndex;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private System.Nullable<System.Guid> _ProgClassRoomId;
		
		private System.Guid _Id1;
		
		private System.Guid _SchoolYearId;
		
		private string _Title;
		
		private decimal _Fees;
		
		private System.Guid _FeesPeriodId;
		
		private bool _Active1;
		
		private string _Comments;
		
		private bool _IsPrimary;
		
		private System.Nullable<System.DateTime> _CreatedDateTime1;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime1;
		
		private System.Nullable<System.Guid> _CreatedById1;
		
		private System.Nullable<System.Guid> _LastModifiedById1;
		
		private System.Guid _Id2;
		
		private System.Guid _SchoolProgramId1;
		
		private System.Guid _ClassRoomId;
		
		private System.Nullable<System.Guid> _ProgStaffId;
		
		private bool _Active2;
		
		private System.Nullable<System.DateTime> _CreatedDateTime2;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime2;
		
		private System.Nullable<System.Guid> _CreatedById2;
		
		private System.Nullable<System.Guid> _LastModifiedById2;
		
		private System.Guid _Id3;
		
		private System.Guid _SchoolId;
		
		private string _Name;
		
		private int _MaxSize;
		
		private bool _Active3;
		
		private System.Nullable<System.Guid> _StaffId;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime3;
		
		private System.Nullable<System.Guid> _LastModifiedById3;
		
		private string _Program;
		
		private string _ClassRoomTitle;
		
		public spGetCheckDuplicateProgClassRoomIdResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					this._SchoolProgramId = value;
				}
			}
		}
		
		[Column(Storage="_Day", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this._Day = value;
				}
			}
		}
		
		[Column(Storage="_BeginTime", DbType="DateTime NOT NULL")]
		public System.DateTime BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this._BeginTime = value;
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this._EndTime = value;
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[Column(Storage="_DayIndex", DbType="Int")]
		public System.Nullable<int> DayIndex
		{
			get
			{
				return this._DayIndex;
			}
			set
			{
				if ((this._DayIndex != value))
				{
					this._DayIndex = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this._LastModifiedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
		
		[Column(Storage="_ProgClassRoomId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProgClassRoomId
		{
			get
			{
				return this._ProgClassRoomId;
			}
			set
			{
				if ((this._ProgClassRoomId != value))
				{
					this._ProgClassRoomId = value;
				}
			}
		}
		
		[Column(Storage="_Id1", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id1
		{
			get
			{
				return this._Id1;
			}
			set
			{
				if ((this._Id1 != value))
				{
					this._Id1 = value;
				}
			}
		}
		
		[Column(Storage="_SchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					this._SchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_Fees", DbType="Decimal(0,0) NOT NULL")]
		public decimal Fees
		{
			get
			{
				return this._Fees;
			}
			set
			{
				if ((this._Fees != value))
				{
					this._Fees = value;
				}
			}
		}
		
		[Column(Storage="_FeesPeriodId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FeesPeriodId
		{
			get
			{
				return this._FeesPeriodId;
			}
			set
			{
				if ((this._FeesPeriodId != value))
				{
					this._FeesPeriodId = value;
				}
			}
		}
		
		[Column(Storage="_Active1", DbType="Bit NOT NULL")]
		public bool Active1
		{
			get
			{
				return this._Active1;
			}
			set
			{
				if ((this._Active1 != value))
				{
					this._Active1 = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_IsPrimary", DbType="Bit NOT NULL")]
		public bool IsPrimary
		{
			get
			{
				return this._IsPrimary;
			}
			set
			{
				if ((this._IsPrimary != value))
				{
					this._IsPrimary = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime1", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime1
		{
			get
			{
				return this._CreatedDateTime1;
			}
			set
			{
				if ((this._CreatedDateTime1 != value))
				{
					this._CreatedDateTime1 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime1", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime1
		{
			get
			{
				return this._LastModifiedDatetime1;
			}
			set
			{
				if ((this._LastModifiedDatetime1 != value))
				{
					this._LastModifiedDatetime1 = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById1", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById1
		{
			get
			{
				return this._CreatedById1;
			}
			set
			{
				if ((this._CreatedById1 != value))
				{
					this._CreatedById1 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById1", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById1
		{
			get
			{
				return this._LastModifiedById1;
			}
			set
			{
				if ((this._LastModifiedById1 != value))
				{
					this._LastModifiedById1 = value;
				}
			}
		}
		
		[Column(Storage="_Id2", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id2
		{
			get
			{
				return this._Id2;
			}
			set
			{
				if ((this._Id2 != value))
				{
					this._Id2 = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId1", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId1
		{
			get
			{
				return this._SchoolProgramId1;
			}
			set
			{
				if ((this._SchoolProgramId1 != value))
				{
					this._SchoolProgramId1 = value;
				}
			}
		}
		
		[Column(Storage="_ClassRoomId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ClassRoomId
		{
			get
			{
				return this._ClassRoomId;
			}
			set
			{
				if ((this._ClassRoomId != value))
				{
					this._ClassRoomId = value;
				}
			}
		}
		
		[Column(Storage="_ProgStaffId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ProgStaffId
		{
			get
			{
				return this._ProgStaffId;
			}
			set
			{
				if ((this._ProgStaffId != value))
				{
					this._ProgStaffId = value;
				}
			}
		}
		
		[Column(Storage="_Active2", DbType="Bit NOT NULL")]
		public bool Active2
		{
			get
			{
				return this._Active2;
			}
			set
			{
				if ((this._Active2 != value))
				{
					this._Active2 = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime2", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime2
		{
			get
			{
				return this._CreatedDateTime2;
			}
			set
			{
				if ((this._CreatedDateTime2 != value))
				{
					this._CreatedDateTime2 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime2", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime2
		{
			get
			{
				return this._LastModifiedDatetime2;
			}
			set
			{
				if ((this._LastModifiedDatetime2 != value))
				{
					this._LastModifiedDatetime2 = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById2", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById2
		{
			get
			{
				return this._CreatedById2;
			}
			set
			{
				if ((this._CreatedById2 != value))
				{
					this._CreatedById2 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById2", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById2
		{
			get
			{
				return this._LastModifiedById2;
			}
			set
			{
				if ((this._LastModifiedById2 != value))
				{
					this._LastModifiedById2 = value;
				}
			}
		}
		
		[Column(Storage="_Id3", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id3
		{
			get
			{
				return this._Id3;
			}
			set
			{
				if ((this._Id3 != value))
				{
					this._Id3 = value;
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					this._SchoolId = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_MaxSize", DbType="Int NOT NULL")]
		public int MaxSize
		{
			get
			{
				return this._MaxSize;
			}
			set
			{
				if ((this._MaxSize != value))
				{
					this._MaxSize = value;
				}
			}
		}
		
		[Column(Storage="_Active3", DbType="Bit NOT NULL")]
		public bool Active3
		{
			get
			{
				return this._Active3;
			}
			set
			{
				if ((this._Active3 != value))
				{
					this._Active3 = value;
				}
			}
		}
		
		[Column(Storage="_StaffId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					this._StaffId = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime3", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime3
		{
			get
			{
				return this._LastModifiedDatetime3;
			}
			set
			{
				if ((this._LastModifiedDatetime3 != value))
				{
					this._LastModifiedDatetime3 = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById3", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById3
		{
			get
			{
				return this._LastModifiedById3;
			}
			set
			{
				if ((this._LastModifiedById3 != value))
				{
					this._LastModifiedById3 = value;
				}
			}
		}
		
		[Column(Storage="_Program", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Program
		{
			get
			{
				return this._Program;
			}
			set
			{
				if ((this._Program != value))
				{
					this._Program = value;
				}
			}
		}
		
		[Column(Storage="_ClassRoomTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ClassRoomTitle
		{
			get
			{
				return this._ClassRoomTitle;
			}
			set
			{
				if ((this._ClassRoomTitle != value))
				{
					this._ClassRoomTitle = value;
				}
			}
		}
	}
	
	public partial class spGetCheckBeginTimeAndEndTimeInHoursOfOprationResult
	{
		
		private System.DateTime _Begintime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private System.DateTime _Opentime;
		
		private System.DateTime _CloseTime;
		
		public spGetCheckBeginTimeAndEndTimeInHoursOfOprationResult()
		{
		}
		
		[Column(Storage="_Begintime", DbType="DateTime NOT NULL")]
		public System.DateTime Begintime
		{
			get
			{
				return this._Begintime;
			}
			set
			{
				if ((this._Begintime != value))
				{
					this._Begintime = value;
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this._EndTime = value;
				}
			}
		}
		
		[Column(Storage="_Opentime", DbType="DateTime NOT NULL")]
		public System.DateTime Opentime
		{
			get
			{
				return this._Opentime;
			}
			set
			{
				if ((this._Opentime != value))
				{
					this._Opentime = value;
				}
			}
		}
		
		[Column(Storage="_CloseTime", DbType="DateTime NOT NULL")]
		public System.DateTime CloseTime
		{
			get
			{
				return this._CloseTime;
			}
			set
			{
				if ((this._CloseTime != value))
				{
					this._CloseTime = value;
				}
			}
		}
	}
	
	public partial class spJSONChildListByClassRoomIdResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.Guid _SchoolProgramId;
		
		private System.Guid _ProgClassCategoryId;
		
		private System.Guid _ProgClassRoomId;
		
		private System.Guid _ProgScheduleId;
		
		private System.DateTime _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private decimal _Discount;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private string _Program;
		
		private string _ChildLastName;
		
		private string _ChildFirstName;
		
		private bool _Gender;
		
		private string _ChildPhoto;
		
		private string _MsgDisplayed;
		
		private System.Nullable<System.DateTime> _MsgStartDate;
		
		private System.Nullable<System.DateTime> _MsgEndDate;
		
		private System.Nullable<bool> _MsgActive;
		
		private System.Nullable<System.DateTime> _FamilyMsgLastModified;
		
		private System.Nullable<System.DateTime> _ChildModifiedDateTime;
		
		private bool _ChildActive;
		
		public spJSONChildListByClassRoomIdResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					this._ChildSchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					this._SchoolProgramId = value;
				}
			}
		}
		
		[Column(Storage="_ProgClassCategoryId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProgClassCategoryId
		{
			get
			{
				return this._ProgClassCategoryId;
			}
			set
			{
				if ((this._ProgClassCategoryId != value))
				{
					this._ProgClassCategoryId = value;
				}
			}
		}
		
		[Column(Storage="_ProgClassRoomId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProgClassRoomId
		{
			get
			{
				return this._ProgClassRoomId;
			}
			set
			{
				if ((this._ProgClassRoomId != value))
				{
					this._ProgClassRoomId = value;
				}
			}
		}
		
		[Column(Storage="_ProgScheduleId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProgScheduleId
		{
			get
			{
				return this._ProgScheduleId;
			}
			set
			{
				if ((this._ProgScheduleId != value))
				{
					this._ProgScheduleId = value;
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this._BeginDate = value;
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
		
		[Column(Storage="_Discount", DbType="Decimal(0,0) NOT NULL")]
		public decimal Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this._Discount = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this._LastModifiedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
		
		[Column(Storage="_Program", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Program
		{
			get
			{
				return this._Program;
			}
			set
			{
				if ((this._Program != value))
				{
					this._Program = value;
				}
			}
		}
		
		[Column(Storage="_ChildLastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ChildLastName
		{
			get
			{
				return this._ChildLastName;
			}
			set
			{
				if ((this._ChildLastName != value))
				{
					this._ChildLastName = value;
				}
			}
		}
		
		[Column(Storage="_ChildFirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ChildFirstName
		{
			get
			{
				return this._ChildFirstName;
			}
			set
			{
				if ((this._ChildFirstName != value))
				{
					this._ChildFirstName = value;
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="Bit NOT NULL")]
		public bool Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this._Gender = value;
				}
			}
		}
		
		[Column(Storage="_ChildPhoto", DbType="NVarChar(100)")]
		public string ChildPhoto
		{
			get
			{
				return this._ChildPhoto;
			}
			set
			{
				if ((this._ChildPhoto != value))
				{
					this._ChildPhoto = value;
				}
			}
		}
		
		[Column(Storage="_MsgDisplayed", DbType="NVarChar(500)")]
		public string MsgDisplayed
		{
			get
			{
				return this._MsgDisplayed;
			}
			set
			{
				if ((this._MsgDisplayed != value))
				{
					this._MsgDisplayed = value;
				}
			}
		}
		
		[Column(Storage="_MsgStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MsgStartDate
		{
			get
			{
				return this._MsgStartDate;
			}
			set
			{
				if ((this._MsgStartDate != value))
				{
					this._MsgStartDate = value;
				}
			}
		}
		
		[Column(Storage="_MsgEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MsgEndDate
		{
			get
			{
				return this._MsgEndDate;
			}
			set
			{
				if ((this._MsgEndDate != value))
				{
					this._MsgEndDate = value;
				}
			}
		}
		
		[Column(Storage="_MsgActive", DbType="Bit")]
		public System.Nullable<bool> MsgActive
		{
			get
			{
				return this._MsgActive;
			}
			set
			{
				if ((this._MsgActive != value))
				{
					this._MsgActive = value;
				}
			}
		}
		
		[Column(Storage="_FamilyMsgLastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> FamilyMsgLastModified
		{
			get
			{
				return this._FamilyMsgLastModified;
			}
			set
			{
				if ((this._FamilyMsgLastModified != value))
				{
					this._FamilyMsgLastModified = value;
				}
			}
		}
		
		[Column(Storage="_ChildModifiedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ChildModifiedDateTime
		{
			get
			{
				return this._ChildModifiedDateTime;
			}
			set
			{
				if ((this._ChildModifiedDateTime != value))
				{
					this._ChildModifiedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_ChildActive", DbType="Bit NOT NULL")]
		public bool ChildActive
		{
			get
			{
				return this._ChildActive;
			}
			set
			{
				if ((this._ChildActive != value))
				{
					this._ChildActive = value;
				}
			}
		}
	}
	
	public partial class spGetChildScheduleListResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.Guid _SchoolProgramId;
		
		private System.Guid _ProgClassRoomId;
		
		private System.Guid _ProgScheduleId;
		
		private System.DateTime _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private decimal _Discount;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private string _Day;
		
		private System.DateTime _BeginTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private string _SchoolProgram;
		
		private string _ProgClassRoom;
		
		private string _FullName;
		
		public spGetChildScheduleListResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					this._ChildSchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					this._SchoolProgramId = value;
				}
			}
		}
		
		[Column(Storage="_ProgClassRoomId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProgClassRoomId
		{
			get
			{
				return this._ProgClassRoomId;
			}
			set
			{
				if ((this._ProgClassRoomId != value))
				{
					this._ProgClassRoomId = value;
				}
			}
		}
		
		[Column(Storage="_ProgScheduleId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProgScheduleId
		{
			get
			{
				return this._ProgScheduleId;
			}
			set
			{
				if ((this._ProgScheduleId != value))
				{
					this._ProgScheduleId = value;
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this._BeginDate = value;
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
		
		[Column(Storage="_Discount", DbType="Decimal(0,0) NOT NULL")]
		public decimal Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this._Discount = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this._LastModifiedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
		
		[Column(Storage="_Day", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this._Day = value;
				}
			}
		}
		
		[Column(Storage="_BeginTime", DbType="DateTime NOT NULL")]
		public System.DateTime BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this._BeginTime = value;
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this._EndTime = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgram", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string SchoolProgram
		{
			get
			{
				return this._SchoolProgram;
			}
			set
			{
				if ((this._SchoolProgram != value))
				{
					this._SchoolProgram = value;
				}
			}
		}
		
		[Column(Storage="_ProgClassRoom", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProgClassRoom
		{
			get
			{
				return this._ProgClassRoom;
			}
			set
			{
				if ((this._ProgClassRoom != value))
				{
					this._ProgClassRoom = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(101) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
	}
	
	public partial class spGetChildScheduleByIdResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.Guid _SchoolProgramId;
		
		private System.Guid _ProgClassRoomId;
		
		private System.Guid _ProgScheduleId;
		
		private System.DateTime _BeginDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private decimal _Discount;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private string _Day;
		
		private System.DateTime _BeginTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private string _SchoolProgram;
		
		private string _ProgClassRoom;
		
		private string _FullName;
		
		public spGetChildScheduleByIdResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					this._ChildSchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					this._SchoolProgramId = value;
				}
			}
		}
		
		[Column(Storage="_ProgClassRoomId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProgClassRoomId
		{
			get
			{
				return this._ProgClassRoomId;
			}
			set
			{
				if ((this._ProgClassRoomId != value))
				{
					this._ProgClassRoomId = value;
				}
			}
		}
		
		[Column(Storage="_ProgScheduleId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProgScheduleId
		{
			get
			{
				return this._ProgScheduleId;
			}
			set
			{
				if ((this._ProgScheduleId != value))
				{
					this._ProgScheduleId = value;
				}
			}
		}
		
		[Column(Storage="_BeginDate", DbType="DateTime NOT NULL")]
		public System.DateTime BeginDate
		{
			get
			{
				return this._BeginDate;
			}
			set
			{
				if ((this._BeginDate != value))
				{
					this._BeginDate = value;
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
		
		[Column(Storage="_Discount", DbType="Decimal(0,0) NOT NULL")]
		public decimal Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this._Discount = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this._LastModifiedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
		
		[Column(Storage="_Day", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this._Day = value;
				}
			}
		}
		
		[Column(Storage="_BeginTime", DbType="DateTime NOT NULL")]
		public System.DateTime BeginTime
		{
			get
			{
				return this._BeginTime;
			}
			set
			{
				if ((this._BeginTime != value))
				{
					this._BeginTime = value;
				}
			}
		}
		
		[Column(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this._EndTime = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgram", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string SchoolProgram
		{
			get
			{
				return this._SchoolProgram;
			}
			set
			{
				if ((this._SchoolProgram != value))
				{
					this._SchoolProgram = value;
				}
			}
		}
		
		[Column(Storage="_ProgClassRoom", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProgClassRoom
		{
			get
			{
				return this._ProgClassRoom;
			}
			set
			{
				if ((this._ProgClassRoom != value))
				{
					this._ProgClassRoom = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(101) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
	}
	
	public partial class spGetChildProgEnrollmentResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.Guid _SchoolProgramId;
		
		private System.Guid _ProgClassRoomId;
		
		private int _DayIndex;
		
		private string _DayType;
		
		private System.DateTime _CreatedDateTime;
		
		private System.DateTime _LastModifiedDateTime;
		
		private System.Guid _CreatedById;
		
		private System.Guid _LastModifiedById;
		
		public spGetChildProgEnrollmentResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					this._ChildSchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					this._SchoolProgramId = value;
				}
			}
		}
		
		[Column(Storage="_ProgClassRoomId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProgClassRoomId
		{
			get
			{
				return this._ProgClassRoomId;
			}
			set
			{
				if ((this._ProgClassRoomId != value))
				{
					this._ProgClassRoomId = value;
				}
			}
		}
		
		[Column(Storage="_DayIndex", DbType="Int NOT NULL")]
		public int DayIndex
		{
			get
			{
				return this._DayIndex;
			}
			set
			{
				if ((this._DayIndex != value))
				{
					this._DayIndex = value;
				}
			}
		}
		
		[Column(Storage="_DayType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DayType
		{
			get
			{
				return this._DayType;
			}
			set
			{
				if ((this._DayType != value))
				{
					this._DayType = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastModifiedDateTime
		{
			get
			{
				return this._LastModifiedDateTime;
			}
			set
			{
				if ((this._LastModifiedDateTime != value))
				{
					this._LastModifiedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
	}
	
	public partial class spGetChildProgEnrollmentAllResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.Guid _SchoolProgramId;
		
		private string _Program;
		
		private System.Guid _ProgClassRoomId;
		
		private string _ClassRoomTitle;
		
		private int _DayIndex;
		
		private string _Day;
		
		private string _DayType;
		
		private System.DateTime _CreatedDateTime;
		
		private System.DateTime _LastModifiedDateTime;
		
		private System.Guid _CreatedById;
		
		private System.Guid _LastModifiedById;
		
		public spGetChildProgEnrollmentAllResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					this._ChildSchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					this._SchoolProgramId = value;
				}
			}
		}
		
		[Column(Storage="_Program", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Program
		{
			get
			{
				return this._Program;
			}
			set
			{
				if ((this._Program != value))
				{
					this._Program = value;
				}
			}
		}
		
		[Column(Storage="_ProgClassRoomId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProgClassRoomId
		{
			get
			{
				return this._ProgClassRoomId;
			}
			set
			{
				if ((this._ProgClassRoomId != value))
				{
					this._ProgClassRoomId = value;
				}
			}
		}
		
		[Column(Storage="_ClassRoomTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ClassRoomTitle
		{
			get
			{
				return this._ClassRoomTitle;
			}
			set
			{
				if ((this._ClassRoomTitle != value))
				{
					this._ClassRoomTitle = value;
				}
			}
		}
		
		[Column(Storage="_DayIndex", DbType="Int NOT NULL")]
		public int DayIndex
		{
			get
			{
				return this._DayIndex;
			}
			set
			{
				if ((this._DayIndex != value))
				{
					this._DayIndex = value;
				}
			}
		}
		
		[Column(Storage="_Day", DbType="VarChar(3)")]
		public string Day
		{
			get
			{
				return this._Day;
			}
			set
			{
				if ((this._Day != value))
				{
					this._Day = value;
				}
			}
		}
		
		[Column(Storage="_DayType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DayType
		{
			get
			{
				return this._DayType;
			}
			set
			{
				if ((this._DayType != value))
				{
					this._DayType = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastModifiedDateTime
		{
			get
			{
				return this._LastModifiedDateTime;
			}
			set
			{
				if ((this._LastModifiedDateTime != value))
				{
					this._LastModifiedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
	}
	
	public partial class spJSONGetListOfActiveChildrenResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _ChildSchoolYearId;
		
		private System.Guid _SchoolProgramId;
		
		private System.Guid _ProgClassRoomId;
		
		private int _DayIndex;
		
		private string _DayType;
		
		private System.DateTime _CreatedDateTime;
		
		private System.DateTime _LastModifiedDateTime;
		
		private System.Guid _CreatedById;
		
		private System.Guid _LastModifiedById;
		
		private string _Program;
		
		private string _ChildLastName;
		
		private string _ChildFirstName;
		
		private bool _ChildActive;
		
		private string _PassCode;
		
		private bool _Gender;
		
		private string _ChildPhoto;
		
		private string _MsgDisplayed;
		
		private System.Nullable<System.DateTime> _MsgStartDate;
		
		private System.Nullable<System.DateTime> _MsgEndDate;
		
		private System.Nullable<bool> _MsgActive;
		
		private System.Nullable<System.DateTime> _FamilyMsgLastModified;
		
		private System.Nullable<System.DateTime> _ChildModifiedDateTime;
		
		private string _ClassRoomTitle;
		
		private System.Guid _SchoolYearId;
		
		public spJSONGetListOfActiveChildrenResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					this._ChildSchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					this._SchoolProgramId = value;
				}
			}
		}
		
		[Column(Storage="_ProgClassRoomId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ProgClassRoomId
		{
			get
			{
				return this._ProgClassRoomId;
			}
			set
			{
				if ((this._ProgClassRoomId != value))
				{
					this._ProgClassRoomId = value;
				}
			}
		}
		
		[Column(Storage="_DayIndex", DbType="Int NOT NULL")]
		public int DayIndex
		{
			get
			{
				return this._DayIndex;
			}
			set
			{
				if ((this._DayIndex != value))
				{
					this._DayIndex = value;
				}
			}
		}
		
		[Column(Storage="_DayType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DayType
		{
			get
			{
				return this._DayType;
			}
			set
			{
				if ((this._DayType != value))
				{
					this._DayType = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastModifiedDateTime
		{
			get
			{
				return this._LastModifiedDateTime;
			}
			set
			{
				if ((this._LastModifiedDateTime != value))
				{
					this._LastModifiedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
		
		[Column(Storage="_Program", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Program
		{
			get
			{
				return this._Program;
			}
			set
			{
				if ((this._Program != value))
				{
					this._Program = value;
				}
			}
		}
		
		[Column(Storage="_ChildLastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ChildLastName
		{
			get
			{
				return this._ChildLastName;
			}
			set
			{
				if ((this._ChildLastName != value))
				{
					this._ChildLastName = value;
				}
			}
		}
		
		[Column(Storage="_ChildFirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ChildFirstName
		{
			get
			{
				return this._ChildFirstName;
			}
			set
			{
				if ((this._ChildFirstName != value))
				{
					this._ChildFirstName = value;
				}
			}
		}
		
		[Column(Storage="_ChildActive", DbType="Bit NOT NULL")]
		public bool ChildActive
		{
			get
			{
				return this._ChildActive;
			}
			set
			{
				if ((this._ChildActive != value))
				{
					this._ChildActive = value;
				}
			}
		}
		
		[Column(Storage="_PassCode", DbType="NVarChar(50)")]
		public string PassCode
		{
			get
			{
				return this._PassCode;
			}
			set
			{
				if ((this._PassCode != value))
				{
					this._PassCode = value;
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="Bit NOT NULL")]
		public bool Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this._Gender = value;
				}
			}
		}
		
		[Column(Storage="_ChildPhoto", DbType="NVarChar(100)")]
		public string ChildPhoto
		{
			get
			{
				return this._ChildPhoto;
			}
			set
			{
				if ((this._ChildPhoto != value))
				{
					this._ChildPhoto = value;
				}
			}
		}
		
		[Column(Storage="_MsgDisplayed", DbType="NVarChar(500)")]
		public string MsgDisplayed
		{
			get
			{
				return this._MsgDisplayed;
			}
			set
			{
				if ((this._MsgDisplayed != value))
				{
					this._MsgDisplayed = value;
				}
			}
		}
		
		[Column(Storage="_MsgStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MsgStartDate
		{
			get
			{
				return this._MsgStartDate;
			}
			set
			{
				if ((this._MsgStartDate != value))
				{
					this._MsgStartDate = value;
				}
			}
		}
		
		[Column(Storage="_MsgEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MsgEndDate
		{
			get
			{
				return this._MsgEndDate;
			}
			set
			{
				if ((this._MsgEndDate != value))
				{
					this._MsgEndDate = value;
				}
			}
		}
		
		[Column(Storage="_MsgActive", DbType="Bit")]
		public System.Nullable<bool> MsgActive
		{
			get
			{
				return this._MsgActive;
			}
			set
			{
				if ((this._MsgActive != value))
				{
					this._MsgActive = value;
				}
			}
		}
		
		[Column(Storage="_FamilyMsgLastModified", DbType="DateTime")]
		public System.Nullable<System.DateTime> FamilyMsgLastModified
		{
			get
			{
				return this._FamilyMsgLastModified;
			}
			set
			{
				if ((this._FamilyMsgLastModified != value))
				{
					this._FamilyMsgLastModified = value;
				}
			}
		}
		
		[Column(Storage="_ChildModifiedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ChildModifiedDateTime
		{
			get
			{
				return this._ChildModifiedDateTime;
			}
			set
			{
				if ((this._ChildModifiedDateTime != value))
				{
					this._ChildModifiedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_ClassRoomTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ClassRoomTitle
		{
			get
			{
				return this._ClassRoomTitle;
			}
			set
			{
				if ((this._ClassRoomTitle != value))
				{
					this._ClassRoomTitle = value;
				}
			}
		}
		
		[Column(Storage="_SchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					this._SchoolYearId = value;
				}
			}
		}
	}
	
	public partial class spGetSchoolProgramResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _SchoolYearId;
		
		private string _Title;
		
		private bool _Active;
		
		private string _Comments;
		
		private bool _IsPrimary;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		public spGetSchoolProgramResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_SchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					this._SchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_IsPrimary", DbType="Bit NOT NULL")]
		public bool IsPrimary
		{
			get
			{
				return this._IsPrimary;
			}
			set
			{
				if ((this._IsPrimary != value))
				{
					this._IsPrimary = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this._LastModifiedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
	}
	
	public partial class spGetSchoolProgramIdAndNameResult
	{
		
		private System.Guid _Id;
		
		private string _IsPrimary;
		
		public spGetSchoolProgramIdAndNameResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_IsPrimary", DbType="NVarChar(210) NOT NULL", CanBeNull=false)]
		public string IsPrimary
		{
			get
			{
				return this._IsPrimary;
			}
			set
			{
				if ((this._IsPrimary != value))
				{
					this._IsPrimary = value;
				}
			}
		}
	}
	
	public partial class spGetAllChildDataListResult
	{
		
		private System.Guid _ChildDataId;
		
		private string _ChildFullName;
		
		private System.Guid _ChildFamilyId;
		
		private string _FamilyFullName;
		
		private string _Email;
		
		private string _HomePhone;
		
		private bool _Active;
		
		private string _Photo;
		
		private bool _Gender;
		
		public spGetAllChildDataListResult()
		{
		}
		
		[Column(Storage="_ChildDataId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildDataId
		{
			get
			{
				return this._ChildDataId;
			}
			set
			{
				if ((this._ChildDataId != value))
				{
					this._ChildDataId = value;
				}
			}
		}
		
		[Column(Storage="_ChildFullName", DbType="NVarChar(102) NOT NULL", CanBeNull=false)]
		public string ChildFullName
		{
			get
			{
				return this._ChildFullName;
			}
			set
			{
				if ((this._ChildFullName != value))
				{
					this._ChildFullName = value;
				}
			}
		}
		
		[Column(Storage="_ChildFamilyId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildFamilyId
		{
			get
			{
				return this._ChildFamilyId;
			}
			set
			{
				if ((this._ChildFamilyId != value))
				{
					this._ChildFamilyId = value;
				}
			}
		}
		
		[Column(Storage="_FamilyFullName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string FamilyFullName
		{
			get
			{
				return this._FamilyFullName;
			}
			set
			{
				if ((this._FamilyFullName != value))
				{
					this._FamilyFullName = value;
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[Column(Storage="_HomePhone", DbType="NVarChar(20)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this._HomePhone = value;
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="NVarChar(100)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this._Photo = value;
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="Bit NOT NULL")]
		public bool Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this._Gender = value;
				}
			}
		}
	}
	
	public partial class spGetLedgerDetailResult
	{
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _SchoolYearId;
		
		private System.Nullable<System.Guid> _ChildFamilyId;
		
		private System.Nullable<System.Guid> _PaymentId;
		
		private System.DateTime _TransactionDate;
		
		private string _Detail;
		
		private System.Nullable<System.Guid> _ChildDataId;
		
		private string _FamilyTitle;
		
		private decimal _Debit;
		
		private decimal _Credit;
		
		private decimal _Balance;
		
		private string _FamilyTitle1;
		
		private bool _AllowEdit;
		
		private string _Comment;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private System.Nullable<int> _PaymentMethodId;
		
		private System.Nullable<System.Guid> _ChargeCodeCategoryId;
		
		private string _ChargeCodeName;
		
		public spGetLedgerDetailResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_SchoolYearId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SchoolYearId
		{
			get
			{
				return this._SchoolYearId;
			}
			set
			{
				if ((this._SchoolYearId != value))
				{
					this._SchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_ChildFamilyId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ChildFamilyId
		{
			get
			{
				return this._ChildFamilyId;
			}
			set
			{
				if ((this._ChildFamilyId != value))
				{
					this._ChildFamilyId = value;
				}
			}
		}
		
		[Column(Storage="_PaymentId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> PaymentId
		{
			get
			{
				return this._PaymentId;
			}
			set
			{
				if ((this._PaymentId != value))
				{
					this._PaymentId = value;
				}
			}
		}
		
		[Column(Storage="_TransactionDate", DbType="DateTime NOT NULL")]
		public System.DateTime TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this._TransactionDate = value;
				}
			}
		}
		
		[Column(Storage="_Detail", DbType="NChar(100)")]
		public string Detail
		{
			get
			{
				return this._Detail;
			}
			set
			{
				if ((this._Detail != value))
				{
					this._Detail = value;
				}
			}
		}
		
		[Column(Storage="_ChildDataId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ChildDataId
		{
			get
			{
				return this._ChildDataId;
			}
			set
			{
				if ((this._ChildDataId != value))
				{
					this._ChildDataId = value;
				}
			}
		}
		
		[Column(Storage="_FamilyTitle", DbType="NVarChar(500)")]
		public string FamilyTitle
		{
			get
			{
				return this._FamilyTitle;
			}
			set
			{
				if ((this._FamilyTitle != value))
				{
					this._FamilyTitle = value;
				}
			}
		}
		
		[Column(Storage="_Debit", DbType="Decimal(0,0) NOT NULL")]
		public decimal Debit
		{
			get
			{
				return this._Debit;
			}
			set
			{
				if ((this._Debit != value))
				{
					this._Debit = value;
				}
			}
		}
		
		[Column(Storage="_Credit", DbType="Decimal(0,0) NOT NULL")]
		public decimal Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this._Credit = value;
				}
			}
		}
		
		[Column(Storage="_Balance", DbType="Decimal(0,0) NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this._Balance = value;
				}
			}
		}
		
		[Column(Storage="_FamilyTitle1", DbType="NVarChar(500)")]
		public string FamilyTitle1
		{
			get
			{
				return this._FamilyTitle1;
			}
			set
			{
				if ((this._FamilyTitle1 != value))
				{
					this._FamilyTitle1 = value;
				}
			}
		}
		
		[Column(Storage="_AllowEdit", DbType="Bit NOT NULL")]
		public bool AllowEdit
		{
			get
			{
				return this._AllowEdit;
			}
			set
			{
				if ((this._AllowEdit != value))
				{
					this._AllowEdit = value;
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(500)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this._Comment = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this._LastModifiedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
		
		[Column(Storage="_PaymentMethodId", DbType="Int")]
		public System.Nullable<int> PaymentMethodId
		{
			get
			{
				return this._PaymentMethodId;
			}
			set
			{
				if ((this._PaymentMethodId != value))
				{
					this._PaymentMethodId = value;
				}
			}
		}
		
		[Column(Storage="_ChargeCodeCategoryId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ChargeCodeCategoryId
		{
			get
			{
				return this._ChargeCodeCategoryId;
			}
			set
			{
				if ((this._ChargeCodeCategoryId != value))
				{
					this._ChargeCodeCategoryId = value;
				}
			}
		}
		
		[Column(Storage="_ChargeCodeName", DbType="NVarChar(100)")]
		public string ChargeCodeName
		{
			get
			{
				return this._ChargeCodeName;
			}
			set
			{
				if ((this._ChargeCodeName != value))
				{
					this._ChargeCodeName = value;
				}
			}
		}
	}
	
	public partial class spGetChildListResult
	{
		
		private System.Guid _Id;
		
		private string _ChildFullName;
		
		private string _Photo;
		
		public spGetChildListResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_ChildFullName", DbType="NVarChar(102) NOT NULL", CanBeNull=false)]
		public string ChildFullName
		{
			get
			{
				return this._ChildFullName;
			}
			set
			{
				if ((this._ChildFullName != value))
				{
					this._ChildFullName = value;
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="NVarChar(100)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this._Photo = value;
				}
			}
		}
	}
	
	public partial class spChildAttendanceHistoryListResult
	{
		
		private System.Guid _id;
		
		private string _Name;
		
		private string _Date;
		
		private string _CheckIn;
		
		private string _CheckOut;
		
		public spChildAttendanceHistoryListResult()
		{
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(102) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Date", DbType="NVarChar(8)")]
		public string Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this._Date = value;
				}
			}
		}
		
		[Column(Storage="_CheckIn", DbType="NVarChar(8)")]
		public string CheckIn
		{
			get
			{
				return this._CheckIn;
			}
			set
			{
				if ((this._CheckIn != value))
				{
					this._CheckIn = value;
				}
			}
		}
		
		[Column(Storage="_CheckOut", DbType="NVarChar(8)")]
		public string CheckOut
		{
			get
			{
				return this._CheckOut;
			}
			set
			{
				if ((this._CheckOut != value))
				{
					this._CheckOut = value;
				}
			}
		}
	}
	
	public partial class spStaffAttendanceHistoryListResult
	{
		
		private System.Guid _id;
		
		private string _Name;
		
		private System.Guid _schoolyearid;
		
		private System.DateTime _checkincheckoutdatetime;
		
		private string _CheckIn;
		
		private string _CheckOut;
		
		private System.Guid _StaffSchoolyearId;
		
		public spStaffAttendanceHistoryListResult()
		{
		}
		
		[Column(Storage="_id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this._id = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(102) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_schoolyearid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid schoolyearid
		{
			get
			{
				return this._schoolyearid;
			}
			set
			{
				if ((this._schoolyearid != value))
				{
					this._schoolyearid = value;
				}
			}
		}
		
		[Column(Storage="_checkincheckoutdatetime", DbType="DateTime NOT NULL")]
		public System.DateTime checkincheckoutdatetime
		{
			get
			{
				return this._checkincheckoutdatetime;
			}
			set
			{
				if ((this._checkincheckoutdatetime != value))
				{
					this._checkincheckoutdatetime = value;
				}
			}
		}
		
		[Column(Storage="_CheckIn", DbType="NVarChar(8)")]
		public string CheckIn
		{
			get
			{
				return this._CheckIn;
			}
			set
			{
				if ((this._CheckIn != value))
				{
					this._CheckIn = value;
				}
			}
		}
		
		[Column(Storage="_CheckOut", DbType="NVarChar(8)")]
		public string CheckOut
		{
			get
			{
				return this._CheckOut;
			}
			set
			{
				if ((this._CheckOut != value))
				{
					this._CheckOut = value;
				}
			}
		}
		
		[Column(Storage="_StaffSchoolyearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StaffSchoolyearId
		{
			get
			{
				return this._StaffSchoolyearId;
			}
			set
			{
				if ((this._StaffSchoolyearId != value))
				{
					this._StaffSchoolyearId = value;
				}
			}
		}
	}
	
	public partial class spGetStaffListResult
	{
		
		private System.Guid _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Photo;
		
		private System.Guid _StaffSchoolYearId;
		
		public spGetStaffListResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this._FirstName = value;
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this._LastName = value;
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="NVarChar(100)")]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this._Photo = value;
				}
			}
		}
		
		[Column(Storage="_StaffSchoolYearId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid StaffSchoolYearId
		{
			get
			{
				return this._StaffSchoolYearId;
			}
			set
			{
				if ((this._StaffSchoolYearId != value))
				{
					this._StaffSchoolYearId = value;
				}
			}
		}
	}
	
	public partial class spGetChildFamilyResult
	{
		
		private System.Guid _Id;
		
		private System.Guid _SchoolId;
		
		private string _FamilyTitle;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Code;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private System.Nullable<System.Guid> _StateId;
		
		private string _Zip;
		
		private string _HomePhone;
		
		private string _Comments;
		
		private string _MsgDisplayed;
		
		private System.Nullable<System.DateTime> _MsgStartDate;
		
		private System.Nullable<System.DateTime> _MsgEndDate;
		
		private System.Nullable<bool> _MsgActive;
		
		private System.Nullable<System.DateTime> _CreatedDateTime;
		
		private System.Nullable<System.DateTime> _LastModifiedDatetime;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.Guid> _LastModifiedById;
		
		private string _Email;
		
		private string _ChildName;
		
		public spGetChildFamilyResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					this._SchoolId = value;
				}
			}
		}
		
		[Column(Storage="_FamilyTitle", DbType="NVarChar(500)")]
		public string FamilyTitle
		{
			get
			{
				return this._FamilyTitle;
			}
			set
			{
				if ((this._FamilyTitle != value))
				{
					this._FamilyTitle = value;
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
		
		[Column(Storage="_Address1", DbType="NVarChar(200)")]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this._Address1 = value;
				}
			}
		}
		
		[Column(Storage="_Address2", DbType="NVarChar(200)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this._Address2 = value;
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(200)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[Column(Storage="_StateId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					this._StateId = value;
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="NVarChar(10)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this._Zip = value;
				}
			}
		}
		
		[Column(Storage="_HomePhone", DbType="NVarChar(20)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this._HomePhone = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_MsgDisplayed", DbType="NVarChar(500)")]
		public string MsgDisplayed
		{
			get
			{
				return this._MsgDisplayed;
			}
			set
			{
				if ((this._MsgDisplayed != value))
				{
					this._MsgDisplayed = value;
				}
			}
		}
		
		[Column(Storage="_MsgStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MsgStartDate
		{
			get
			{
				return this._MsgStartDate;
			}
			set
			{
				if ((this._MsgStartDate != value))
				{
					this._MsgStartDate = value;
				}
			}
		}
		
		[Column(Storage="_MsgEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MsgEndDate
		{
			get
			{
				return this._MsgEndDate;
			}
			set
			{
				if ((this._MsgEndDate != value))
				{
					this._MsgEndDate = value;
				}
			}
		}
		
		[Column(Storage="_MsgActive", DbType="Bit")]
		public System.Nullable<bool> MsgActive
		{
			get
			{
				return this._MsgActive;
			}
			set
			{
				if ((this._MsgActive != value))
				{
					this._MsgActive = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDateTime
		{
			get
			{
				return this._CreatedDateTime;
			}
			set
			{
				if ((this._CreatedDateTime != value))
				{
					this._CreatedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastModifiedDatetime
		{
			get
			{
				return this._LastModifiedDatetime;
			}
			set
			{
				if ((this._LastModifiedDatetime != value))
				{
					this._LastModifiedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_LastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastModifiedById
		{
			get
			{
				return this._LastModifiedById;
			}
			set
			{
				if ((this._LastModifiedById != value))
				{
					this._LastModifiedById = value;
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[Column(Storage="_ChildName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ChildName
		{
			get
			{
				return this._ChildName;
			}
			set
			{
				if ((this._ChildName != value))
				{
					this._ChildName = value;
				}
			}
		}
	}
	
	public partial class spGetSchoolProgramFeesDetailResult
	{
		
		private System.Guid _Id;
		
		private string _ProgramTitle;
		
		private string _Name;
		
		private decimal _Fees;
		
		private System.Guid _SchoolProgramId;
		
		private System.Guid _FeesPeriodId;
		
		private System.Nullable<System.DateTime> _EffectiveYearDate;
		
		private System.Nullable<int> _EffectiveMonthDay;
		
		private System.Nullable<int> _EffectiveWeekDay;
		
		public spGetSchoolProgramFeesDetailResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_ProgramTitle", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string ProgramTitle
		{
			get
			{
				return this._ProgramTitle;
			}
			set
			{
				if ((this._ProgramTitle != value))
				{
					this._ProgramTitle = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Fees", DbType="Decimal(0,0) NOT NULL")]
		public decimal Fees
		{
			get
			{
				return this._Fees;
			}
			set
			{
				if ((this._Fees != value))
				{
					this._Fees = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					this._SchoolProgramId = value;
				}
			}
		}
		
		[Column(Storage="_FeesPeriodId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FeesPeriodId
		{
			get
			{
				return this._FeesPeriodId;
			}
			set
			{
				if ((this._FeesPeriodId != value))
				{
					this._FeesPeriodId = value;
				}
			}
		}
		
		[Column(Storage="_EffectiveYearDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EffectiveYearDate
		{
			get
			{
				return this._EffectiveYearDate;
			}
			set
			{
				if ((this._EffectiveYearDate != value))
				{
					this._EffectiveYearDate = value;
				}
			}
		}
		
		[Column(Storage="_EffectiveMonthDay", DbType="Int")]
		public System.Nullable<int> EffectiveMonthDay
		{
			get
			{
				return this._EffectiveMonthDay;
			}
			set
			{
				if ((this._EffectiveMonthDay != value))
				{
					this._EffectiveMonthDay = value;
				}
			}
		}
		
		[Column(Storage="_EffectiveWeekDay", DbType="Int")]
		public System.Nullable<int> EffectiveWeekDay
		{
			get
			{
				return this._EffectiveWeekDay;
			}
			set
			{
				if ((this._EffectiveWeekDay != value))
				{
					this._EffectiveWeekDay = value;
				}
			}
		}
	}
	
	public partial class spGetLateFeeofFamiliesResult
	{
		
		private System.Guid _Id;
		
		private string _FamilyTitle;
		
		private string _ChildName;
		
		private decimal _Debit;
		
		private decimal _Credit;
		
		private decimal _Balance;
		
		public spGetLateFeeofFamiliesResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_FamilyTitle", DbType="NVarChar(500)")]
		public string FamilyTitle
		{
			get
			{
				return this._FamilyTitle;
			}
			set
			{
				if ((this._FamilyTitle != value))
				{
					this._FamilyTitle = value;
				}
			}
		}
		
		[Column(Storage="_ChildName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ChildName
		{
			get
			{
				return this._ChildName;
			}
			set
			{
				if ((this._ChildName != value))
				{
					this._ChildName = value;
				}
			}
		}
		
		[Column(Storage="_Debit", DbType="Decimal(0,0) NOT NULL")]
		public decimal Debit
		{
			get
			{
				return this._Debit;
			}
			set
			{
				if ((this._Debit != value))
				{
					this._Debit = value;
				}
			}
		}
		
		[Column(Storage="_Credit", DbType="Decimal(0,0) NOT NULL")]
		public decimal Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this._Credit = value;
				}
			}
		}
		
		[Column(Storage="_Balance", DbType="Decimal(0,0) NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this._Balance = value;
				}
			}
		}
	}
	
	public partial class spGetFamilywiseChildNameResult
	{
		
		private string _XML_F52E2B61_18A1_11d1_B105_00805F49916B;
		
		public spGetFamilywiseChildNameResult()
		{
		}
		
		[Column(Name="[XML_F52E2B61-18A1-11d1-B105-00805F49916B]", Storage="_XML_F52E2B61_18A1_11d1_B105_00805F49916B", DbType="NText", UpdateCheck=UpdateCheck.Never)]
		public string XML_F52E2B61_18A1_11d1_B105_00805F49916B
		{
			get
			{
				return this._XML_F52E2B61_18A1_11d1_B105_00805F49916B;
			}
			set
			{
				if ((this._XML_F52E2B61_18A1_11d1_B105_00805F49916B != value))
				{
					this._XML_F52E2B61_18A1_11d1_B105_00805F49916B = value;
				}
			}
		}
	}
	
	public partial class spGetFamiliesWithChildResult
	{
		
		private System.Guid _Id;
		
		private string _FamilyTitle;
		
		private string _ChildName;
		
		public spGetFamiliesWithChildResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_FamilyTitle", DbType="NVarChar(500)")]
		public string FamilyTitle
		{
			get
			{
				return this._FamilyTitle;
			}
			set
			{
				if ((this._FamilyTitle != value))
				{
					this._FamilyTitle = value;
				}
			}
		}
		
		[Column(Storage="_ChildName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ChildName
		{
			get
			{
				return this._ChildName;
			}
			set
			{
				if ((this._ChildName != value))
				{
					this._ChildName = value;
				}
			}
		}
	}
	
	public partial class spGetLateFeeofFamiliesReportResult
	{
		
		private System.Guid _Id;
		
		private string _FamilyTitle;
		
		private string _ChildName;
		
		private decimal _LateFee;
		
		private System.Nullable<System.DateTime> _TransactionDate;
		
		public spGetLateFeeofFamiliesReportResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_FamilyTitle", DbType="NVarChar(500)")]
		public string FamilyTitle
		{
			get
			{
				return this._FamilyTitle;
			}
			set
			{
				if ((this._FamilyTitle != value))
				{
					this._FamilyTitle = value;
				}
			}
		}
		
		[Column(Storage="_ChildName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ChildName
		{
			get
			{
				return this._ChildName;
			}
			set
			{
				if ((this._ChildName != value))
				{
					this._ChildName = value;
				}
			}
		}
		
		[Column(Storage="_LateFee", DbType="Decimal(0,0) NOT NULL")]
		public decimal LateFee
		{
			get
			{
				return this._LateFee;
			}
			set
			{
				if ((this._LateFee != value))
				{
					this._LateFee = value;
				}
			}
		}
		
		[Column(Storage="_TransactionDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this._TransactionDate = value;
				}
			}
		}
	}
	
	public partial class spGetLastYearClosingBalanceResult
	{
		
		private System.Nullable<decimal> _balance;
		
		private string _year;
		
		public spGetLastYearClosingBalanceResult()
		{
		}
		
		[Column(Storage="_balance", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> balance
		{
			get
			{
				return this._balance;
			}
			set
			{
				if ((this._balance != value))
				{
					this._balance = value;
				}
			}
		}
		
		[Column(Storage="_year", DbType="NVarChar(50)")]
		public string year
		{
			get
			{
				return this._year;
			}
			set
			{
				if ((this._year != value))
				{
					this._year = value;
				}
			}
		}
	}
	
	public partial class spGetIsPrimarySchoolProgramResult
	{
		
		private System.Guid _Id;
		
		private System.Nullable<System.Guid> _ChildSchoolYearId;
		
		private System.Nullable<System.Guid> _ChildFamilyId;
		
		private System.Nullable<System.Guid> _SchoolProgramId;
		
		private System.Nullable<System.Guid> _FeesPeriodId;
		
		private decimal _Fee;
		
		private System.Nullable<System.DateTime> _EffectiveYearDate;
		
		private System.Nullable<int> _EffectiveMonthDay;
		
		private System.Nullable<int> _EffectiveWeekDay;
		
		private System.Nullable<System.Guid> _CreatedById;
		
		private System.Nullable<System.DateTime> _CreatedDatetime;
		
		private System.Nullable<System.Guid> _LastmodiedById;
		
		private System.Nullable<System.DateTime> _LastmodifiedDatetime;
		
		private System.Nullable<System.DateTime> _EnrollmentDate;
		
		private string _EnrollmentStatus;
		
		private System.Nullable<System.Guid> _EnrollmentStatusId;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		public spGetIsPrimarySchoolProgramResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_ChildSchoolYearId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ChildSchoolYearId
		{
			get
			{
				return this._ChildSchoolYearId;
			}
			set
			{
				if ((this._ChildSchoolYearId != value))
				{
					this._ChildSchoolYearId = value;
				}
			}
		}
		
		[Column(Storage="_ChildFamilyId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ChildFamilyId
		{
			get
			{
				return this._ChildFamilyId;
			}
			set
			{
				if ((this._ChildFamilyId != value))
				{
					this._ChildFamilyId = value;
				}
			}
		}
		
		[Column(Storage="_SchoolProgramId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> SchoolProgramId
		{
			get
			{
				return this._SchoolProgramId;
			}
			set
			{
				if ((this._SchoolProgramId != value))
				{
					this._SchoolProgramId = value;
				}
			}
		}
		
		[Column(Storage="_FeesPeriodId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FeesPeriodId
		{
			get
			{
				return this._FeesPeriodId;
			}
			set
			{
				if ((this._FeesPeriodId != value))
				{
					this._FeesPeriodId = value;
				}
			}
		}
		
		[Column(Storage="_Fee", DbType="Decimal(0,0) NOT NULL")]
		public decimal Fee
		{
			get
			{
				return this._Fee;
			}
			set
			{
				if ((this._Fee != value))
				{
					this._Fee = value;
				}
			}
		}
		
		[Column(Storage="_EffectiveYearDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EffectiveYearDate
		{
			get
			{
				return this._EffectiveYearDate;
			}
			set
			{
				if ((this._EffectiveYearDate != value))
				{
					this._EffectiveYearDate = value;
				}
			}
		}
		
		[Column(Storage="_EffectiveMonthDay", DbType="Int")]
		public System.Nullable<int> EffectiveMonthDay
		{
			get
			{
				return this._EffectiveMonthDay;
			}
			set
			{
				if ((this._EffectiveMonthDay != value))
				{
					this._EffectiveMonthDay = value;
				}
			}
		}
		
		[Column(Storage="_EffectiveWeekDay", DbType="Int")]
		public System.Nullable<int> EffectiveWeekDay
		{
			get
			{
				return this._EffectiveWeekDay;
			}
			set
			{
				if ((this._EffectiveWeekDay != value))
				{
					this._EffectiveWeekDay = value;
				}
			}
		}
		
		[Column(Storage="_CreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CreatedById
		{
			get
			{
				return this._CreatedById;
			}
			set
			{
				if ((this._CreatedById != value))
				{
					this._CreatedById = value;
				}
			}
		}
		
		[Column(Storage="_CreatedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDatetime
		{
			get
			{
				return this._CreatedDatetime;
			}
			set
			{
				if ((this._CreatedDatetime != value))
				{
					this._CreatedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_LastmodiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LastmodiedById
		{
			get
			{
				return this._LastmodiedById;
			}
			set
			{
				if ((this._LastmodiedById != value))
				{
					this._LastmodiedById = value;
				}
			}
		}
		
		[Column(Storage="_LastmodifiedDatetime", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastmodifiedDatetime
		{
			get
			{
				return this._LastmodifiedDatetime;
			}
			set
			{
				if ((this._LastmodifiedDatetime != value))
				{
					this._LastmodifiedDatetime = value;
				}
			}
		}
		
		[Column(Storage="_EnrollmentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EnrollmentDate
		{
			get
			{
				return this._EnrollmentDate;
			}
			set
			{
				if ((this._EnrollmentDate != value))
				{
					this._EnrollmentDate = value;
				}
			}
		}
		
		[Column(Storage="_EnrollmentStatus", DbType="VarChar(50)")]
		public string EnrollmentStatus
		{
			get
			{
				return this._EnrollmentStatus;
			}
			set
			{
				if ((this._EnrollmentStatus != value))
				{
					this._EnrollmentStatus = value;
				}
			}
		}
		
		[Column(Storage="_EnrollmentStatusId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> EnrollmentStatusId
		{
			get
			{
				return this._EnrollmentStatusId;
			}
			set
			{
				if ((this._EnrollmentStatusId != value))
				{
					this._EnrollmentStatusId = value;
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this._StartDate = value;
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this._EndDate = value;
				}
			}
		}
	}
	
	public partial class spGetChildFamilyByIdResult
	{
		
		private System.Guid _ChildFamilyId;
		
		private System.Guid _SchoolId;
		
		private string _FamilyTitle;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Code;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _City;
		
		private System.Nullable<System.Guid> _StateId;
		
		private string _Zip;
		
		private string _HomePhone;
		
		private string _Comments;
		
		private bool _Active;
		
		private string _MsgDisplayed;
		
		private System.Nullable<System.DateTime> _MsgStartDate;
		
		private System.Nullable<System.DateTime> _MsgEndDate;
		
		private System.Nullable<bool> _MsgActive;
		
		private System.Nullable<System.DateTime> _ChildFamilyCreateDateTime;
		
		private System.Nullable<System.DateTime> _ChildFamilyLastModifiedDateTime;
		
		private System.Nullable<System.Guid> _ChildFamilyCreatedById;
		
		private System.Nullable<System.Guid> _ChildFamilyLastModifiedById;
		
		private System.Guid _FamilyDataId;
		
		private System.Nullable<System.Guid> _RelationShipId;
		
		private string _RelationShipName;
		
		private string _FamilyFirstName;
		
		private string _FamilyLastName;
		
		private int _Guardian;
		
		private string _FamilyPhone1;
		
		private string _FamilyPhone1Type;
		
		private string _FamilyPhone2;
		
		private string _FamilyPhone2Type;
		
		private string _Email;
		
		private string _Photo;
		
		private System.Nullable<System.DateTime> _FamilyCreateDateTime;
		
		private System.Nullable<System.DateTime> _FamilyLastModifiedDateTime;
		
		private System.Nullable<System.Guid> _FamilyCreatedById;
		
		private System.Nullable<System.Guid> _FamilyLastModifiedById;
		
		public spGetChildFamilyByIdResult()
		{
		}
		
		[Column(Storage="_ChildFamilyId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildFamilyId
		{
			get
			{
				return this._ChildFamilyId;
			}
			set
			{
				if ((this._ChildFamilyId != value))
				{
					this._ChildFamilyId = value;
				}
			}
		}
		
		[Column(Storage="_SchoolId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SchoolId
		{
			get
			{
				return this._SchoolId;
			}
			set
			{
				if ((this._SchoolId != value))
				{
					this._SchoolId = value;
				}
			}
		}
		
		[Column(Storage="_FamilyTitle", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string FamilyTitle
		{
			get
			{
				return this._FamilyTitle;
			}
			set
			{
				if ((this._FamilyTitle != value))
				{
					this._FamilyTitle = value;
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this._Password = value;
				}
			}
		}
		
		[Column(Storage="_Code", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this._Code = value;
				}
			}
		}
		
		[Column(Storage="_Address1", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this._Address1 = value;
				}
			}
		}
		
		[Column(Storage="_Address2", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this._Address2 = value;
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this._City = value;
				}
			}
		}
		
		[Column(Storage="_StateId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> StateId
		{
			get
			{
				return this._StateId;
			}
			set
			{
				if ((this._StateId != value))
				{
					this._StateId = value;
				}
			}
		}
		
		[Column(Storage="_Zip", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this._Zip = value;
				}
			}
		}
		
		[Column(Storage="_HomePhone", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this._HomePhone = value;
				}
			}
		}
		
		[Column(Storage="_Comments", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this._Comments = value;
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[Column(Storage="_MsgDisplayed", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string MsgDisplayed
		{
			get
			{
				return this._MsgDisplayed;
			}
			set
			{
				if ((this._MsgDisplayed != value))
				{
					this._MsgDisplayed = value;
				}
			}
		}
		
		[Column(Storage="_MsgStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MsgStartDate
		{
			get
			{
				return this._MsgStartDate;
			}
			set
			{
				if ((this._MsgStartDate != value))
				{
					this._MsgStartDate = value;
				}
			}
		}
		
		[Column(Storage="_MsgEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> MsgEndDate
		{
			get
			{
				return this._MsgEndDate;
			}
			set
			{
				if ((this._MsgEndDate != value))
				{
					this._MsgEndDate = value;
				}
			}
		}
		
		[Column(Storage="_MsgActive", DbType="Bit")]
		public System.Nullable<bool> MsgActive
		{
			get
			{
				return this._MsgActive;
			}
			set
			{
				if ((this._MsgActive != value))
				{
					this._MsgActive = value;
				}
			}
		}
		
		[Column(Storage="_ChildFamilyCreateDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ChildFamilyCreateDateTime
		{
			get
			{
				return this._ChildFamilyCreateDateTime;
			}
			set
			{
				if ((this._ChildFamilyCreateDateTime != value))
				{
					this._ChildFamilyCreateDateTime = value;
				}
			}
		}
		
		[Column(Storage="_ChildFamilyLastModifiedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ChildFamilyLastModifiedDateTime
		{
			get
			{
				return this._ChildFamilyLastModifiedDateTime;
			}
			set
			{
				if ((this._ChildFamilyLastModifiedDateTime != value))
				{
					this._ChildFamilyLastModifiedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_ChildFamilyCreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ChildFamilyCreatedById
		{
			get
			{
				return this._ChildFamilyCreatedById;
			}
			set
			{
				if ((this._ChildFamilyCreatedById != value))
				{
					this._ChildFamilyCreatedById = value;
				}
			}
		}
		
		[Column(Storage="_ChildFamilyLastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> ChildFamilyLastModifiedById
		{
			get
			{
				return this._ChildFamilyLastModifiedById;
			}
			set
			{
				if ((this._ChildFamilyLastModifiedById != value))
				{
					this._ChildFamilyLastModifiedById = value;
				}
			}
		}
		
		[Column(Storage="_FamilyDataId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FamilyDataId
		{
			get
			{
				return this._FamilyDataId;
			}
			set
			{
				if ((this._FamilyDataId != value))
				{
					this._FamilyDataId = value;
				}
			}
		}
		
		[Column(Storage="_RelationShipId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> RelationShipId
		{
			get
			{
				return this._RelationShipId;
			}
			set
			{
				if ((this._RelationShipId != value))
				{
					this._RelationShipId = value;
				}
			}
		}
		
		[Column(Storage="_RelationShipName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string RelationShipName
		{
			get
			{
				return this._RelationShipName;
			}
			set
			{
				if ((this._RelationShipName != value))
				{
					this._RelationShipName = value;
				}
			}
		}
		
		[Column(Storage="_FamilyFirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FamilyFirstName
		{
			get
			{
				return this._FamilyFirstName;
			}
			set
			{
				if ((this._FamilyFirstName != value))
				{
					this._FamilyFirstName = value;
				}
			}
		}
		
		[Column(Storage="_FamilyLastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FamilyLastName
		{
			get
			{
				return this._FamilyLastName;
			}
			set
			{
				if ((this._FamilyLastName != value))
				{
					this._FamilyLastName = value;
				}
			}
		}
		
		[Column(Storage="_Guardian", DbType="Int NOT NULL")]
		public int Guardian
		{
			get
			{
				return this._Guardian;
			}
			set
			{
				if ((this._Guardian != value))
				{
					this._Guardian = value;
				}
			}
		}
		
		[Column(Storage="_FamilyPhone1", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string FamilyPhone1
		{
			get
			{
				return this._FamilyPhone1;
			}
			set
			{
				if ((this._FamilyPhone1 != value))
				{
					this._FamilyPhone1 = value;
				}
			}
		}
		
		[Column(Storage="_FamilyPhone1Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FamilyPhone1Type
		{
			get
			{
				return this._FamilyPhone1Type;
			}
			set
			{
				if ((this._FamilyPhone1Type != value))
				{
					this._FamilyPhone1Type = value;
				}
			}
		}
		
		[Column(Storage="_FamilyPhone2", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string FamilyPhone2
		{
			get
			{
				return this._FamilyPhone2;
			}
			set
			{
				if ((this._FamilyPhone2 != value))
				{
					this._FamilyPhone2 = value;
				}
			}
		}
		
		[Column(Storage="_FamilyPhone2Type", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FamilyPhone2Type
		{
			get
			{
				return this._FamilyPhone2Type;
			}
			set
			{
				if ((this._FamilyPhone2Type != value))
				{
					this._FamilyPhone2Type = value;
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[Column(Storage="_Photo", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Photo
		{
			get
			{
				return this._Photo;
			}
			set
			{
				if ((this._Photo != value))
				{
					this._Photo = value;
				}
			}
		}
		
		[Column(Storage="_FamilyCreateDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> FamilyCreateDateTime
		{
			get
			{
				return this._FamilyCreateDateTime;
			}
			set
			{
				if ((this._FamilyCreateDateTime != value))
				{
					this._FamilyCreateDateTime = value;
				}
			}
		}
		
		[Column(Storage="_FamilyLastModifiedDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> FamilyLastModifiedDateTime
		{
			get
			{
				return this._FamilyLastModifiedDateTime;
			}
			set
			{
				if ((this._FamilyLastModifiedDateTime != value))
				{
					this._FamilyLastModifiedDateTime = value;
				}
			}
		}
		
		[Column(Storage="_FamilyCreatedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FamilyCreatedById
		{
			get
			{
				return this._FamilyCreatedById;
			}
			set
			{
				if ((this._FamilyCreatedById != value))
				{
					this._FamilyCreatedById = value;
				}
			}
		}
		
		[Column(Storage="_FamilyLastModifiedById", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> FamilyLastModifiedById
		{
			get
			{
				return this._FamilyLastModifiedById;
			}
			set
			{
				if ((this._FamilyLastModifiedById != value))
				{
					this._FamilyLastModifiedById = value;
				}
			}
		}
	}
	
	public partial class spGetChildFamilyForLEdgerOfFammilyResult
	{
		
		private System.Guid _Id;
		
		private string _FamilyTitle;
		
		private string _Email;
		
		private System.Nullable<bool> _Active;
		
		private string _ChildName;
		
		private string _HomePhone;
		
		private decimal _Debit;
		
		private decimal _Credit;
		
		private decimal _Balance;
		
		private System.Nullable<decimal> _OpBal;
		
		public spGetChildFamilyForLEdgerOfFammilyResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_FamilyTitle", DbType="NVarChar(500)")]
		public string FamilyTitle
		{
			get
			{
				return this._FamilyTitle;
			}
			set
			{
				if ((this._FamilyTitle != value))
				{
					this._FamilyTitle = value;
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[Column(Storage="_ChildName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ChildName
		{
			get
			{
				return this._ChildName;
			}
			set
			{
				if ((this._ChildName != value))
				{
					this._ChildName = value;
				}
			}
		}
		
		[Column(Storage="_HomePhone", DbType="NVarChar(20)")]
		public string HomePhone
		{
			get
			{
				return this._HomePhone;
			}
			set
			{
				if ((this._HomePhone != value))
				{
					this._HomePhone = value;
				}
			}
		}
		
		[Column(Storage="_Debit", DbType="Decimal(0,0) NOT NULL")]
		public decimal Debit
		{
			get
			{
				return this._Debit;
			}
			set
			{
				if ((this._Debit != value))
				{
					this._Debit = value;
				}
			}
		}
		
		[Column(Storage="_Credit", DbType="Decimal(0,0) NOT NULL")]
		public decimal Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this._Credit = value;
				}
			}
		}
		
		[Column(Storage="_Balance", DbType="Decimal(0,0) NOT NULL")]
		public decimal Balance
		{
			get
			{
				return this._Balance;
			}
			set
			{
				if ((this._Balance != value))
				{
					this._Balance = value;
				}
			}
		}
		
		[Column(Storage="_OpBal", DbType="Decimal(0,0)")]
		public System.Nullable<decimal> OpBal
		{
			get
			{
				return this._OpBal;
			}
			set
			{
				if ((this._OpBal != value))
				{
					this._OpBal = value;
				}
			}
		}
	}
	
	public partial class spGetAllActiveChildListForImportResult
	{
		
		private System.Guid _ChildDataId;
		
		private System.Guid _ChildFamilyId;
		
		private string _FullName;
		
		private string _ChildFirstName;
		
		private string _ChildLastName;
		
		private string _FamilyName;
		
		private System.Nullable<int> _ImportedCount;
		
		public spGetAllActiveChildListForImportResult()
		{
		}
		
		[Column(Storage="_ChildDataId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildDataId
		{
			get
			{
				return this._ChildDataId;
			}
			set
			{
				if ((this._ChildDataId != value))
				{
					this._ChildDataId = value;
				}
			}
		}
		
		[Column(Storage="_ChildFamilyId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildFamilyId
		{
			get
			{
				return this._ChildFamilyId;
			}
			set
			{
				if ((this._ChildFamilyId != value))
				{
					this._ChildFamilyId = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(102) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_ChildFirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ChildFirstName
		{
			get
			{
				return this._ChildFirstName;
			}
			set
			{
				if ((this._ChildFirstName != value))
				{
					this._ChildFirstName = value;
				}
			}
		}
		
		[Column(Storage="_ChildLastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ChildLastName
		{
			get
			{
				return this._ChildLastName;
			}
			set
			{
				if ((this._ChildLastName != value))
				{
					this._ChildLastName = value;
				}
			}
		}
		
		[Column(Storage="_FamilyName", DbType="NVarChar(500)")]
		public string FamilyName
		{
			get
			{
				return this._FamilyName;
			}
			set
			{
				if ((this._FamilyName != value))
				{
					this._FamilyName = value;
				}
			}
		}
		
		[Column(Storage="_ImportedCount", DbType="Int")]
		public System.Nullable<int> ImportedCount
		{
			get
			{
				return this._ImportedCount;
			}
			set
			{
				if ((this._ImportedCount != value))
				{
					this._ImportedCount = value;
				}
			}
		}
	}
	
	public partial class spGetPreviousYearOfSelectedCurrentYearResult
	{
		
		private System.Guid _Id;
		
		private string _SchoolYear;
		
		public spGetPreviousYearOfSelectedCurrentYearResult()
		{
		}
		
		[Column(Storage="_Id", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this._Id = value;
				}
			}
		}
		
		[Column(Storage="_SchoolYear", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SchoolYear
		{
			get
			{
				return this._SchoolYear;
			}
			set
			{
				if ((this._SchoolYear != value))
				{
					this._SchoolYear = value;
				}
			}
		}
	}
	
	public partial class spGetAllChildListForImportResult
	{
		
		private System.Guid _ChildDataId;
		
		private System.Guid _ChildFamilyId;
		
		private string _FullName;
		
		private string _ChildFirstName;
		
		private string _ChildLastName;
		
		private string _FamilyName;
		
		private System.Nullable<bool> _Active;
		
		private System.Nullable<int> _ImportedCount;
		
		public spGetAllChildListForImportResult()
		{
		}
		
		[Column(Storage="_ChildDataId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildDataId
		{
			get
			{
				return this._ChildDataId;
			}
			set
			{
				if ((this._ChildDataId != value))
				{
					this._ChildDataId = value;
				}
			}
		}
		
		[Column(Storage="_ChildFamilyId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ChildFamilyId
		{
			get
			{
				return this._ChildFamilyId;
			}
			set
			{
				if ((this._ChildFamilyId != value))
				{
					this._ChildFamilyId = value;
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(102) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[Column(Storage="_ChildFirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ChildFirstName
		{
			get
			{
				return this._ChildFirstName;
			}
			set
			{
				if ((this._ChildFirstName != value))
				{
					this._ChildFirstName = value;
				}
			}
		}
		
		[Column(Storage="_ChildLastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ChildLastName
		{
			get
			{
				return this._ChildLastName;
			}
			set
			{
				if ((this._ChildLastName != value))
				{
					this._ChildLastName = value;
				}
			}
		}
		
		[Column(Storage="_FamilyName", DbType="NVarChar(500)")]
		public string FamilyName
		{
			get
			{
				return this._FamilyName;
			}
			set
			{
				if ((this._FamilyName != value))
				{
					this._FamilyName = value;
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[Column(Storage="_ImportedCount", DbType="Int")]
		public System.Nullable<int> ImportedCount
		{
			get
			{
				return this._ImportedCount;
			}
			set
			{
				if ((this._ImportedCount != value))
				{
					this._ImportedCount = value;
				}
			}
		}
	}
	
	public partial class spUpdateClosingBalanceResult
	{
		
		private System.Nullable<System.Guid> _Column1;
		
		public spUpdateClosingBalanceResult()
		{
		}
		
		[Column(Storage="_Column1", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
