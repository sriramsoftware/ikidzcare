using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Telerik.Web.UI;

namespace DayCare.UI
{
    public partial class childfamily : System.Web.UI.Page
    {
        RadAjaxManager MasterAjaxManager;
        Guid SchoolId = new Guid();
        protected void Page_Load(object sender, EventArgs e)
        {
            if (Session["SchoolId"] == null && Session["CurrentSchoolYearId"] == null)
            {
                Response.Redirect("~/Login.aspx");
            }
            if (Session["SchoolId"] != null)
            {
                SchoolId = new Guid(Session["SchoolId"].ToString());
            }
            SetMenuLink();
        }

        protected void btnSave_Click(object sender, EventArgs e)
        {
            DayCarePL.Logger.Write(DayCarePL.LogType.INFO, DayCarePL.ModuleToLog.ChildFamily, "btnSave_Click", "Submit btnSave_Click called", DayCarePL.Common.GUID_DEFAULT);
            bool result = false;
            try
            {
                DayCarePL.Logger.Write(DayCarePL.LogType.DEBUG, DayCarePL.ModuleToLog.ChildFamily, "btnSave_Click", "Debug btnSave_Click ", DayCarePL.Common.GUID_DEFAULT);
                DayCareBAL.ChildFamilyService proxyChildFamily = new DayCareBAL.ChildFamilyService();
                DayCarePL.ChildFamilyProperties objChildFamily = new DayCarePL.ChildFamilyProperties();
                Guid SchoolId = new Guid();

                if (Session["SchoolId"] != null)
                {
                    SchoolId = new Guid(Session["SchoolId"].ToString());
                    objChildFamily.SchoolId = SchoolId;
                }
                if (rdpMsgStartDate.SelectedDate != null && rdpMsgEndDate.SelectedDate != null)
                {
                    if (rdpMsgStartDate.SelectedDate > rdpMsgEndDate.SelectedDate)
                    {
                        MasterAjaxManager = this.Page.Master.FindControl("RadAjaxManager1") as Telerik.Web.UI.RadAjaxManager;
                        MasterAjaxManager.ResponseScripts.Add(string.Format("ShowMessage('{0}','{1}')", "Start Date must be less than End Date.", "false"));
                        return;
                    }
                }
                if (ViewState["ChildFamilyId"] != null)
                {
                    objChildFamily.Id = new Guid(ViewState["ChildFamilyId"].ToString());
                }
                else
                {
                    if (Session["StaffId"] != null)
                    {
                        objChildFamily.CreatedById = new Guid(Session["StaffId"].ToString());
                    }
                }
                objChildFamily.LastModifiedById = new Guid(Session["StaffId"].ToString());
                objChildFamily.Comments = txtChildFamilyComments.Text.Trim();
                objChildFamily.MsgDisplayed = txtMessage.Text.Trim();
                objChildFamily.FamilyTitle = txtFamilyTitle.Text.Trim();
                if (rdpMsgStartDate.SelectedDate != null)
                {
                    objChildFamily.MsgStartDate = rdpMsgStartDate.SelectedDate.Value;
                }
                if (rdpMsgEndDate.SelectedDate != null)
                {
                    objChildFamily.MsgEndDate = rdpMsgEndDate.SelectedDate.Value;
                }
                objChildFamily.MsgActive = chkMsgActive.Checked;
                result = proxyChildFamily.Save(objChildFamily);
                if (result == true)
                {
                    txtFamilyTitle.Text = "";
                    txtChildFamilyComments.Text = "";
                    txtMessage.Text = "";
                    rdpMsgEndDate.SelectedDate = null;
                    rdpMsgStartDate.SelectedDate = null;

                    MasterAjaxManager = this.Page.Master.FindControl("RadAjaxManager1") as Telerik.Web.UI.RadAjaxManager;
                    MasterAjaxManager.ResponseScripts.Add(string.Format("ShowMessage('{0}','{1}')", "Saved Successfully", "false"));
                    rgChildFamily.MasterTableView.Rebind();
                }
            }
            catch (Exception ex)
            {
                DayCarePL.Logger.Write(DayCarePL.LogType.EXCEPTION, DayCarePL.ModuleToLog.ChildFamily, "SubmitRecord", ex.Message.ToString(), DayCarePL.Common.GUID_DEFAULT);
                result = false;
            }


        }

        protected void btnCancel_Click(object sender, EventArgs e)
        {
            txtFamilyTitle.Text = "";
            txtChildFamilyComments.Text = "";
            txtMessage.Text = "";
            rdpMsgEndDate.SelectedDate = null;
            rdpMsgStartDate.SelectedDate = null;
        }

        protected void rgChildFamily_NeedDataSource(object source, Telerik.Web.UI.GridNeedDataSourceEventArgs e)
        {
            Guid SchoolId = new Guid();
            if (Session["SchoolId"] != null)
            {
                SchoolId = new Guid(Session["SchoolId"].ToString());
            }
            DayCareBAL.ChildFamilyService proxyChildFamily = new DayCareBAL.ChildFamilyService();
            List<DayCarePL.ChildFamilyProperties> lstChildData = proxyChildFamily.LoadChildFamily(new Guid(Session["SchoolId"].ToString()));

            if (lstChildData != null)
            {
                rgChildFamily.DataSource = proxyChildFamily.LoadChildFamily(new Guid(Session["SchoolId"].ToString()));
            }
        }

        protected void rgChildFamily_EditCommand(object source, Telerik.Web.UI.GridCommandEventArgs e)
        {
            GridDataItem item = (GridDataItem)e.Item;
            // hdnName.Value = item["FamilyTitle"].Text;
            e.Canceled = true;
        }

        protected void rgChildFamily_ItemCommand(object sender, Telerik.Web.UI.GridCommandEventArgs e)
        {
            Guid SchoolId = new Guid();
            Guid CurrentSchoolYearId = new Guid();
            if (Session["SchoolId"] != null)
            {
                SchoolId = new Guid(Session["SchoolId"].ToString());
            }

            if (Session["CurrentSchoolYearId"] != null)
            {
                CurrentSchoolYearId = new Guid(Session["CurrentSchoolYearId"].ToString());
            }

            if (!Common.IsCurrentYear(CurrentSchoolYearId, SchoolId))
            {
                if (e.CommandName == "InitInsert")
                {
                    e.Canceled = true;
                }
                else if (e.CommandName == "Edit")
                {
                    e.Canceled = true;
                }
            }
            else
            {
                if (e.CommandName == "Edit")
                {
                    Guid ChildFamilyId = new Guid(e.Item.OwnerTableView.DataKeyValues[e.Item.ItemIndex]["Id"].ToString());
                    if (ChildFamilyId != null)
                    {
                        ViewState["ChildFamilyId"] = ChildFamilyId;
                    }
                    LoadDataById(ChildFamilyId);
                }
            }
            e.Canceled = true;

        }

        protected void rgChildFamily_ItemCreated(object sender, Telerik.Web.UI.GridItemEventArgs e)
        {
        }

        protected void rgChildFamily_ItemDataBound(object sender, Telerik.Web.UI.GridItemEventArgs e)
        {
            if (e.Item.ItemType == GridItemType.AlternatingItem || e.Item.ItemType == GridItemType.Item)
            {
                DayCarePL.ChildFamilyProperties objChildFamily = e.Item.DataItem as DayCarePL.ChildFamilyProperties;
                HyperLink hlFamily = e.Item.FindControl("hlFamily") as HyperLink;
                HyperLink hlChild = e.Item.FindControl("hlChild") as HyperLink;

                hlFamily.NavigateUrl = "FamilyDataList.aspx?ChildFamilyId=" + objChildFamily.Id;
                hlChild.NavigateUrl = "ChildData.aspx?ChildFamilyId=" + objChildFamily.Id;
            }
        }

        protected void LoadDataById(Guid ChildFamilyId)
        {
            DayCarePL.Logger.Write(DayCarePL.LogType.INFO, DayCarePL.ModuleToLog.ChildData, "SubmitRecord", "Submit record method called", DayCarePL.Common.GUID_DEFAULT);
            try
            {
                DayCarePL.Logger.Write(DayCarePL.LogType.DEBUG, DayCarePL.ModuleToLog.ChildData, "SubmitRecord", "Debug Submit Record Of ChildData", DayCarePL.Common.GUID_DEFAULT);
                DayCareBAL.ChildFamilyService proxyChildFamily = new DayCareBAL.ChildFamilyService();
                if (Session["SchoolId"] != null)
                {
                    SchoolId = new Guid(Session["SchoolId"].ToString());
                }

                DayCarePL.ChildFamilyProperties objChildFamily = proxyChildFamily.LoadChildFamilyById(ChildFamilyId);
                if (objChildFamily != null)
                {

                    txtFamilyTitle.Text = objChildFamily.FamilyTitle;
                    txtMessage.Text = objChildFamily.MsgDisplayed;
                    if (objChildFamily.MsgStartDate != null)
                    {
                        rdpMsgStartDate.SelectedDate = objChildFamily.MsgStartDate;
                    }
                    if (objChildFamily.MsgEndDate != null)
                    {
                        rdpMsgEndDate.SelectedDate = objChildFamily.MsgEndDate;
                    }
                    if (objChildFamily.MsgActive == true)
                    {
                        chkMsgActive.Checked = true;
                    }


                }
            }
            catch (Exception ex)
            {
                DayCarePL.Logger.Write(DayCarePL.LogType.EXCEPTION, DayCarePL.ModuleToLog.ChildData, "LoadChildDataDetails", ex.Message.ToString(), DayCarePL.Common.GUID_DEFAULT);
            }

        }

        public void SetMenuLink()
        {
            try
            {
                List<DayCarePL.MenuLink> lstMenu = new List<DayCarePL.MenuLink>();
                DayCarePL.MenuLink objMenu;
                objMenu = new DayCarePL.MenuLink();
                objMenu.Name = "Child Family";
                objMenu.Url = "";
                lstMenu.Add(objMenu);
                usrMenuLink.SetMenuLink(lstMenu);
            }
            catch
            {

            }
        }
    }
}
