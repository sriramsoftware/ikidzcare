//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace DayCare.Report {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("xmlClassWiseStudentAttendTime")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class xmlClassWiseStudentAttendTime : global::System.Data.DataSet {
        
        private dtClassWiseStudentDataTable tabledtClassWiseStudent;
        
        private dtAttendanceDataTable tabledtAttendance;
        
        private dtProgramWiseStudentDataTable tabledtProgramWiseStudent;
        
        private dtDipositDataTable tabledtDiposit;
        
        private dtLedgerOfFamilyDataTable tabledtLedgerOfFamily;
        
        private dtAccountReceiable_CreditDataTable tabledtAccountReceiable_Credit;
        
        private dtLateFeesDataTable tabledtLateFees;
        
        private dtFamilyChildListDataTable tabledtFamilyChildList;
        
        private dtChildDataListDataTable tabledtChildDataList;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public xmlClassWiseStudentAttendTime() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected xmlClassWiseStudentAttendTime(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtClassWiseStudent"] != null)) {
                    base.Tables.Add(new dtClassWiseStudentDataTable(ds.Tables["dtClassWiseStudent"]));
                }
                if ((ds.Tables["dtAttendance"] != null)) {
                    base.Tables.Add(new dtAttendanceDataTable(ds.Tables["dtAttendance"]));
                }
                if ((ds.Tables["dtProgramWiseStudent"] != null)) {
                    base.Tables.Add(new dtProgramWiseStudentDataTable(ds.Tables["dtProgramWiseStudent"]));
                }
                if ((ds.Tables["dtDiposit"] != null)) {
                    base.Tables.Add(new dtDipositDataTable(ds.Tables["dtDiposit"]));
                }
                if ((ds.Tables["dtLedgerOfFamily"] != null)) {
                    base.Tables.Add(new dtLedgerOfFamilyDataTable(ds.Tables["dtLedgerOfFamily"]));
                }
                if ((ds.Tables["dtAccountReceiable_Credit"] != null)) {
                    base.Tables.Add(new dtAccountReceiable_CreditDataTable(ds.Tables["dtAccountReceiable_Credit"]));
                }
                if ((ds.Tables["dtLateFees"] != null)) {
                    base.Tables.Add(new dtLateFeesDataTable(ds.Tables["dtLateFees"]));
                }
                if ((ds.Tables["dtFamilyChildList"] != null)) {
                    base.Tables.Add(new dtFamilyChildListDataTable(ds.Tables["dtFamilyChildList"]));
                }
                if ((ds.Tables["dtChildDataList"] != null)) {
                    base.Tables.Add(new dtChildDataListDataTable(ds.Tables["dtChildDataList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtClassWiseStudentDataTable dtClassWiseStudent {
            get {
                return this.tabledtClassWiseStudent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtAttendanceDataTable dtAttendance {
            get {
                return this.tabledtAttendance;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtProgramWiseStudentDataTable dtProgramWiseStudent {
            get {
                return this.tabledtProgramWiseStudent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtDipositDataTable dtDiposit {
            get {
                return this.tabledtDiposit;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtLedgerOfFamilyDataTable dtLedgerOfFamily {
            get {
                return this.tabledtLedgerOfFamily;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtAccountReceiable_CreditDataTable dtAccountReceiable_Credit {
            get {
                return this.tabledtAccountReceiable_Credit;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtLateFeesDataTable dtLateFees {
            get {
                return this.tabledtLateFees;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtFamilyChildListDataTable dtFamilyChildList {
            get {
                return this.tabledtFamilyChildList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtChildDataListDataTable dtChildDataList {
            get {
                return this.tabledtChildDataList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            xmlClassWiseStudentAttendTime cln = ((xmlClassWiseStudentAttendTime)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtClassWiseStudent"] != null)) {
                    base.Tables.Add(new dtClassWiseStudentDataTable(ds.Tables["dtClassWiseStudent"]));
                }
                if ((ds.Tables["dtAttendance"] != null)) {
                    base.Tables.Add(new dtAttendanceDataTable(ds.Tables["dtAttendance"]));
                }
                if ((ds.Tables["dtProgramWiseStudent"] != null)) {
                    base.Tables.Add(new dtProgramWiseStudentDataTable(ds.Tables["dtProgramWiseStudent"]));
                }
                if ((ds.Tables["dtDiposit"] != null)) {
                    base.Tables.Add(new dtDipositDataTable(ds.Tables["dtDiposit"]));
                }
                if ((ds.Tables["dtLedgerOfFamily"] != null)) {
                    base.Tables.Add(new dtLedgerOfFamilyDataTable(ds.Tables["dtLedgerOfFamily"]));
                }
                if ((ds.Tables["dtAccountReceiable_Credit"] != null)) {
                    base.Tables.Add(new dtAccountReceiable_CreditDataTable(ds.Tables["dtAccountReceiable_Credit"]));
                }
                if ((ds.Tables["dtLateFees"] != null)) {
                    base.Tables.Add(new dtLateFeesDataTable(ds.Tables["dtLateFees"]));
                }
                if ((ds.Tables["dtFamilyChildList"] != null)) {
                    base.Tables.Add(new dtFamilyChildListDataTable(ds.Tables["dtFamilyChildList"]));
                }
                if ((ds.Tables["dtChildDataList"] != null)) {
                    base.Tables.Add(new dtChildDataListDataTable(ds.Tables["dtChildDataList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtClassWiseStudent = ((dtClassWiseStudentDataTable)(base.Tables["dtClassWiseStudent"]));
            if ((initTable == true)) {
                if ((this.tabledtClassWiseStudent != null)) {
                    this.tabledtClassWiseStudent.InitVars();
                }
            }
            this.tabledtAttendance = ((dtAttendanceDataTable)(base.Tables["dtAttendance"]));
            if ((initTable == true)) {
                if ((this.tabledtAttendance != null)) {
                    this.tabledtAttendance.InitVars();
                }
            }
            this.tabledtProgramWiseStudent = ((dtProgramWiseStudentDataTable)(base.Tables["dtProgramWiseStudent"]));
            if ((initTable == true)) {
                if ((this.tabledtProgramWiseStudent != null)) {
                    this.tabledtProgramWiseStudent.InitVars();
                }
            }
            this.tabledtDiposit = ((dtDipositDataTable)(base.Tables["dtDiposit"]));
            if ((initTable == true)) {
                if ((this.tabledtDiposit != null)) {
                    this.tabledtDiposit.InitVars();
                }
            }
            this.tabledtLedgerOfFamily = ((dtLedgerOfFamilyDataTable)(base.Tables["dtLedgerOfFamily"]));
            if ((initTable == true)) {
                if ((this.tabledtLedgerOfFamily != null)) {
                    this.tabledtLedgerOfFamily.InitVars();
                }
            }
            this.tabledtAccountReceiable_Credit = ((dtAccountReceiable_CreditDataTable)(base.Tables["dtAccountReceiable_Credit"]));
            if ((initTable == true)) {
                if ((this.tabledtAccountReceiable_Credit != null)) {
                    this.tabledtAccountReceiable_Credit.InitVars();
                }
            }
            this.tabledtLateFees = ((dtLateFeesDataTable)(base.Tables["dtLateFees"]));
            if ((initTable == true)) {
                if ((this.tabledtLateFees != null)) {
                    this.tabledtLateFees.InitVars();
                }
            }
            this.tabledtFamilyChildList = ((dtFamilyChildListDataTable)(base.Tables["dtFamilyChildList"]));
            if ((initTable == true)) {
                if ((this.tabledtFamilyChildList != null)) {
                    this.tabledtFamilyChildList.InitVars();
                }
            }
            this.tabledtChildDataList = ((dtChildDataListDataTable)(base.Tables["dtChildDataList"]));
            if ((initTable == true)) {
                if ((this.tabledtChildDataList != null)) {
                    this.tabledtChildDataList.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "xmlClassWiseStudentAttendTime";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/xmlClassWiseStudentAttendTime.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtClassWiseStudent = new dtClassWiseStudentDataTable();
            base.Tables.Add(this.tabledtClassWiseStudent);
            this.tabledtAttendance = new dtAttendanceDataTable();
            base.Tables.Add(this.tabledtAttendance);
            this.tabledtProgramWiseStudent = new dtProgramWiseStudentDataTable();
            base.Tables.Add(this.tabledtProgramWiseStudent);
            this.tabledtDiposit = new dtDipositDataTable();
            base.Tables.Add(this.tabledtDiposit);
            this.tabledtLedgerOfFamily = new dtLedgerOfFamilyDataTable();
            base.Tables.Add(this.tabledtLedgerOfFamily);
            this.tabledtAccountReceiable_Credit = new dtAccountReceiable_CreditDataTable();
            base.Tables.Add(this.tabledtAccountReceiable_Credit);
            this.tabledtLateFees = new dtLateFeesDataTable();
            base.Tables.Add(this.tabledtLateFees);
            this.tabledtFamilyChildList = new dtFamilyChildListDataTable();
            base.Tables.Add(this.tabledtFamilyChildList);
            this.tabledtChildDataList = new dtChildDataListDataTable();
            base.Tables.Add(this.tabledtChildDataList);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtClassWiseStudent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtAttendance() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtProgramWiseStudent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtDiposit() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtLedgerOfFamily() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtAccountReceiable_Credit() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtLateFees() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtFamilyChildList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtChildDataList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            xmlClassWiseStudentAttendTime ds = new xmlClassWiseStudentAttendTime();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void dtClassWiseStudentRowChangeEventHandler(object sender, dtClassWiseStudentRowChangeEvent e);
        
        public delegate void dtAttendanceRowChangeEventHandler(object sender, dtAttendanceRowChangeEvent e);
        
        public delegate void dtProgramWiseStudentRowChangeEventHandler(object sender, dtProgramWiseStudentRowChangeEvent e);
        
        public delegate void dtDipositRowChangeEventHandler(object sender, dtDipositRowChangeEvent e);
        
        public delegate void dtLedgerOfFamilyRowChangeEventHandler(object sender, dtLedgerOfFamilyRowChangeEvent e);
        
        public delegate void dtAccountReceiable_CreditRowChangeEventHandler(object sender, dtAccountReceiable_CreditRowChangeEvent e);
        
        public delegate void dtLateFeesRowChangeEventHandler(object sender, dtLateFeesRowChangeEvent e);
        
        public delegate void dtFamilyChildListRowChangeEventHandler(object sender, dtFamilyChildListRowChangeEvent e);
        
        public delegate void dtChildDataListRowChangeEventHandler(object sender, dtChildDataListRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtClassWiseStudentDataTable : global::System.Data.TypedTableBase<dtClassWiseStudentRow> {
            
            private global::System.Data.DataColumn columnChildSchoolYearId;
            
            private global::System.Data.DataColumn columnProgClassRoomId;
            
            private global::System.Data.DataColumn columnClassroomTitle;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnMon;
            
            private global::System.Data.DataColumn columnTue;
            
            private global::System.Data.DataColumn columnWed;
            
            private global::System.Data.DataColumn columnThu;
            
            private global::System.Data.DataColumn columnFri;
            
            private global::System.Data.DataColumn columnFees;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtClassWiseStudentDataTable() {
                this.TableName = "dtClassWiseStudent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtClassWiseStudentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtClassWiseStudentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChildSchoolYearIdColumn {
                get {
                    return this.columnChildSchoolYearId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgClassRoomIdColumn {
                get {
                    return this.columnProgClassRoomId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassroomTitleColumn {
                get {
                    return this.columnClassroomTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonColumn {
                get {
                    return this.columnMon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TueColumn {
                get {
                    return this.columnTue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WedColumn {
                get {
                    return this.columnWed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThuColumn {
                get {
                    return this.columnThu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FriColumn {
                get {
                    return this.columnFri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeesColumn {
                get {
                    return this.columnFees;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtClassWiseStudentRow this[int index] {
                get {
                    return ((dtClassWiseStudentRow)(this.Rows[index]));
                }
            }
            
            public event dtClassWiseStudentRowChangeEventHandler dtClassWiseStudentRowChanging;
            
            public event dtClassWiseStudentRowChangeEventHandler dtClassWiseStudentRowChanged;
            
            public event dtClassWiseStudentRowChangeEventHandler dtClassWiseStudentRowDeleting;
            
            public event dtClassWiseStudentRowChangeEventHandler dtClassWiseStudentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtClassWiseStudentRow(dtClassWiseStudentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtClassWiseStudentRow AdddtClassWiseStudentRow(System.Guid ChildSchoolYearId, System.Guid ProgClassRoomId, string ClassroomTitle, string FirstName, string LastName, string Mon, string Tue, string Wed, string Thu, string Fri, decimal Fees) {
                dtClassWiseStudentRow rowdtClassWiseStudentRow = ((dtClassWiseStudentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ChildSchoolYearId,
                        ProgClassRoomId,
                        ClassroomTitle,
                        FirstName,
                        LastName,
                        Mon,
                        Tue,
                        Wed,
                        Thu,
                        Fri,
                        Fees};
                rowdtClassWiseStudentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtClassWiseStudentRow);
                return rowdtClassWiseStudentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtClassWiseStudentDataTable cln = ((dtClassWiseStudentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtClassWiseStudentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnChildSchoolYearId = base.Columns["ChildSchoolYearId"];
                this.columnProgClassRoomId = base.Columns["ProgClassRoomId"];
                this.columnClassroomTitle = base.Columns["ClassroomTitle"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnMon = base.Columns["Mon"];
                this.columnTue = base.Columns["Tue"];
                this.columnWed = base.Columns["Wed"];
                this.columnThu = base.Columns["Thu"];
                this.columnFri = base.Columns["Fri"];
                this.columnFees = base.Columns["Fees"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnChildSchoolYearId = new global::System.Data.DataColumn("ChildSchoolYearId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildSchoolYearId);
                this.columnProgClassRoomId = new global::System.Data.DataColumn("ProgClassRoomId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgClassRoomId);
                this.columnClassroomTitle = new global::System.Data.DataColumn("ClassroomTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassroomTitle);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnMon = new global::System.Data.DataColumn("Mon", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMon);
                this.columnTue = new global::System.Data.DataColumn("Tue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTue);
                this.columnWed = new global::System.Data.DataColumn("Wed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWed);
                this.columnThu = new global::System.Data.DataColumn("Thu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThu);
                this.columnFri = new global::System.Data.DataColumn("Fri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFri);
                this.columnFees = new global::System.Data.DataColumn("Fees", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFees);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtClassWiseStudentRow NewdtClassWiseStudentRow() {
                return ((dtClassWiseStudentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtClassWiseStudentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtClassWiseStudentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtClassWiseStudentRowChanged != null)) {
                    this.dtClassWiseStudentRowChanged(this, new dtClassWiseStudentRowChangeEvent(((dtClassWiseStudentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtClassWiseStudentRowChanging != null)) {
                    this.dtClassWiseStudentRowChanging(this, new dtClassWiseStudentRowChangeEvent(((dtClassWiseStudentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtClassWiseStudentRowDeleted != null)) {
                    this.dtClassWiseStudentRowDeleted(this, new dtClassWiseStudentRowChangeEvent(((dtClassWiseStudentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtClassWiseStudentRowDeleting != null)) {
                    this.dtClassWiseStudentRowDeleting(this, new dtClassWiseStudentRowChangeEvent(((dtClassWiseStudentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtClassWiseStudentRow(dtClassWiseStudentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                xmlClassWiseStudentAttendTime ds = new xmlClassWiseStudentAttendTime();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtClassWiseStudentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtAttendanceDataTable : global::System.Data.TypedTableBase<dtAttendanceRow> {
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnCheckInCheckOutDate;
            
            private global::System.Data.DataColumn columnclockin;
            
            private global::System.Data.DataColumn columnclockout;
            
            private global::System.Data.DataColumn columnTime;
            
            private global::System.Data.DataColumn columnClassName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAttendanceDataTable() {
                this.TableName = "dtAttendance";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtAttendanceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtAttendanceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CheckInCheckOutDateColumn {
                get {
                    return this.columnCheckInCheckOutDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clockinColumn {
                get {
                    return this.columnclockin;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn clockoutColumn {
                get {
                    return this.columnclockout;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeColumn {
                get {
                    return this.columnTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClassNameColumn {
                get {
                    return this.columnClassName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAttendanceRow this[int index] {
                get {
                    return ((dtAttendanceRow)(this.Rows[index]));
                }
            }
            
            public event dtAttendanceRowChangeEventHandler dtAttendanceRowChanging;
            
            public event dtAttendanceRowChangeEventHandler dtAttendanceRowChanged;
            
            public event dtAttendanceRowChangeEventHandler dtAttendanceRowDeleting;
            
            public event dtAttendanceRowChangeEventHandler dtAttendanceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtAttendanceRow(dtAttendanceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAttendanceRow AdddtAttendanceRow(string Name, System.DateTime CheckInCheckOutDate, System.DateTime clockin, System.DateTime clockout, string Time, string ClassName) {
                dtAttendanceRow rowdtAttendanceRow = ((dtAttendanceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Name,
                        CheckInCheckOutDate,
                        clockin,
                        clockout,
                        Time,
                        ClassName};
                rowdtAttendanceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtAttendanceRow);
                return rowdtAttendanceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtAttendanceDataTable cln = ((dtAttendanceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtAttendanceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnCheckInCheckOutDate = base.Columns["CheckInCheckOutDate"];
                this.columnclockin = base.Columns["clockin"];
                this.columnclockout = base.Columns["clockout"];
                this.columnTime = base.Columns["Time"];
                this.columnClassName = base.Columns["ClassName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnCheckInCheckOutDate = new global::System.Data.DataColumn("CheckInCheckOutDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCheckInCheckOutDate);
                this.columnclockin = new global::System.Data.DataColumn("clockin", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclockin);
                this.columnclockout = new global::System.Data.DataColumn("clockout", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnclockout);
                this.columnTime = new global::System.Data.DataColumn("Time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTime);
                this.columnClassName = new global::System.Data.DataColumn("ClassName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClassName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAttendanceRow NewdtAttendanceRow() {
                return ((dtAttendanceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtAttendanceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtAttendanceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtAttendanceRowChanged != null)) {
                    this.dtAttendanceRowChanged(this, new dtAttendanceRowChangeEvent(((dtAttendanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtAttendanceRowChanging != null)) {
                    this.dtAttendanceRowChanging(this, new dtAttendanceRowChangeEvent(((dtAttendanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtAttendanceRowDeleted != null)) {
                    this.dtAttendanceRowDeleted(this, new dtAttendanceRowChangeEvent(((dtAttendanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtAttendanceRowDeleting != null)) {
                    this.dtAttendanceRowDeleting(this, new dtAttendanceRowChangeEvent(((dtAttendanceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtAttendanceRow(dtAttendanceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                xmlClassWiseStudentAttendTime ds = new xmlClassWiseStudentAttendTime();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtAttendanceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtProgramWiseStudentDataTable : global::System.Data.TypedTableBase<dtProgramWiseStudentRow> {
            
            private global::System.Data.DataColumn columnChildSchoolYearId;
            
            private global::System.Data.DataColumn columnSchoolProgramId;
            
            private global::System.Data.DataColumn columnProgramName;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnMon;
            
            private global::System.Data.DataColumn columnTue;
            
            private global::System.Data.DataColumn columnWed;
            
            private global::System.Data.DataColumn columnThu;
            
            private global::System.Data.DataColumn columnFri;
            
            private global::System.Data.DataColumn columnFees;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtProgramWiseStudentDataTable() {
                this.TableName = "dtProgramWiseStudent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtProgramWiseStudentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtProgramWiseStudentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChildSchoolYearIdColumn {
                get {
                    return this.columnChildSchoolYearId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolProgramIdColumn {
                get {
                    return this.columnSchoolProgramId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramNameColumn {
                get {
                    return this.columnProgramName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MonColumn {
                get {
                    return this.columnMon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TueColumn {
                get {
                    return this.columnTue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WedColumn {
                get {
                    return this.columnWed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThuColumn {
                get {
                    return this.columnThu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FriColumn {
                get {
                    return this.columnFri;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeesColumn {
                get {
                    return this.columnFees;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtProgramWiseStudentRow this[int index] {
                get {
                    return ((dtProgramWiseStudentRow)(this.Rows[index]));
                }
            }
            
            public event dtProgramWiseStudentRowChangeEventHandler dtProgramWiseStudentRowChanging;
            
            public event dtProgramWiseStudentRowChangeEventHandler dtProgramWiseStudentRowChanged;
            
            public event dtProgramWiseStudentRowChangeEventHandler dtProgramWiseStudentRowDeleting;
            
            public event dtProgramWiseStudentRowChangeEventHandler dtProgramWiseStudentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtProgramWiseStudentRow(dtProgramWiseStudentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtProgramWiseStudentRow AdddtProgramWiseStudentRow(System.Guid ChildSchoolYearId, System.Guid SchoolProgramId, string ProgramName, string FirstName, string LastName, string Mon, string Tue, string Wed, string Thu, string Fri, decimal Fees) {
                dtProgramWiseStudentRow rowdtProgramWiseStudentRow = ((dtProgramWiseStudentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ChildSchoolYearId,
                        SchoolProgramId,
                        ProgramName,
                        FirstName,
                        LastName,
                        Mon,
                        Tue,
                        Wed,
                        Thu,
                        Fri,
                        Fees};
                rowdtProgramWiseStudentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtProgramWiseStudentRow);
                return rowdtProgramWiseStudentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtProgramWiseStudentDataTable cln = ((dtProgramWiseStudentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtProgramWiseStudentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnChildSchoolYearId = base.Columns["ChildSchoolYearId"];
                this.columnSchoolProgramId = base.Columns["SchoolProgramId"];
                this.columnProgramName = base.Columns["ProgramName"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnMon = base.Columns["Mon"];
                this.columnTue = base.Columns["Tue"];
                this.columnWed = base.Columns["Wed"];
                this.columnThu = base.Columns["Thu"];
                this.columnFri = base.Columns["Fri"];
                this.columnFees = base.Columns["Fees"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnChildSchoolYearId = new global::System.Data.DataColumn("ChildSchoolYearId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildSchoolYearId);
                this.columnSchoolProgramId = new global::System.Data.DataColumn("SchoolProgramId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolProgramId);
                this.columnProgramName = new global::System.Data.DataColumn("ProgramName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramName);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnMon = new global::System.Data.DataColumn("Mon", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMon);
                this.columnTue = new global::System.Data.DataColumn("Tue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTue);
                this.columnWed = new global::System.Data.DataColumn("Wed", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWed);
                this.columnThu = new global::System.Data.DataColumn("Thu", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThu);
                this.columnFri = new global::System.Data.DataColumn("Fri", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFri);
                this.columnFees = new global::System.Data.DataColumn("Fees", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFees);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtProgramWiseStudentRow NewdtProgramWiseStudentRow() {
                return ((dtProgramWiseStudentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtProgramWiseStudentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtProgramWiseStudentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtProgramWiseStudentRowChanged != null)) {
                    this.dtProgramWiseStudentRowChanged(this, new dtProgramWiseStudentRowChangeEvent(((dtProgramWiseStudentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtProgramWiseStudentRowChanging != null)) {
                    this.dtProgramWiseStudentRowChanging(this, new dtProgramWiseStudentRowChangeEvent(((dtProgramWiseStudentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtProgramWiseStudentRowDeleted != null)) {
                    this.dtProgramWiseStudentRowDeleted(this, new dtProgramWiseStudentRowChangeEvent(((dtProgramWiseStudentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtProgramWiseStudentRowDeleting != null)) {
                    this.dtProgramWiseStudentRowDeleting(this, new dtProgramWiseStudentRowChangeEvent(((dtProgramWiseStudentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtProgramWiseStudentRow(dtProgramWiseStudentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                xmlClassWiseStudentAttendTime ds = new xmlClassWiseStudentAttendTime();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtProgramWiseStudentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtDipositDataTable : global::System.Data.TypedTableBase<dtDipositRow> {
            
            private global::System.Data.DataColumn columnPaymentMethod;
            
            private global::System.Data.DataColumn columnFamilyTitle;
            
            private global::System.Data.DataColumn columnChildren;
            
            private global::System.Data.DataColumn columnCredit;
            
            private global::System.Data.DataColumn columncomment;
            
            private global::System.Data.DataColumn columntransactiondate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDipositDataTable() {
                this.TableName = "dtDiposit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtDipositDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtDipositDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentMethodColumn {
                get {
                    return this.columnPaymentMethod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FamilyTitleColumn {
                get {
                    return this.columnFamilyTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChildrenColumn {
                get {
                    return this.columnChildren;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditColumn {
                get {
                    return this.columnCredit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn commentColumn {
                get {
                    return this.columncomment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn transactiondateColumn {
                get {
                    return this.columntransactiondate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDipositRow this[int index] {
                get {
                    return ((dtDipositRow)(this.Rows[index]));
                }
            }
            
            public event dtDipositRowChangeEventHandler dtDipositRowChanging;
            
            public event dtDipositRowChangeEventHandler dtDipositRowChanged;
            
            public event dtDipositRowChangeEventHandler dtDipositRowDeleting;
            
            public event dtDipositRowChangeEventHandler dtDipositRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtDipositRow(dtDipositRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDipositRow AdddtDipositRow(string PaymentMethod, string FamilyTitle, string Children, decimal Credit, string comment, System.DateTime transactiondate) {
                dtDipositRow rowdtDipositRow = ((dtDipositRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PaymentMethod,
                        FamilyTitle,
                        Children,
                        Credit,
                        comment,
                        transactiondate};
                rowdtDipositRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtDipositRow);
                return rowdtDipositRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtDipositDataTable cln = ((dtDipositDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtDipositDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPaymentMethod = base.Columns["PaymentMethod"];
                this.columnFamilyTitle = base.Columns["FamilyTitle"];
                this.columnChildren = base.Columns["Children"];
                this.columnCredit = base.Columns["Credit"];
                this.columncomment = base.Columns["comment"];
                this.columntransactiondate = base.Columns["transactiondate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPaymentMethod = new global::System.Data.DataColumn("PaymentMethod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentMethod);
                this.columnFamilyTitle = new global::System.Data.DataColumn("FamilyTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamilyTitle);
                this.columnChildren = new global::System.Data.DataColumn("Children", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildren);
                this.columnCredit = new global::System.Data.DataColumn("Credit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCredit);
                this.columncomment = new global::System.Data.DataColumn("comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncomment);
                this.columntransactiondate = new global::System.Data.DataColumn("transactiondate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntransactiondate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDipositRow NewdtDipositRow() {
                return ((dtDipositRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtDipositRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtDipositRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtDipositRowChanged != null)) {
                    this.dtDipositRowChanged(this, new dtDipositRowChangeEvent(((dtDipositRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtDipositRowChanging != null)) {
                    this.dtDipositRowChanging(this, new dtDipositRowChangeEvent(((dtDipositRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtDipositRowDeleted != null)) {
                    this.dtDipositRowDeleted(this, new dtDipositRowChangeEvent(((dtDipositRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtDipositRowDeleting != null)) {
                    this.dtDipositRowDeleting(this, new dtDipositRowChangeEvent(((dtDipositRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtDipositRow(dtDipositRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                xmlClassWiseStudentAttendTime ds = new xmlClassWiseStudentAttendTime();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtDipositDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtLedgerOfFamilyDataTable : global::System.Data.TypedTableBase<dtLedgerOfFamilyRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnSchoolYearId;
            
            private global::System.Data.DataColumn columnChildFamilyId;
            
            private global::System.Data.DataColumn columnTransactionDate;
            
            private global::System.Data.DataColumn columnFamilyTitle;
            
            private global::System.Data.DataColumn columnDebit;
            
            private global::System.Data.DataColumn columnCredit;
            
            private global::System.Data.DataColumn columnbalance;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnPaymentMethodId;
            
            private global::System.Data.DataColumn columnPaymentMethodOrCharges;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLedgerOfFamilyDataTable() {
                this.TableName = "dtLedgerOfFamily";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtLedgerOfFamilyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtLedgerOfFamilyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SchoolYearIdColumn {
                get {
                    return this.columnSchoolYearId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChildFamilyIdColumn {
                get {
                    return this.columnChildFamilyId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionDateColumn {
                get {
                    return this.columnTransactionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FamilyTitleColumn {
                get {
                    return this.columnFamilyTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebitColumn {
                get {
                    return this.columnDebit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditColumn {
                get {
                    return this.columnCredit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn balanceColumn {
                get {
                    return this.columnbalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentMethodIdColumn {
                get {
                    return this.columnPaymentMethodId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentMethodOrChargesColumn {
                get {
                    return this.columnPaymentMethodOrCharges;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLedgerOfFamilyRow this[int index] {
                get {
                    return ((dtLedgerOfFamilyRow)(this.Rows[index]));
                }
            }
            
            public event dtLedgerOfFamilyRowChangeEventHandler dtLedgerOfFamilyRowChanging;
            
            public event dtLedgerOfFamilyRowChangeEventHandler dtLedgerOfFamilyRowChanged;
            
            public event dtLedgerOfFamilyRowChangeEventHandler dtLedgerOfFamilyRowDeleting;
            
            public event dtLedgerOfFamilyRowChangeEventHandler dtLedgerOfFamilyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtLedgerOfFamilyRow(dtLedgerOfFamilyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLedgerOfFamilyRow AdddtLedgerOfFamilyRow(System.Guid Id, System.Guid SchoolYearId, System.Guid ChildFamilyId, System.DateTime TransactionDate, string FamilyTitle, decimal Debit, decimal Credit, decimal balance, string Comment, int PaymentMethodId, string PaymentMethodOrCharges) {
                dtLedgerOfFamilyRow rowdtLedgerOfFamilyRow = ((dtLedgerOfFamilyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        SchoolYearId,
                        ChildFamilyId,
                        TransactionDate,
                        FamilyTitle,
                        Debit,
                        Credit,
                        balance,
                        Comment,
                        PaymentMethodId,
                        PaymentMethodOrCharges};
                rowdtLedgerOfFamilyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtLedgerOfFamilyRow);
                return rowdtLedgerOfFamilyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtLedgerOfFamilyDataTable cln = ((dtLedgerOfFamilyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtLedgerOfFamilyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnSchoolYearId = base.Columns["SchoolYearId"];
                this.columnChildFamilyId = base.Columns["ChildFamilyId"];
                this.columnTransactionDate = base.Columns["TransactionDate"];
                this.columnFamilyTitle = base.Columns["FamilyTitle"];
                this.columnDebit = base.Columns["Debit"];
                this.columnCredit = base.Columns["Credit"];
                this.columnbalance = base.Columns["balance"];
                this.columnComment = base.Columns["Comment"];
                this.columnPaymentMethodId = base.Columns["PaymentMethodId"];
                this.columnPaymentMethodOrCharges = base.Columns["PaymentMethodOrCharges"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnSchoolYearId = new global::System.Data.DataColumn("SchoolYearId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSchoolYearId);
                this.columnChildFamilyId = new global::System.Data.DataColumn("ChildFamilyId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildFamilyId);
                this.columnTransactionDate = new global::System.Data.DataColumn("TransactionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionDate);
                this.columnFamilyTitle = new global::System.Data.DataColumn("FamilyTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamilyTitle);
                this.columnDebit = new global::System.Data.DataColumn("Debit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebit);
                this.columnCredit = new global::System.Data.DataColumn("Credit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCredit);
                this.columnbalance = new global::System.Data.DataColumn("balance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnbalance);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnPaymentMethodId = new global::System.Data.DataColumn("PaymentMethodId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentMethodId);
                this.columnPaymentMethodOrCharges = new global::System.Data.DataColumn("PaymentMethodOrCharges", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentMethodOrCharges);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLedgerOfFamilyRow NewdtLedgerOfFamilyRow() {
                return ((dtLedgerOfFamilyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtLedgerOfFamilyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtLedgerOfFamilyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtLedgerOfFamilyRowChanged != null)) {
                    this.dtLedgerOfFamilyRowChanged(this, new dtLedgerOfFamilyRowChangeEvent(((dtLedgerOfFamilyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtLedgerOfFamilyRowChanging != null)) {
                    this.dtLedgerOfFamilyRowChanging(this, new dtLedgerOfFamilyRowChangeEvent(((dtLedgerOfFamilyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtLedgerOfFamilyRowDeleted != null)) {
                    this.dtLedgerOfFamilyRowDeleted(this, new dtLedgerOfFamilyRowChangeEvent(((dtLedgerOfFamilyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtLedgerOfFamilyRowDeleting != null)) {
                    this.dtLedgerOfFamilyRowDeleting(this, new dtLedgerOfFamilyRowChangeEvent(((dtLedgerOfFamilyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtLedgerOfFamilyRow(dtLedgerOfFamilyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                xmlClassWiseStudentAttendTime ds = new xmlClassWiseStudentAttendTime();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtLedgerOfFamilyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtAccountReceiable_CreditDataTable : global::System.Data.TypedTableBase<dtAccountReceiable_CreditRow> {
            
            private global::System.Data.DataColumn columnFamilyTitle;
            
            private global::System.Data.DataColumn columnTranDate;
            
            private global::System.Data.DataColumn columnChildName;
            
            private global::System.Data.DataColumn columnFirst;
            
            private global::System.Data.DataColumn columnSecond;
            
            private global::System.Data.DataColumn columnThird;
            
            private global::System.Data.DataColumn columnFour;
            
            private global::System.Data.DataColumn columnDebitCredit;
            
            private global::System.Data.DataColumn columnBalance;
            
            private global::System.Data.DataColumn columnOpBalance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAccountReceiable_CreditDataTable() {
                this.TableName = "dtAccountReceiable_Credit";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtAccountReceiable_CreditDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtAccountReceiable_CreditDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FamilyTitleColumn {
                get {
                    return this.columnFamilyTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TranDateColumn {
                get {
                    return this.columnTranDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChildNameColumn {
                get {
                    return this.columnChildName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstColumn {
                get {
                    return this.columnFirst;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SecondColumn {
                get {
                    return this.columnSecond;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ThirdColumn {
                get {
                    return this.columnThird;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FourColumn {
                get {
                    return this.columnFour;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DebitCreditColumn {
                get {
                    return this.columnDebitCredit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BalanceColumn {
                get {
                    return this.columnBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OpBalanceColumn {
                get {
                    return this.columnOpBalance;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAccountReceiable_CreditRow this[int index] {
                get {
                    return ((dtAccountReceiable_CreditRow)(this.Rows[index]));
                }
            }
            
            public event dtAccountReceiable_CreditRowChangeEventHandler dtAccountReceiable_CreditRowChanging;
            
            public event dtAccountReceiable_CreditRowChangeEventHandler dtAccountReceiable_CreditRowChanged;
            
            public event dtAccountReceiable_CreditRowChangeEventHandler dtAccountReceiable_CreditRowDeleting;
            
            public event dtAccountReceiable_CreditRowChangeEventHandler dtAccountReceiable_CreditRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtAccountReceiable_CreditRow(dtAccountReceiable_CreditRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAccountReceiable_CreditRow AdddtAccountReceiable_CreditRow(string FamilyTitle, System.DateTime TranDate, string ChildName, decimal First, decimal Second, decimal Third, decimal Four, decimal DebitCredit, decimal Balance, decimal OpBalance) {
                dtAccountReceiable_CreditRow rowdtAccountReceiable_CreditRow = ((dtAccountReceiable_CreditRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FamilyTitle,
                        TranDate,
                        ChildName,
                        First,
                        Second,
                        Third,
                        Four,
                        DebitCredit,
                        Balance,
                        OpBalance};
                rowdtAccountReceiable_CreditRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtAccountReceiable_CreditRow);
                return rowdtAccountReceiable_CreditRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtAccountReceiable_CreditDataTable cln = ((dtAccountReceiable_CreditDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtAccountReceiable_CreditDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFamilyTitle = base.Columns["FamilyTitle"];
                this.columnTranDate = base.Columns["TranDate"];
                this.columnChildName = base.Columns["ChildName"];
                this.columnFirst = base.Columns["First"];
                this.columnSecond = base.Columns["Second"];
                this.columnThird = base.Columns["Third"];
                this.columnFour = base.Columns["Four"];
                this.columnDebitCredit = base.Columns["DebitCredit"];
                this.columnBalance = base.Columns["Balance"];
                this.columnOpBalance = base.Columns["OpBalance"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFamilyTitle = new global::System.Data.DataColumn("FamilyTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamilyTitle);
                this.columnTranDate = new global::System.Data.DataColumn("TranDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTranDate);
                this.columnChildName = new global::System.Data.DataColumn("ChildName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildName);
                this.columnFirst = new global::System.Data.DataColumn("First", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirst);
                this.columnSecond = new global::System.Data.DataColumn("Second", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSecond);
                this.columnThird = new global::System.Data.DataColumn("Third", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnThird);
                this.columnFour = new global::System.Data.DataColumn("Four", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFour);
                this.columnDebitCredit = new global::System.Data.DataColumn("DebitCredit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDebitCredit);
                this.columnBalance = new global::System.Data.DataColumn("Balance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBalance);
                this.columnOpBalance = new global::System.Data.DataColumn("OpBalance", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOpBalance);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAccountReceiable_CreditRow NewdtAccountReceiable_CreditRow() {
                return ((dtAccountReceiable_CreditRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtAccountReceiable_CreditRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtAccountReceiable_CreditRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtAccountReceiable_CreditRowChanged != null)) {
                    this.dtAccountReceiable_CreditRowChanged(this, new dtAccountReceiable_CreditRowChangeEvent(((dtAccountReceiable_CreditRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtAccountReceiable_CreditRowChanging != null)) {
                    this.dtAccountReceiable_CreditRowChanging(this, new dtAccountReceiable_CreditRowChangeEvent(((dtAccountReceiable_CreditRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtAccountReceiable_CreditRowDeleted != null)) {
                    this.dtAccountReceiable_CreditRowDeleted(this, new dtAccountReceiable_CreditRowChangeEvent(((dtAccountReceiable_CreditRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtAccountReceiable_CreditRowDeleting != null)) {
                    this.dtAccountReceiable_CreditRowDeleting(this, new dtAccountReceiable_CreditRowChangeEvent(((dtAccountReceiable_CreditRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtAccountReceiable_CreditRow(dtAccountReceiable_CreditRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                xmlClassWiseStudentAttendTime ds = new xmlClassWiseStudentAttendTime();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtAccountReceiable_CreditDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtLateFeesDataTable : global::System.Data.TypedTableBase<dtLateFeesRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnFamilyTitle;
            
            private global::System.Data.DataColumn columnChildName;
            
            private global::System.Data.DataColumn columnLateFee;
            
            private global::System.Data.DataColumn columnTransactionDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLateFeesDataTable() {
                this.TableName = "dtLateFees";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtLateFeesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtLateFeesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FamilyTitleColumn {
                get {
                    return this.columnFamilyTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChildNameColumn {
                get {
                    return this.columnChildName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LateFeeColumn {
                get {
                    return this.columnLateFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TransactionDateColumn {
                get {
                    return this.columnTransactionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLateFeesRow this[int index] {
                get {
                    return ((dtLateFeesRow)(this.Rows[index]));
                }
            }
            
            public event dtLateFeesRowChangeEventHandler dtLateFeesRowChanging;
            
            public event dtLateFeesRowChangeEventHandler dtLateFeesRowChanged;
            
            public event dtLateFeesRowChangeEventHandler dtLateFeesRowDeleting;
            
            public event dtLateFeesRowChangeEventHandler dtLateFeesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtLateFeesRow(dtLateFeesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLateFeesRow AdddtLateFeesRow(System.Guid Id, string FamilyTitle, string ChildName, decimal LateFee, System.DateTime TransactionDate) {
                dtLateFeesRow rowdtLateFeesRow = ((dtLateFeesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Id,
                        FamilyTitle,
                        ChildName,
                        LateFee,
                        TransactionDate};
                rowdtLateFeesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtLateFeesRow);
                return rowdtLateFeesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtLateFeesDataTable cln = ((dtLateFeesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtLateFeesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnFamilyTitle = base.Columns["FamilyTitle"];
                this.columnChildName = base.Columns["ChildName"];
                this.columnLateFee = base.Columns["LateFee"];
                this.columnTransactionDate = base.Columns["TransactionDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnFamilyTitle = new global::System.Data.DataColumn("FamilyTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamilyTitle);
                this.columnChildName = new global::System.Data.DataColumn("ChildName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildName);
                this.columnLateFee = new global::System.Data.DataColumn("LateFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLateFee);
                this.columnTransactionDate = new global::System.Data.DataColumn("TransactionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTransactionDate);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLateFeesRow NewdtLateFeesRow() {
                return ((dtLateFeesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtLateFeesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtLateFeesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtLateFeesRowChanged != null)) {
                    this.dtLateFeesRowChanged(this, new dtLateFeesRowChangeEvent(((dtLateFeesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtLateFeesRowChanging != null)) {
                    this.dtLateFeesRowChanging(this, new dtLateFeesRowChangeEvent(((dtLateFeesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtLateFeesRowDeleted != null)) {
                    this.dtLateFeesRowDeleted(this, new dtLateFeesRowChangeEvent(((dtLateFeesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtLateFeesRowDeleting != null)) {
                    this.dtLateFeesRowDeleting(this, new dtLateFeesRowChangeEvent(((dtLateFeesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtLateFeesRow(dtLateFeesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                xmlClassWiseStudentAttendTime ds = new xmlClassWiseStudentAttendTime();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtLateFeesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtFamilyChildListDataTable : global::System.Data.TypedTableBase<dtFamilyChildListRow> {
            
            private global::System.Data.DataColumn columnFamilyTitle;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnChildName;
            
            private global::System.Data.DataColumn columnGender;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnstartdate;
            
            private global::System.Data.DataColumn columnenddate;
            
            private global::System.Data.DataColumn columnfees;
            
            private global::System.Data.DataColumn columnFeesPeriod;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnPhone;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyChildListDataTable() {
                this.TableName = "dtFamilyChildList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtFamilyChildListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtFamilyChildListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FamilyTitleColumn {
                get {
                    return this.columnFamilyTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChildNameColumn {
                get {
                    return this.columnChildName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenderColumn {
                get {
                    return this.columnGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn startdateColumn {
                get {
                    return this.columnstartdate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn enddateColumn {
                get {
                    return this.columnenddate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn feesColumn {
                get {
                    return this.columnfees;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeesPeriodColumn {
                get {
                    return this.columnFeesPeriod;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyChildListRow this[int index] {
                get {
                    return ((dtFamilyChildListRow)(this.Rows[index]));
                }
            }
            
            public event dtFamilyChildListRowChangeEventHandler dtFamilyChildListRowChanging;
            
            public event dtFamilyChildListRowChangeEventHandler dtFamilyChildListRowChanged;
            
            public event dtFamilyChildListRowChangeEventHandler dtFamilyChildListRowDeleting;
            
            public event dtFamilyChildListRowChangeEventHandler dtFamilyChildListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtFamilyChildListRow(dtFamilyChildListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyChildListRow AdddtFamilyChildListRow(string FamilyTitle, string Email, string ChildName, string Gender, string Title, System.DateTime startdate, System.DateTime enddate, decimal fees, string FeesPeriod, string Address, string Phone) {
                dtFamilyChildListRow rowdtFamilyChildListRow = ((dtFamilyChildListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FamilyTitle,
                        Email,
                        ChildName,
                        Gender,
                        Title,
                        startdate,
                        enddate,
                        fees,
                        FeesPeriod,
                        Address,
                        Phone};
                rowdtFamilyChildListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtFamilyChildListRow);
                return rowdtFamilyChildListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtFamilyChildListDataTable cln = ((dtFamilyChildListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtFamilyChildListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFamilyTitle = base.Columns["FamilyTitle"];
                this.columnEmail = base.Columns["Email"];
                this.columnChildName = base.Columns["ChildName"];
                this.columnGender = base.Columns["Gender"];
                this.columnTitle = base.Columns["Title"];
                this.columnstartdate = base.Columns["startdate"];
                this.columnenddate = base.Columns["enddate"];
                this.columnfees = base.Columns["fees"];
                this.columnFeesPeriod = base.Columns["FeesPeriod"];
                this.columnAddress = base.Columns["Address"];
                this.columnPhone = base.Columns["Phone"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFamilyTitle = new global::System.Data.DataColumn("FamilyTitle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFamilyTitle);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnChildName = new global::System.Data.DataColumn("ChildName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChildName);
                this.columnGender = new global::System.Data.DataColumn("Gender", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGender);
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnstartdate = new global::System.Data.DataColumn("startdate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnstartdate);
                this.columnenddate = new global::System.Data.DataColumn("enddate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnenddate);
                this.columnfees = new global::System.Data.DataColumn("fees", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfees);
                this.columnFeesPeriod = new global::System.Data.DataColumn("FeesPeriod", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeesPeriod);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyChildListRow NewdtFamilyChildListRow() {
                return ((dtFamilyChildListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtFamilyChildListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtFamilyChildListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtFamilyChildListRowChanged != null)) {
                    this.dtFamilyChildListRowChanged(this, new dtFamilyChildListRowChangeEvent(((dtFamilyChildListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtFamilyChildListRowChanging != null)) {
                    this.dtFamilyChildListRowChanging(this, new dtFamilyChildListRowChangeEvent(((dtFamilyChildListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtFamilyChildListRowDeleted != null)) {
                    this.dtFamilyChildListRowDeleted(this, new dtFamilyChildListRowChangeEvent(((dtFamilyChildListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtFamilyChildListRowDeleting != null)) {
                    this.dtFamilyChildListRowDeleting(this, new dtFamilyChildListRowChangeEvent(((dtFamilyChildListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtFamilyChildListRow(dtFamilyChildListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                xmlClassWiseStudentAttendTime ds = new xmlClassWiseStudentAttendTime();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtFamilyChildListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtChildDataListDataTable : global::System.Data.TypedTableBase<dtChildDataListRow> {
            
            private global::System.Data.DataColumn columnChild;
            
            private global::System.Data.DataColumn columnDOB;
            
            private global::System.Data.DataColumn columnGender;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtChildDataListDataTable() {
                this.TableName = "dtChildDataList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtChildDataListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtChildDataListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChildColumn {
                get {
                    return this.columnChild;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOBColumn {
                get {
                    return this.columnDOB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenderColumn {
                get {
                    return this.columnGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtChildDataListRow this[int index] {
                get {
                    return ((dtChildDataListRow)(this.Rows[index]));
                }
            }
            
            public event dtChildDataListRowChangeEventHandler dtChildDataListRowChanging;
            
            public event dtChildDataListRowChangeEventHandler dtChildDataListRowChanged;
            
            public event dtChildDataListRowChangeEventHandler dtChildDataListRowDeleting;
            
            public event dtChildDataListRowChangeEventHandler dtChildDataListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtChildDataListRow(dtChildDataListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtChildDataListRow AdddtChildDataListRow(string Child, System.DateTime DOB, string Gender, string Title, string Name) {
                dtChildDataListRow rowdtChildDataListRow = ((dtChildDataListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Child,
                        DOB,
                        Gender,
                        Title,
                        Name};
                rowdtChildDataListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowdtChildDataListRow);
                return rowdtChildDataListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                dtChildDataListDataTable cln = ((dtChildDataListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new dtChildDataListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnChild = base.Columns["Child"];
                this.columnDOB = base.Columns["DOB"];
                this.columnGender = base.Columns["Gender"];
                this.columnTitle = base.Columns["Title"];
                this.columnName = base.Columns["Name"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnChild = new global::System.Data.DataColumn("Child", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChild);
                this.columnDOB = new global::System.Data.DataColumn("DOB", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOB);
                this.columnGender = new global::System.Data.DataColumn("Gender", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGender);
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtChildDataListRow NewdtChildDataListRow() {
                return ((dtChildDataListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new dtChildDataListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(dtChildDataListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtChildDataListRowChanged != null)) {
                    this.dtChildDataListRowChanged(this, new dtChildDataListRowChangeEvent(((dtChildDataListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtChildDataListRowChanging != null)) {
                    this.dtChildDataListRowChanging(this, new dtChildDataListRowChangeEvent(((dtChildDataListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtChildDataListRowDeleted != null)) {
                    this.dtChildDataListRowDeleted(this, new dtChildDataListRowChangeEvent(((dtChildDataListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtChildDataListRowDeleting != null)) {
                    this.dtChildDataListRowDeleting(this, new dtChildDataListRowChangeEvent(((dtChildDataListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtChildDataListRow(dtChildDataListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                xmlClassWiseStudentAttendTime ds = new xmlClassWiseStudentAttendTime();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtChildDataListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtClassWiseStudentRow : global::System.Data.DataRow {
            
            private dtClassWiseStudentDataTable tabledtClassWiseStudent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtClassWiseStudentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtClassWiseStudent = ((dtClassWiseStudentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ChildSchoolYearId {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tabledtClassWiseStudent.ChildSchoolYearIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChildSchoolYearId\' in table \'dtClassWiseStudent\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabledtClassWiseStudent.ChildSchoolYearIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ProgClassRoomId {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tabledtClassWiseStudent.ProgClassRoomIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProgClassRoomId\' in table \'dtClassWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtClassWiseStudent.ProgClassRoomIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassroomTitle {
                get {
                    try {
                        return ((string)(this[this.tabledtClassWiseStudent.ClassroomTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClassroomTitle\' in table \'dtClassWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtClassWiseStudent.ClassroomTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tabledtClassWiseStudent.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'dtClassWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtClassWiseStudent.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tabledtClassWiseStudent.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'dtClassWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtClassWiseStudent.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mon {
                get {
                    try {
                        return ((string)(this[this.tabledtClassWiseStudent.MonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mon\' in table \'dtClassWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtClassWiseStudent.MonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tue {
                get {
                    try {
                        return ((string)(this[this.tabledtClassWiseStudent.TueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tue\' in table \'dtClassWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtClassWiseStudent.TueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Wed {
                get {
                    try {
                        return ((string)(this[this.tabledtClassWiseStudent.WedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Wed\' in table \'dtClassWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtClassWiseStudent.WedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Thu {
                get {
                    try {
                        return ((string)(this[this.tabledtClassWiseStudent.ThuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Thu\' in table \'dtClassWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtClassWiseStudent.ThuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fri {
                get {
                    try {
                        return ((string)(this[this.tabledtClassWiseStudent.FriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fri\' in table \'dtClassWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtClassWiseStudent.FriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Fees {
                get {
                    try {
                        return ((decimal)(this[this.tabledtClassWiseStudent.FeesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fees\' in table \'dtClassWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtClassWiseStudent.FeesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChildSchoolYearIdNull() {
                return this.IsNull(this.tabledtClassWiseStudent.ChildSchoolYearIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChildSchoolYearIdNull() {
                this[this.tabledtClassWiseStudent.ChildSchoolYearIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgClassRoomIdNull() {
                return this.IsNull(this.tabledtClassWiseStudent.ProgClassRoomIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgClassRoomIdNull() {
                this[this.tabledtClassWiseStudent.ProgClassRoomIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassroomTitleNull() {
                return this.IsNull(this.tabledtClassWiseStudent.ClassroomTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassroomTitleNull() {
                this[this.tabledtClassWiseStudent.ClassroomTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tabledtClassWiseStudent.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tabledtClassWiseStudent.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tabledtClassWiseStudent.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tabledtClassWiseStudent.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonNull() {
                return this.IsNull(this.tabledtClassWiseStudent.MonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonNull() {
                this[this.tabledtClassWiseStudent.MonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTueNull() {
                return this.IsNull(this.tabledtClassWiseStudent.TueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTueNull() {
                this[this.tabledtClassWiseStudent.TueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWedNull() {
                return this.IsNull(this.tabledtClassWiseStudent.WedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWedNull() {
                this[this.tabledtClassWiseStudent.WedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThuNull() {
                return this.IsNull(this.tabledtClassWiseStudent.ThuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThuNull() {
                this[this.tabledtClassWiseStudent.ThuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFriNull() {
                return this.IsNull(this.tabledtClassWiseStudent.FriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFriNull() {
                this[this.tabledtClassWiseStudent.FriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeesNull() {
                return this.IsNull(this.tabledtClassWiseStudent.FeesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeesNull() {
                this[this.tabledtClassWiseStudent.FeesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtAttendanceRow : global::System.Data.DataRow {
            
            private dtAttendanceDataTable tabledtAttendance;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtAttendanceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtAttendance = ((dtAttendanceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tabledtAttendance.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'dtAttendance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttendance.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CheckInCheckOutDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtAttendance.CheckInCheckOutDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CheckInCheckOutDate\' in table \'dtAttendance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttendance.CheckInCheckOutDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime clockin {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtAttendance.clockinColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clockin\' in table \'dtAttendance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttendance.clockinColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime clockout {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtAttendance.clockoutColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'clockout\' in table \'dtAttendance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttendance.clockoutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Time {
                get {
                    try {
                        return ((string)(this[this.tabledtAttendance.TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Time\' in table \'dtAttendance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttendance.TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClassName {
                get {
                    try {
                        return ((string)(this[this.tabledtAttendance.ClassNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClassName\' in table \'dtAttendance\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAttendance.ClassNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tabledtAttendance.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tabledtAttendance.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCheckInCheckOutDateNull() {
                return this.IsNull(this.tabledtAttendance.CheckInCheckOutDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCheckInCheckOutDateNull() {
                this[this.tabledtAttendance.CheckInCheckOutDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclockinNull() {
                return this.IsNull(this.tabledtAttendance.clockinColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclockinNull() {
                this[this.tabledtAttendance.clockinColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsclockoutNull() {
                return this.IsNull(this.tabledtAttendance.clockoutColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetclockoutNull() {
                this[this.tabledtAttendance.clockoutColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeNull() {
                return this.IsNull(this.tabledtAttendance.TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeNull() {
                this[this.tabledtAttendance.TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClassNameNull() {
                return this.IsNull(this.tabledtAttendance.ClassNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClassNameNull() {
                this[this.tabledtAttendance.ClassNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtProgramWiseStudentRow : global::System.Data.DataRow {
            
            private dtProgramWiseStudentDataTable tabledtProgramWiseStudent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtProgramWiseStudentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtProgramWiseStudent = ((dtProgramWiseStudentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ChildSchoolYearId {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tabledtProgramWiseStudent.ChildSchoolYearIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChildSchoolYearId\' in table \'dtProgramWiseStudent\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tabledtProgramWiseStudent.ChildSchoolYearIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid SchoolProgramId {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tabledtProgramWiseStudent.SchoolProgramIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchoolProgramId\' in table \'dtProgramWiseStudent\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tabledtProgramWiseStudent.SchoolProgramIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProgramName {
                get {
                    try {
                        return ((string)(this[this.tabledtProgramWiseStudent.ProgramNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProgramName\' in table \'dtProgramWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtProgramWiseStudent.ProgramNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    try {
                        return ((string)(this[this.tabledtProgramWiseStudent.FirstNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FirstName\' in table \'dtProgramWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtProgramWiseStudent.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    try {
                        return ((string)(this[this.tabledtProgramWiseStudent.LastNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastName\' in table \'dtProgramWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtProgramWiseStudent.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Mon {
                get {
                    try {
                        return ((string)(this[this.tabledtProgramWiseStudent.MonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mon\' in table \'dtProgramWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtProgramWiseStudent.MonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Tue {
                get {
                    try {
                        return ((string)(this[this.tabledtProgramWiseStudent.TueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Tue\' in table \'dtProgramWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtProgramWiseStudent.TueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Wed {
                get {
                    try {
                        return ((string)(this[this.tabledtProgramWiseStudent.WedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Wed\' in table \'dtProgramWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtProgramWiseStudent.WedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Thu {
                get {
                    try {
                        return ((string)(this[this.tabledtProgramWiseStudent.ThuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Thu\' in table \'dtProgramWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtProgramWiseStudent.ThuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fri {
                get {
                    try {
                        return ((string)(this[this.tabledtProgramWiseStudent.FriColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fri\' in table \'dtProgramWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtProgramWiseStudent.FriColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Fees {
                get {
                    try {
                        return ((decimal)(this[this.tabledtProgramWiseStudent.FeesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fees\' in table \'dtProgramWiseStudent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtProgramWiseStudent.FeesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChildSchoolYearIdNull() {
                return this.IsNull(this.tabledtProgramWiseStudent.ChildSchoolYearIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChildSchoolYearIdNull() {
                this[this.tabledtProgramWiseStudent.ChildSchoolYearIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchoolProgramIdNull() {
                return this.IsNull(this.tabledtProgramWiseStudent.SchoolProgramIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchoolProgramIdNull() {
                this[this.tabledtProgramWiseStudent.SchoolProgramIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgramNameNull() {
                return this.IsNull(this.tabledtProgramWiseStudent.ProgramNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgramNameNull() {
                this[this.tabledtProgramWiseStudent.ProgramNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNameNull() {
                return this.IsNull(this.tabledtProgramWiseStudent.FirstNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNameNull() {
                this[this.tabledtProgramWiseStudent.FirstNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastNameNull() {
                return this.IsNull(this.tabledtProgramWiseStudent.LastNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastNameNull() {
                this[this.tabledtProgramWiseStudent.LastNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMonNull() {
                return this.IsNull(this.tabledtProgramWiseStudent.MonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMonNull() {
                this[this.tabledtProgramWiseStudent.MonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTueNull() {
                return this.IsNull(this.tabledtProgramWiseStudent.TueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTueNull() {
                this[this.tabledtProgramWiseStudent.TueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWedNull() {
                return this.IsNull(this.tabledtProgramWiseStudent.WedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWedNull() {
                this[this.tabledtProgramWiseStudent.WedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThuNull() {
                return this.IsNull(this.tabledtProgramWiseStudent.ThuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThuNull() {
                this[this.tabledtProgramWiseStudent.ThuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFriNull() {
                return this.IsNull(this.tabledtProgramWiseStudent.FriColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFriNull() {
                this[this.tabledtProgramWiseStudent.FriColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeesNull() {
                return this.IsNull(this.tabledtProgramWiseStudent.FeesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeesNull() {
                this[this.tabledtProgramWiseStudent.FeesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtDipositRow : global::System.Data.DataRow {
            
            private dtDipositDataTable tabledtDiposit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtDipositRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtDiposit = ((dtDipositDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentMethod {
                get {
                    try {
                        return ((string)(this[this.tabledtDiposit.PaymentMethodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentMethod\' in table \'dtDiposit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDiposit.PaymentMethodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FamilyTitle {
                get {
                    try {
                        return ((string)(this[this.tabledtDiposit.FamilyTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FamilyTitle\' in table \'dtDiposit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDiposit.FamilyTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Children {
                get {
                    try {
                        return ((string)(this[this.tabledtDiposit.ChildrenColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Children\' in table \'dtDiposit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDiposit.ChildrenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Credit {
                get {
                    try {
                        return ((decimal)(this[this.tabledtDiposit.CreditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Credit\' in table \'dtDiposit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDiposit.CreditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string comment {
                get {
                    try {
                        return ((string)(this[this.tabledtDiposit.commentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'comment\' in table \'dtDiposit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDiposit.commentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime transactiondate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtDiposit.transactiondateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'transactiondate\' in table \'dtDiposit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtDiposit.transactiondateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentMethodNull() {
                return this.IsNull(this.tabledtDiposit.PaymentMethodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentMethodNull() {
                this[this.tabledtDiposit.PaymentMethodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamilyTitleNull() {
                return this.IsNull(this.tabledtDiposit.FamilyTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamilyTitleNull() {
                this[this.tabledtDiposit.FamilyTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChildrenNull() {
                return this.IsNull(this.tabledtDiposit.ChildrenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChildrenNull() {
                this[this.tabledtDiposit.ChildrenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditNull() {
                return this.IsNull(this.tabledtDiposit.CreditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditNull() {
                this[this.tabledtDiposit.CreditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscommentNull() {
                return this.IsNull(this.tabledtDiposit.commentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcommentNull() {
                this[this.tabledtDiposit.commentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstransactiondateNull() {
                return this.IsNull(this.tabledtDiposit.transactiondateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettransactiondateNull() {
                this[this.tabledtDiposit.transactiondateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtLedgerOfFamilyRow : global::System.Data.DataRow {
            
            private dtLedgerOfFamilyDataTable tabledtLedgerOfFamily;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtLedgerOfFamilyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtLedgerOfFamily = ((dtLedgerOfFamilyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid Id {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tabledtLedgerOfFamily.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Id\' in table \'dtLedgerOfFamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLedgerOfFamily.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid SchoolYearId {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tabledtLedgerOfFamily.SchoolYearIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SchoolYearId\' in table \'dtLedgerOfFamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLedgerOfFamily.SchoolYearIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ChildFamilyId {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tabledtLedgerOfFamily.ChildFamilyIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChildFamilyId\' in table \'dtLedgerOfFamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLedgerOfFamily.ChildFamilyIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TransactionDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtLedgerOfFamily.TransactionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransactionDate\' in table \'dtLedgerOfFamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLedgerOfFamily.TransactionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FamilyTitle {
                get {
                    try {
                        return ((string)(this[this.tabledtLedgerOfFamily.FamilyTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FamilyTitle\' in table \'dtLedgerOfFamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLedgerOfFamily.FamilyTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Debit {
                get {
                    try {
                        return ((decimal)(this[this.tabledtLedgerOfFamily.DebitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Debit\' in table \'dtLedgerOfFamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLedgerOfFamily.DebitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Credit {
                get {
                    try {
                        return ((decimal)(this[this.tabledtLedgerOfFamily.CreditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Credit\' in table \'dtLedgerOfFamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLedgerOfFamily.CreditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal balance {
                get {
                    try {
                        return ((decimal)(this[this.tabledtLedgerOfFamily.balanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'balance\' in table \'dtLedgerOfFamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLedgerOfFamily.balanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tabledtLedgerOfFamily.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'dtLedgerOfFamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLedgerOfFamily.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentMethodId {
                get {
                    try {
                        return ((int)(this[this.tabledtLedgerOfFamily.PaymentMethodIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentMethodId\' in table \'dtLedgerOfFamily\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLedgerOfFamily.PaymentMethodIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentMethodOrCharges {
                get {
                    try {
                        return ((string)(this[this.tabledtLedgerOfFamily.PaymentMethodOrChargesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentMethodOrCharges\' in table \'dtLedgerOfFamily\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tabledtLedgerOfFamily.PaymentMethodOrChargesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdNull() {
                return this.IsNull(this.tabledtLedgerOfFamily.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdNull() {
                this[this.tabledtLedgerOfFamily.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSchoolYearIdNull() {
                return this.IsNull(this.tabledtLedgerOfFamily.SchoolYearIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSchoolYearIdNull() {
                this[this.tabledtLedgerOfFamily.SchoolYearIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChildFamilyIdNull() {
                return this.IsNull(this.tabledtLedgerOfFamily.ChildFamilyIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChildFamilyIdNull() {
                this[this.tabledtLedgerOfFamily.ChildFamilyIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionDateNull() {
                return this.IsNull(this.tabledtLedgerOfFamily.TransactionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionDateNull() {
                this[this.tabledtLedgerOfFamily.TransactionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamilyTitleNull() {
                return this.IsNull(this.tabledtLedgerOfFamily.FamilyTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamilyTitleNull() {
                this[this.tabledtLedgerOfFamily.FamilyTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebitNull() {
                return this.IsNull(this.tabledtLedgerOfFamily.DebitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDebitNull() {
                this[this.tabledtLedgerOfFamily.DebitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditNull() {
                return this.IsNull(this.tabledtLedgerOfFamily.CreditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditNull() {
                this[this.tabledtLedgerOfFamily.CreditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsbalanceNull() {
                return this.IsNull(this.tabledtLedgerOfFamily.balanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetbalanceNull() {
                this[this.tabledtLedgerOfFamily.balanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tabledtLedgerOfFamily.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tabledtLedgerOfFamily.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentMethodIdNull() {
                return this.IsNull(this.tabledtLedgerOfFamily.PaymentMethodIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentMethodIdNull() {
                this[this.tabledtLedgerOfFamily.PaymentMethodIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentMethodOrChargesNull() {
                return this.IsNull(this.tabledtLedgerOfFamily.PaymentMethodOrChargesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentMethodOrChargesNull() {
                this[this.tabledtLedgerOfFamily.PaymentMethodOrChargesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtAccountReceiable_CreditRow : global::System.Data.DataRow {
            
            private dtAccountReceiable_CreditDataTable tabledtAccountReceiable_Credit;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtAccountReceiable_CreditRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtAccountReceiable_Credit = ((dtAccountReceiable_CreditDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FamilyTitle {
                get {
                    try {
                        return ((string)(this[this.tabledtAccountReceiable_Credit.FamilyTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FamilyTitle\' in table \'dtAccountReceiable_Credit\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabledtAccountReceiable_Credit.FamilyTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TranDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtAccountReceiable_Credit.TranDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TranDate\' in table \'dtAccountReceiable_Credit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAccountReceiable_Credit.TranDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChildName {
                get {
                    try {
                        return ((string)(this[this.tabledtAccountReceiable_Credit.ChildNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChildName\' in table \'dtAccountReceiable_Credit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAccountReceiable_Credit.ChildNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal First {
                get {
                    try {
                        return ((decimal)(this[this.tabledtAccountReceiable_Credit.FirstColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'First\' in table \'dtAccountReceiable_Credit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAccountReceiable_Credit.FirstColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Second {
                get {
                    try {
                        return ((decimal)(this[this.tabledtAccountReceiable_Credit.SecondColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Second\' in table \'dtAccountReceiable_Credit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAccountReceiable_Credit.SecondColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Third {
                get {
                    try {
                        return ((decimal)(this[this.tabledtAccountReceiable_Credit.ThirdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Third\' in table \'dtAccountReceiable_Credit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAccountReceiable_Credit.ThirdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Four {
                get {
                    try {
                        return ((decimal)(this[this.tabledtAccountReceiable_Credit.FourColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Four\' in table \'dtAccountReceiable_Credit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAccountReceiable_Credit.FourColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal DebitCredit {
                get {
                    try {
                        return ((decimal)(this[this.tabledtAccountReceiable_Credit.DebitCreditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DebitCredit\' in table \'dtAccountReceiable_Credit\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tabledtAccountReceiable_Credit.DebitCreditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Balance {
                get {
                    try {
                        return ((decimal)(this[this.tabledtAccountReceiable_Credit.BalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Balance\' in table \'dtAccountReceiable_Credit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAccountReceiable_Credit.BalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal OpBalance {
                get {
                    try {
                        return ((decimal)(this[this.tabledtAccountReceiable_Credit.OpBalanceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OpBalance\' in table \'dtAccountReceiable_Credit\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtAccountReceiable_Credit.OpBalanceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamilyTitleNull() {
                return this.IsNull(this.tabledtAccountReceiable_Credit.FamilyTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamilyTitleNull() {
                this[this.tabledtAccountReceiable_Credit.FamilyTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTranDateNull() {
                return this.IsNull(this.tabledtAccountReceiable_Credit.TranDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTranDateNull() {
                this[this.tabledtAccountReceiable_Credit.TranDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChildNameNull() {
                return this.IsNull(this.tabledtAccountReceiable_Credit.ChildNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChildNameNull() {
                this[this.tabledtAccountReceiable_Credit.ChildNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFirstNull() {
                return this.IsNull(this.tabledtAccountReceiable_Credit.FirstColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFirstNull() {
                this[this.tabledtAccountReceiable_Credit.FirstColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSecondNull() {
                return this.IsNull(this.tabledtAccountReceiable_Credit.SecondColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSecondNull() {
                this[this.tabledtAccountReceiable_Credit.SecondColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThirdNull() {
                return this.IsNull(this.tabledtAccountReceiable_Credit.ThirdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetThirdNull() {
                this[this.tabledtAccountReceiable_Credit.ThirdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFourNull() {
                return this.IsNull(this.tabledtAccountReceiable_Credit.FourColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFourNull() {
                this[this.tabledtAccountReceiable_Credit.FourColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDebitCreditNull() {
                return this.IsNull(this.tabledtAccountReceiable_Credit.DebitCreditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDebitCreditNull() {
                this[this.tabledtAccountReceiable_Credit.DebitCreditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBalanceNull() {
                return this.IsNull(this.tabledtAccountReceiable_Credit.BalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBalanceNull() {
                this[this.tabledtAccountReceiable_Credit.BalanceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOpBalanceNull() {
                return this.IsNull(this.tabledtAccountReceiable_Credit.OpBalanceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOpBalanceNull() {
                this[this.tabledtAccountReceiable_Credit.OpBalanceColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtLateFeesRow : global::System.Data.DataRow {
            
            private dtLateFeesDataTable tabledtLateFees;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtLateFeesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtLateFees = ((dtLateFeesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid Id {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tabledtLateFees.IdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Id\' in table \'dtLateFees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLateFees.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FamilyTitle {
                get {
                    try {
                        return ((string)(this[this.tabledtLateFees.FamilyTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FamilyTitle\' in table \'dtLateFees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLateFees.FamilyTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChildName {
                get {
                    try {
                        return ((string)(this[this.tabledtLateFees.ChildNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChildName\' in table \'dtLateFees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLateFees.ChildNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal LateFee {
                get {
                    try {
                        return ((decimal)(this[this.tabledtLateFees.LateFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LateFee\' in table \'dtLateFees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLateFees.LateFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TransactionDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtLateFees.TransactionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TransactionDate\' in table \'dtLateFees\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtLateFees.TransactionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIdNull() {
                return this.IsNull(this.tabledtLateFees.IdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIdNull() {
                this[this.tabledtLateFees.IdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamilyTitleNull() {
                return this.IsNull(this.tabledtLateFees.FamilyTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamilyTitleNull() {
                this[this.tabledtLateFees.FamilyTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChildNameNull() {
                return this.IsNull(this.tabledtLateFees.ChildNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChildNameNull() {
                this[this.tabledtLateFees.ChildNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLateFeeNull() {
                return this.IsNull(this.tabledtLateFees.LateFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLateFeeNull() {
                this[this.tabledtLateFees.LateFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTransactionDateNull() {
                return this.IsNull(this.tabledtLateFees.TransactionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTransactionDateNull() {
                this[this.tabledtLateFees.TransactionDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtFamilyChildListRow : global::System.Data.DataRow {
            
            private dtFamilyChildListDataTable tabledtFamilyChildList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtFamilyChildListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtFamilyChildList = ((dtFamilyChildListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FamilyTitle {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyChildList.FamilyTitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FamilyTitle\' in table \'dtFamilyChildList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyChildList.FamilyTitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyChildList.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'dtFamilyChildList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyChildList.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ChildName {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyChildList.ChildNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChildName\' in table \'dtFamilyChildList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyChildList.ChildNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Gender {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyChildList.GenderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gender\' in table \'dtFamilyChildList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyChildList.GenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyChildList.TitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Title\' in table \'dtFamilyChildList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyChildList.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime startdate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtFamilyChildList.startdateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'startdate\' in table \'dtFamilyChildList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyChildList.startdateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime enddate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtFamilyChildList.enddateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'enddate\' in table \'dtFamilyChildList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyChildList.enddateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal fees {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFamilyChildList.feesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'fees\' in table \'dtFamilyChildList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyChildList.feesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeesPeriod {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyChildList.FeesPeriodColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeesPeriod\' in table \'dtFamilyChildList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyChildList.FeesPeriodColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyChildList.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'dtFamilyChildList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyChildList.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tabledtFamilyChildList.PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone\' in table \'dtFamilyChildList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtFamilyChildList.PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFamilyTitleNull() {
                return this.IsNull(this.tabledtFamilyChildList.FamilyTitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFamilyTitleNull() {
                this[this.tabledtFamilyChildList.FamilyTitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tabledtFamilyChildList.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tabledtFamilyChildList.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChildNameNull() {
                return this.IsNull(this.tabledtFamilyChildList.ChildNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChildNameNull() {
                this[this.tabledtFamilyChildList.ChildNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenderNull() {
                return this.IsNull(this.tabledtFamilyChildList.GenderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenderNull() {
                this[this.tabledtFamilyChildList.GenderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitleNull() {
                return this.IsNull(this.tabledtFamilyChildList.TitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitleNull() {
                this[this.tabledtFamilyChildList.TitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsstartdateNull() {
                return this.IsNull(this.tabledtFamilyChildList.startdateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetstartdateNull() {
                this[this.tabledtFamilyChildList.startdateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsenddateNull() {
                return this.IsNull(this.tabledtFamilyChildList.enddateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetenddateNull() {
                this[this.tabledtFamilyChildList.enddateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsfeesNull() {
                return this.IsNull(this.tabledtFamilyChildList.feesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetfeesNull() {
                this[this.tabledtFamilyChildList.feesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeesPeriodNull() {
                return this.IsNull(this.tabledtFamilyChildList.FeesPeriodColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeesPeriodNull() {
                this[this.tabledtFamilyChildList.FeesPeriodColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddressNull() {
                return this.IsNull(this.tabledtFamilyChildList.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddressNull() {
                this[this.tabledtFamilyChildList.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tabledtFamilyChildList.PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tabledtFamilyChildList.PhoneColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtChildDataListRow : global::System.Data.DataRow {
            
            private dtChildDataListDataTable tabledtChildDataList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtChildDataListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtChildDataList = ((dtChildDataListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Child {
                get {
                    try {
                        return ((string)(this[this.tabledtChildDataList.ChildColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Child\' in table \'dtChildDataList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtChildDataList.ChildColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DOB {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tabledtChildDataList.DOBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOB\' in table \'dtChildDataList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtChildDataList.DOBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Gender {
                get {
                    try {
                        return ((string)(this[this.tabledtChildDataList.GenderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gender\' in table \'dtChildDataList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtChildDataList.GenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tabledtChildDataList.TitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Title\' in table \'dtChildDataList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtChildDataList.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tabledtChildDataList.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'dtChildDataList\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tabledtChildDataList.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChildNull() {
                return this.IsNull(this.tabledtChildDataList.ChildColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChildNull() {
                this[this.tabledtChildDataList.ChildColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOBNull() {
                return this.IsNull(this.tabledtChildDataList.DOBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOBNull() {
                this[this.tabledtChildDataList.DOBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenderNull() {
                return this.IsNull(this.tabledtChildDataList.GenderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenderNull() {
                this[this.tabledtChildDataList.GenderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitleNull() {
                return this.IsNull(this.tabledtChildDataList.TitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitleNull() {
                this[this.tabledtChildDataList.TitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tabledtChildDataList.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tabledtChildDataList.NameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtClassWiseStudentRowChangeEvent : global::System.EventArgs {
            
            private dtClassWiseStudentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtClassWiseStudentRowChangeEvent(dtClassWiseStudentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtClassWiseStudentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtAttendanceRowChangeEvent : global::System.EventArgs {
            
            private dtAttendanceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAttendanceRowChangeEvent(dtAttendanceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAttendanceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtProgramWiseStudentRowChangeEvent : global::System.EventArgs {
            
            private dtProgramWiseStudentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtProgramWiseStudentRowChangeEvent(dtProgramWiseStudentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtProgramWiseStudentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtDipositRowChangeEvent : global::System.EventArgs {
            
            private dtDipositRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDipositRowChangeEvent(dtDipositRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtDipositRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtLedgerOfFamilyRowChangeEvent : global::System.EventArgs {
            
            private dtLedgerOfFamilyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLedgerOfFamilyRowChangeEvent(dtLedgerOfFamilyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLedgerOfFamilyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtAccountReceiable_CreditRowChangeEvent : global::System.EventArgs {
            
            private dtAccountReceiable_CreditRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAccountReceiable_CreditRowChangeEvent(dtAccountReceiable_CreditRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtAccountReceiable_CreditRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtLateFeesRowChangeEvent : global::System.EventArgs {
            
            private dtLateFeesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLateFeesRowChangeEvent(dtLateFeesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtLateFeesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtFamilyChildListRowChangeEvent : global::System.EventArgs {
            
            private dtFamilyChildListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyChildListRowChangeEvent(dtFamilyChildListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFamilyChildListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtChildDataListRowChangeEvent : global::System.EventArgs {
            
            private dtChildDataListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtChildDataListRowChangeEvent(dtChildDataListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtChildDataListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591